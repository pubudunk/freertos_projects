
002LED_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006084  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800639c  0800639c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800639c  0800639c  0001639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063a4  080063a4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063a4  080063a4  000163a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080063ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014410  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001442c  2001442c  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012234  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b6c  00000000  00000000  000322c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011b0  00000000  00000000  00034e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d97  00000000  00000000  00035fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000255f3  00000000  00000000  00036d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014a59  00000000  00000000  0005c36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6968  00000000  00000000  00070dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004994  00000000  00000000  0015772c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000119  00000000  00000000  0015c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800621c 	.word	0x0800621c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000020 	.word	0x20000020
 80001ec:	0800621c 	.word	0x0800621c

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e58 	.word	0x20012e58

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b970 	b.w	800057c <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9e08      	ldr	r6, [sp, #32]
 80002ba:	460d      	mov	r5, r1
 80002bc:	4604      	mov	r4, r0
 80002be:	460f      	mov	r7, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14a      	bne.n	800035a <__udivmoddi4+0xa6>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4694      	mov	ip, r2
 80002c8:	d965      	bls.n	8000396 <__udivmoddi4+0xe2>
 80002ca:	fab2 f382 	clz	r3, r2
 80002ce:	b143      	cbz	r3, 80002e2 <__udivmoddi4+0x2e>
 80002d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d4:	f1c3 0220 	rsb	r2, r3, #32
 80002d8:	409f      	lsls	r7, r3
 80002da:	fa20 f202 	lsr.w	r2, r0, r2
 80002de:	4317      	orrs	r7, r2
 80002e0:	409c      	lsls	r4, r3
 80002e2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e6:	fa1f f58c 	uxth.w	r5, ip
 80002ea:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ee:	0c22      	lsrs	r2, r4, #16
 80002f0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f8:	fb01 f005 	mul.w	r0, r1, r5
 80002fc:	4290      	cmp	r0, r2
 80002fe:	d90a      	bls.n	8000316 <__udivmoddi4+0x62>
 8000300:	eb1c 0202 	adds.w	r2, ip, r2
 8000304:	f101 37ff 	add.w	r7, r1, #4294967295
 8000308:	f080 811c 	bcs.w	8000544 <__udivmoddi4+0x290>
 800030c:	4290      	cmp	r0, r2
 800030e:	f240 8119 	bls.w	8000544 <__udivmoddi4+0x290>
 8000312:	3902      	subs	r1, #2
 8000314:	4462      	add	r2, ip
 8000316:	1a12      	subs	r2, r2, r0
 8000318:	b2a4      	uxth	r4, r4
 800031a:	fbb2 f0fe 	udiv	r0, r2, lr
 800031e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000322:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	42a5      	cmp	r5, r4
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x90>
 800032e:	eb1c 0404 	adds.w	r4, ip, r4
 8000332:	f100 32ff 	add.w	r2, r0, #4294967295
 8000336:	f080 8107 	bcs.w	8000548 <__udivmoddi4+0x294>
 800033a:	42a5      	cmp	r5, r4
 800033c:	f240 8104 	bls.w	8000548 <__udivmoddi4+0x294>
 8000340:	4464      	add	r4, ip
 8000342:	3802      	subs	r0, #2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0xa2>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xbc>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80ed 	beq.w	800053e <__udivmoddi4+0x28a>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d149      	bne.n	800040c <__udivmoddi4+0x158>
 8000378:	42ab      	cmp	r3, r5
 800037a:	d302      	bcc.n	8000382 <__udivmoddi4+0xce>
 800037c:	4282      	cmp	r2, r0
 800037e:	f200 80f8 	bhi.w	8000572 <__udivmoddi4+0x2be>
 8000382:	1a84      	subs	r4, r0, r2
 8000384:	eb65 0203 	sbc.w	r2, r5, r3
 8000388:	2001      	movs	r0, #1
 800038a:	4617      	mov	r7, r2
 800038c:	2e00      	cmp	r6, #0
 800038e:	d0e2      	beq.n	8000356 <__udivmoddi4+0xa2>
 8000390:	e9c6 4700 	strd	r4, r7, [r6]
 8000394:	e7df      	b.n	8000356 <__udivmoddi4+0xa2>
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xe6>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f382 	clz	r3, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x210>
 80003a4:	1a8a      	subs	r2, r1, r2
 80003a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	2101      	movs	r1, #1
 80003b0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b4:	fb07 2015 	mls	r0, r7, r5, r2
 80003b8:	0c22      	lsrs	r2, r4, #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb0e f005 	mul.w	r0, lr, r5
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x124>
 80003c6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ca:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x122>
 80003d0:	4290      	cmp	r0, r2
 80003d2:	f200 80cb 	bhi.w	800056c <__udivmoddi4+0x2b8>
 80003d6:	4645      	mov	r5, r8
 80003d8:	1a12      	subs	r2, r2, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e0:	fb07 2210 	mls	r2, r7, r0, r2
 80003e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e8:	fb0e fe00 	mul.w	lr, lr, r0
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x14e>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f8:	d202      	bcs.n	8000400 <__udivmoddi4+0x14c>
 80003fa:	45a6      	cmp	lr, r4
 80003fc:	f200 80bb 	bhi.w	8000576 <__udivmoddi4+0x2c2>
 8000400:	4610      	mov	r0, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800040a:	e79f      	b.n	800034c <__udivmoddi4+0x98>
 800040c:	f1c1 0720 	rsb	r7, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 fc07 	lsr.w	ip, r2, r7
 8000416:	ea4c 0c03 	orr.w	ip, ip, r3
 800041a:	fa05 f401 	lsl.w	r4, r5, r1
 800041e:	fa20 f307 	lsr.w	r3, r0, r7
 8000422:	40fd      	lsrs	r5, r7
 8000424:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fbb5 f8f9 	udiv	r8, r5, r9
 800042e:	fa1f fe8c 	uxth.w	lr, ip
 8000432:	fb09 5518 	mls	r5, r9, r8, r5
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800043c:	fb08 f50e 	mul.w	r5, r8, lr
 8000440:	42a5      	cmp	r5, r4
 8000442:	fa02 f201 	lsl.w	r2, r2, r1
 8000446:	fa00 f001 	lsl.w	r0, r0, r1
 800044a:	d90b      	bls.n	8000464 <__udivmoddi4+0x1b0>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f108 3aff 	add.w	sl, r8, #4294967295
 8000454:	f080 8088 	bcs.w	8000568 <__udivmoddi4+0x2b4>
 8000458:	42a5      	cmp	r5, r4
 800045a:	f240 8085 	bls.w	8000568 <__udivmoddi4+0x2b4>
 800045e:	f1a8 0802 	sub.w	r8, r8, #2
 8000462:	4464      	add	r4, ip
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	b29d      	uxth	r5, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000474:	fb03 fe0e 	mul.w	lr, r3, lr
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1da>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f103 35ff 	add.w	r5, r3, #4294967295
 8000484:	d26c      	bcs.n	8000560 <__udivmoddi4+0x2ac>
 8000486:	45a6      	cmp	lr, r4
 8000488:	d96a      	bls.n	8000560 <__udivmoddi4+0x2ac>
 800048a:	3b02      	subs	r3, #2
 800048c:	4464      	add	r4, ip
 800048e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000492:	fba3 9502 	umull	r9, r5, r3, r2
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	42ac      	cmp	r4, r5
 800049c:	46c8      	mov	r8, r9
 800049e:	46ae      	mov	lr, r5
 80004a0:	d356      	bcc.n	8000550 <__udivmoddi4+0x29c>
 80004a2:	d053      	beq.n	800054c <__udivmoddi4+0x298>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x208>
 80004a6:	ebb0 0208 	subs.w	r2, r0, r8
 80004aa:	eb64 040e 	sbc.w	r4, r4, lr
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40ca      	lsrs	r2, r1
 80004b4:	40cc      	lsrs	r4, r1
 80004b6:	4317      	orrs	r7, r2
 80004b8:	e9c6 7400 	strd	r7, r4, [r6]
 80004bc:	4618      	mov	r0, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c4:	f1c3 0120 	rsb	r1, r3, #32
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	fa20 f201 	lsr.w	r2, r0, r1
 80004d0:	fa25 f101 	lsr.w	r1, r5, r1
 80004d4:	409d      	lsls	r5, r3
 80004d6:	432a      	orrs	r2, r5
 80004d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004dc:	fa1f fe8c 	uxth.w	lr, ip
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1510 	mls	r5, r7, r0, r1
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ee:	fb00 f50e 	mul.w	r5, r0, lr
 80004f2:	428d      	cmp	r5, r1
 80004f4:	fa04 f403 	lsl.w	r4, r4, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x258>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	d22f      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000504:	428d      	cmp	r5, r1
 8000506:	d92d      	bls.n	8000564 <__udivmoddi4+0x2b0>
 8000508:	3802      	subs	r0, #2
 800050a:	4461      	add	r1, ip
 800050c:	1b49      	subs	r1, r1, r5
 800050e:	b292      	uxth	r2, r2
 8000510:	fbb1 f5f7 	udiv	r5, r1, r7
 8000514:	fb07 1115 	mls	r1, r7, r5, r1
 8000518:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800051c:	fb05 f10e 	mul.w	r1, r5, lr
 8000520:	4291      	cmp	r1, r2
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x282>
 8000524:	eb1c 0202 	adds.w	r2, ip, r2
 8000528:	f105 38ff 	add.w	r8, r5, #4294967295
 800052c:	d216      	bcs.n	800055c <__udivmoddi4+0x2a8>
 800052e:	4291      	cmp	r1, r2
 8000530:	d914      	bls.n	800055c <__udivmoddi4+0x2a8>
 8000532:	3d02      	subs	r5, #2
 8000534:	4462      	add	r2, ip
 8000536:	1a52      	subs	r2, r2, r1
 8000538:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800053c:	e738      	b.n	80003b0 <__udivmoddi4+0xfc>
 800053e:	4631      	mov	r1, r6
 8000540:	4630      	mov	r0, r6
 8000542:	e708      	b.n	8000356 <__udivmoddi4+0xa2>
 8000544:	4639      	mov	r1, r7
 8000546:	e6e6      	b.n	8000316 <__udivmoddi4+0x62>
 8000548:	4610      	mov	r0, r2
 800054a:	e6fb      	b.n	8000344 <__udivmoddi4+0x90>
 800054c:	4548      	cmp	r0, r9
 800054e:	d2a9      	bcs.n	80004a4 <__udivmoddi4+0x1f0>
 8000550:	ebb9 0802 	subs.w	r8, r9, r2
 8000554:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000558:	3b01      	subs	r3, #1
 800055a:	e7a3      	b.n	80004a4 <__udivmoddi4+0x1f0>
 800055c:	4645      	mov	r5, r8
 800055e:	e7ea      	b.n	8000536 <__udivmoddi4+0x282>
 8000560:	462b      	mov	r3, r5
 8000562:	e794      	b.n	800048e <__udivmoddi4+0x1da>
 8000564:	4640      	mov	r0, r8
 8000566:	e7d1      	b.n	800050c <__udivmoddi4+0x258>
 8000568:	46d0      	mov	r8, sl
 800056a:	e77b      	b.n	8000464 <__udivmoddi4+0x1b0>
 800056c:	3d02      	subs	r5, #2
 800056e:	4462      	add	r2, ip
 8000570:	e732      	b.n	80003d8 <__udivmoddi4+0x124>
 8000572:	4608      	mov	r0, r1
 8000574:	e70a      	b.n	800038c <__udivmoddi4+0xd8>
 8000576:	4464      	add	r4, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e742      	b.n	8000402 <__udivmoddi4+0x14e>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	BaseType_t xReturned = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
	TaskHandle_t xTask1Handle = NULL, xTask2Handle = NULL, xTask3Handle = NULL;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fcd5 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f86d 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f8d5 	bl	800074c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // enable the CYCCNT counter
  *DWT_CTRL |= (1 << 0);
 80005a2:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <main+0xd8>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a2c      	ldr	r2, [pc, #176]	; (8000658 <main+0xd8>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6013      	str	r3, [r2, #0]

  // enable usart
  SEGGER_UART_init(500000);
 80005ae:	482b      	ldr	r0, [pc, #172]	; (800065c <main+0xdc>)
 80005b0:	f003 fc8c 	bl	8003ecc <SEGGER_UART_init>

  // start segger recording
  SEGGER_SYSVIEW_Conf();
 80005b4:	f003 fab4 	bl	8003b20 <SEGGER_SYSVIEW_Conf>

  xReturned = xTaskCreate(led_green_handler, "led_green_task", 200, NULL, 2, &xTask1Handle);
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	22c8      	movs	r2, #200	; 0xc8
 80005c6:	4926      	ldr	r1, [pc, #152]	; (8000660 <main+0xe0>)
 80005c8:	4826      	ldr	r0, [pc, #152]	; (8000664 <main+0xe4>)
 80005ca:	f001 ffa7 	bl	800251c <xTaskCreate>
 80005ce:	61f8      	str	r0, [r7, #28]
  configASSERT(pdPASS == xReturned);
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00a      	beq.n	80005ec <main+0x6c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005e8:	bf00      	nop
 80005ea:	e7fe      	b.n	80005ea <main+0x6a>

  xReturned = xTaskCreate(led_red_handler, "led_red_task", 200, NULL, 2, &xTask2Handle);
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2302      	movs	r3, #2
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	22c8      	movs	r2, #200	; 0xc8
 80005fa:	491b      	ldr	r1, [pc, #108]	; (8000668 <main+0xe8>)
 80005fc:	481b      	ldr	r0, [pc, #108]	; (800066c <main+0xec>)
 80005fe:	f001 ff8d 	bl	800251c <xTaskCreate>
 8000602:	61f8      	str	r0, [r7, #28]
  configASSERT(pdPASS == xReturned);
 8000604:	69fb      	ldr	r3, [r7, #28]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d00a      	beq.n	8000620 <main+0xa0>
        __asm volatile
 800060a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060e:	f383 8811 	msr	BASEPRI, r3
 8000612:	f3bf 8f6f 	isb	sy
 8000616:	f3bf 8f4f 	dsb	sy
 800061a:	617b      	str	r3, [r7, #20]
    }
 800061c:	bf00      	nop
 800061e:	e7fe      	b.n	800061e <main+0x9e>

  xReturned = xTaskCreate(dummy_handler, "dummy_delay_task", 200, NULL, 2, &xTask3Handle);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	2302      	movs	r3, #2
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	22c8      	movs	r2, #200	; 0xc8
 800062c:	4910      	ldr	r1, [pc, #64]	; (8000670 <main+0xf0>)
 800062e:	4811      	ldr	r0, [pc, #68]	; (8000674 <main+0xf4>)
 8000630:	f001 ff74 	bl	800251c <xTaskCreate>
 8000634:	61f8      	str	r0, [r7, #28]
  configASSERT(pdPASS == xReturned);
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d00a      	beq.n	8000652 <main+0xd2>
        __asm volatile
 800063c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000640:	f383 8811 	msr	BASEPRI, r3
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	f3bf 8f4f 	dsb	sy
 800064c:	613b      	str	r3, [r7, #16]
    }
 800064e:	bf00      	nop
 8000650:	e7fe      	b.n	8000650 <main+0xd0>


  // start the scheduler
  vTaskStartScheduler();
 8000652:	f002 f96d 	bl	8002930 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000656:	e7fe      	b.n	8000656 <main+0xd6>
 8000658:	e0001000 	.word	0xe0001000
 800065c:	0007a120 	.word	0x0007a120
 8000660:	08006234 	.word	0x08006234
 8000664:	08000c25 	.word	0x08000c25
 8000668:	08006244 	.word	0x08006244
 800066c:	08000c79 	.word	0x08000c79
 8000670:	08006254 	.word	0x08006254
 8000674:	08000ccd 	.word	0x08000ccd

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 fd8e 	bl	80061a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a27      	ldr	r2, [pc, #156]	; (8000744 <SystemClock_Config+0xcc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xd0>)
 80006c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e8:	2308      	movs	r3, #8
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ec:	23a8      	movs	r3, #168	; 0xa8
 80006ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f4:	2307      	movs	r3, #7
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 ff25 	bl	800154c <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000708:	f000 fb16 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000718:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2105      	movs	r1, #5
 800072a:	4618      	mov	r0, r3
 800072c:	f001 f986 	bl	8001a3c <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000736:	f000 faff 	bl	8000d38 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
 8000766:	4bb2      	ldr	r3, [pc, #712]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4ab1      	ldr	r2, [pc, #708]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4baf      	ldr	r3, [pc, #700]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	623b      	str	r3, [r7, #32]
 800077c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
 8000782:	4bab      	ldr	r3, [pc, #684]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4aaa      	ldr	r2, [pc, #680]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000788:	f043 0320 	orr.w	r3, r3, #32
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4ba8      	ldr	r3, [pc, #672]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0320 	and.w	r3, r3, #32
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4ba4      	ldr	r3, [pc, #656]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4aa3      	ldr	r2, [pc, #652]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4ba1      	ldr	r3, [pc, #644]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b9d      	ldr	r3, [pc, #628]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a9c      	ldr	r2, [pc, #624]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b9a      	ldr	r3, [pc, #616]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b96      	ldr	r3, [pc, #600]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a95      	ldr	r2, [pc, #596]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b93      	ldr	r3, [pc, #588]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b8f      	ldr	r3, [pc, #572]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a8e      	ldr	r2, [pc, #568]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 80007f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b8c      	ldr	r3, [pc, #560]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b88      	ldr	r3, [pc, #544]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a87      	ldr	r2, [pc, #540]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b85      	ldr	r3, [pc, #532]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b81      	ldr	r3, [pc, #516]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a80      	ldr	r2, [pc, #512]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b7e      	ldr	r3, [pc, #504]	; (8000a30 <MX_GPIO_Init+0x2e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2116      	movs	r1, #22
 8000846:	487b      	ldr	r0, [pc, #492]	; (8000a34 <MX_GPIO_Init+0x2e8>)
 8000848:	f000 fe4c 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2180      	movs	r1, #128	; 0x80
 8000850:	4879      	ldr	r0, [pc, #484]	; (8000a38 <MX_GPIO_Init+0x2ec>)
 8000852:	f000 fe47 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800085c:	4877      	ldr	r0, [pc, #476]	; (8000a3c <MX_GPIO_Init+0x2f0>)
 800085e:	f000 fe41 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000868:	4875      	ldr	r0, [pc, #468]	; (8000a40 <MX_GPIO_Init+0x2f4>)
 800086a:	f000 fe3b 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800086e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000880:	230c      	movs	r3, #12
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	4619      	mov	r1, r3
 800088a:	486e      	ldr	r0, [pc, #440]	; (8000a44 <MX_GPIO_Init+0x2f8>)
 800088c:	f000 fc7e 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000890:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80008a2:	2305      	movs	r3, #5
 80008a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	4619      	mov	r1, r3
 80008ac:	4865      	ldr	r0, [pc, #404]	; (8000a44 <MX_GPIO_Init+0x2f8>)
 80008ae:	f000 fc6d 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80008b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008c4:	230e      	movs	r3, #14
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008cc:	4619      	mov	r1, r3
 80008ce:	485d      	ldr	r0, [pc, #372]	; (8000a44 <MX_GPIO_Init+0x2f8>)
 80008d0:	f000 fc5c 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80008d4:	2301      	movs	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008e4:	230c      	movs	r3, #12
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	4619      	mov	r1, r3
 80008ee:	4851      	ldr	r0, [pc, #324]	; (8000a34 <MX_GPIO_Init+0x2e8>)
 80008f0:	f000 fc4c 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008f4:	2316      	movs	r3, #22
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000908:	4619      	mov	r1, r3
 800090a:	484a      	ldr	r0, [pc, #296]	; (8000a34 <MX_GPIO_Init+0x2e8>)
 800090c:	f000 fc3e 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000910:	f248 0307 	movw	r3, #32775	; 0x8007
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000916:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	4844      	ldr	r0, [pc, #272]	; (8000a38 <MX_GPIO_Init+0x2ec>)
 8000928:	f000 fc30 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800092c:	f641 0358 	movw	r3, #6232	; 0x1858
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800093e:	230e      	movs	r3, #14
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000946:	4619      	mov	r1, r3
 8000948:	483b      	ldr	r0, [pc, #236]	; (8000a38 <MX_GPIO_Init+0x2ec>)
 800094a:	f000 fc1f 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4834      	ldr	r0, [pc, #208]	; (8000a38 <MX_GPIO_Init+0x2ec>)
 8000966:	f000 fc11 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800096a:	2320      	movs	r3, #32
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	482d      	ldr	r0, [pc, #180]	; (8000a34 <MX_GPIO_Init+0x2e8>)
 8000980:	f000 fc04 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000984:	2303      	movs	r3, #3
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000994:	2309      	movs	r3, #9
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	482a      	ldr	r0, [pc, #168]	; (8000a48 <MX_GPIO_Init+0x2fc>)
 80009a0:	f000 fbf4 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009a4:	2304      	movs	r3, #4
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4824      	ldr	r0, [pc, #144]	; (8000a48 <MX_GPIO_Init+0x2fc>)
 80009b8:	f000 fbe8 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80009bc:	f248 1333 	movw	r3, #33075	; 0x8133
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009ce:	230c      	movs	r3, #12
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	4819      	ldr	r0, [pc, #100]	; (8000a40 <MX_GPIO_Init+0x2f4>)
 80009da:	f000 fbd7 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80009de:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009f0:	230c      	movs	r3, #12
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <MX_GPIO_Init+0x300>)
 80009fc:	f000 fbc6 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a00:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a12:	230e      	movs	r3, #14
 8000a14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <MX_GPIO_Init+0x2fc>)
 8000a1e:	f000 fbb5 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a22:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a2c:	e010      	b.n	8000a50 <MX_GPIO_Init+0x304>
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020800 	.word	0x40020800
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40021800 	.word	0x40021800
 8000a44:	40021400 	.word	0x40021400
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	486b      	ldr	r0, [pc, #428]	; (8000c10 <MX_GPIO_Init+0x4c4>)
 8000a64:	f000 fb92 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4864      	ldr	r0, [pc, #400]	; (8000c10 <MX_GPIO_Init+0x4c4>)
 8000a7e:	f000 fb85 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a82:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a94:	230c      	movs	r3, #12
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	485d      	ldr	r0, [pc, #372]	; (8000c14 <MX_GPIO_Init+0x4c8>)
 8000aa0:	f000 fb74 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000aa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4856      	ldr	r0, [pc, #344]	; (8000c14 <MX_GPIO_Init+0x4c8>)
 8000aba:	f000 fb67 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000abe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	484f      	ldr	r0, [pc, #316]	; (8000c14 <MX_GPIO_Init+0x4c8>)
 8000ad8:	f000 fb58 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000adc:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aee:	230e      	movs	r3, #14
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4619      	mov	r1, r3
 8000af8:	4847      	ldr	r0, [pc, #284]	; (8000c18 <MX_GPIO_Init+0x4cc>)
 8000afa:	f000 fb47 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000afe:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b10:	230e      	movs	r3, #14
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4840      	ldr	r0, [pc, #256]	; (8000c1c <MX_GPIO_Init+0x4d0>)
 8000b1c:	f000 fb36 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b26:	2312      	movs	r3, #18
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b32:	2304      	movs	r3, #4
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4837      	ldr	r0, [pc, #220]	; (8000c1c <MX_GPIO_Init+0x4d0>)
 8000b3e:	f000 fb25 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b48:	2312      	movs	r3, #18
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b54:	2304      	movs	r3, #4
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4830      	ldr	r0, [pc, #192]	; (8000c20 <MX_GPIO_Init+0x4d4>)
 8000b60:	f000 fb14 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b76:	2307      	movs	r3, #7
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4827      	ldr	r0, [pc, #156]	; (8000c20 <MX_GPIO_Init+0x4d4>)
 8000b82:	f000 fb03 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b86:	2348      	movs	r3, #72	; 0x48
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b96:	230e      	movs	r3, #14
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	481c      	ldr	r0, [pc, #112]	; (8000c14 <MX_GPIO_Init+0x4c8>)
 8000ba2:	f000 faf3 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000ba6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bb8:	2309      	movs	r3, #9
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4815      	ldr	r0, [pc, #84]	; (8000c18 <MX_GPIO_Init+0x4cc>)
 8000bc4:	f000 fae2 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000bc8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_GPIO_Init+0x4cc>)
 8000be2:	f000 fad3 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000be6:	2360      	movs	r3, #96	; 0x60
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <MX_GPIO_Init+0x4c4>)
 8000c02:	f000 fac3 	bl	800118c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c06:	bf00      	nop
 8000c08:	3738      	adds	r7, #56	; 0x38
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40020400 	.word	0x40020400
 8000c14:	40020c00 	.word	0x40020c00
 8000c18:	40021800 	.word	0x40021800
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020000 	.word	0x40020000

08000c24 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void *pvParam)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

	TickType_t xLastWakeTime;
	BaseType_t xWasDelayed;

	xLastWakeTime = xTaskGetTickCount ();
 8000c2c:	f001 ffea 	bl	8002c04 <xTaskGetTickCount>
 8000c30:	4603      	mov	r3, r0
 8000c32:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOG, LD3_Pin);
 8000c34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <led_green_handler+0x4c>)
 8000c3a:	f000 fc6c 	bl	8001516 <HAL_GPIO_TogglePin>
		SEGGER_SYSVIEW_PrintfTarget("green");
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <led_green_handler+0x50>)
 8000c40:	f005 fa04 	bl	800604c <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_Delay(1000);
		//vTaskDelay(pdMS_TO_TICKS(1000));
		xWasDelayed = xTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(1000));
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 fded 	bl	800282c <xTaskDelayUntil>
 8000c52:	6178      	str	r0, [r7, #20]
		configASSERT(pdPASS == xWasDelayed);
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d0ec      	beq.n	8000c34 <led_green_handler+0x10>
        __asm volatile
 8000c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c5e:	f383 8811 	msr	BASEPRI, r3
 8000c62:	f3bf 8f6f 	isb	sy
 8000c66:	f3bf 8f4f 	dsb	sy
 8000c6a:	613b      	str	r3, [r7, #16]
    }
 8000c6c:	bf00      	nop
 8000c6e:	e7fe      	b.n	8000c6e <led_green_handler+0x4a>
 8000c70:	40021800 	.word	0x40021800
 8000c74:	08006268 	.word	0x08006268

08000c78 <led_red_handler>:
	vTaskDelete(NULL);

}

static void led_red_handler(void *pvParam)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	BaseType_t xWasDelayed;

	xLastWakeTime = xTaskGetTickCount ();
 8000c80:	f001 ffc0 	bl	8002c04 <xTaskGetTickCount>
 8000c84:	4603      	mov	r3, r0
 8000c86:	60fb      	str	r3, [r7, #12]

	while(1) {
		HAL_GPIO_TogglePin(GPIOG, LD4_Pin);
 8000c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <led_red_handler+0x4c>)
 8000c8e:	f000 fc42 	bl	8001516 <HAL_GPIO_TogglePin>
		SEGGER_SYSVIEW_PrintfTarget("red");
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <led_red_handler+0x50>)
 8000c94:	f005 f9da 	bl	800604c <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_Delay(250);
		//vTaskDelay(pdMS_TO_TICKS(250));
		xWasDelayed = xTaskDelayUntil(&xLastWakeTime,pdMS_TO_TICKS(250));
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	21fa      	movs	r1, #250	; 0xfa
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fdc4 	bl	800282c <xTaskDelayUntil>
 8000ca4:	6178      	str	r0, [r7, #20]
		configASSERT(pdPASS == xWasDelayed);
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d0ed      	beq.n	8000c88 <led_red_handler+0x10>
        __asm volatile
 8000cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb0:	f383 8811 	msr	BASEPRI, r3
 8000cb4:	f3bf 8f6f 	isb	sy
 8000cb8:	f3bf 8f4f 	dsb	sy
 8000cbc:	613b      	str	r3, [r7, #16]
    }
 8000cbe:	bf00      	nop
 8000cc0:	e7fe      	b.n	8000cc0 <led_red_handler+0x48>
 8000cc2:	bf00      	nop
 8000cc4:	40021800 	.word	0x40021800
 8000cc8:	08006270 	.word	0x08006270

08000ccc <dummy_handler>:

	vTaskDelete(NULL);
}

static void dummy_handler(void *pvParam)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	BaseType_t xWasDelayed;

	xLastWakeTime = xTaskGetTickCount ();
 8000cd4:	f001 ff96 	bl	8002c04 <xTaskGetTickCount>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	60fb      	str	r3, [r7, #12]

	while(1) {

		SEGGER_SYSVIEW_PrintfTarget("dummy");
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <dummy_handler+0x44>)
 8000cde:	f005 f9b5 	bl	800604c <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_Delay(400);
		//vTaskDelay(pdMS_TO_TICKS(400));
		xWasDelayed = xTaskDelayUntil(&xLastWakeTime,pdMS_TO_TICKS(400));
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fd9e 	bl	800282c <xTaskDelayUntil>
 8000cf0:	6178      	str	r0, [r7, #20]
		configASSERT(pdPASS == xWasDelayed);
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d0f1      	beq.n	8000cdc <dummy_handler+0x10>
        __asm volatile
 8000cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cfc:	f383 8811 	msr	BASEPRI, r3
 8000d00:	f3bf 8f6f 	isb	sy
 8000d04:	f3bf 8f4f 	dsb	sy
 8000d08:	613b      	str	r3, [r7, #16]
    }
 8000d0a:	bf00      	nop
 8000d0c:	e7fe      	b.n	8000d0c <dummy_handler+0x40>
 8000d0e:	bf00      	nop
 8000d10:	08006274 	.word	0x08006274

08000d14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d101      	bne.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d26:	f000 f92f 	bl	8000f88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40001000 	.word	0x40001000

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000d82:	f002 fb49 	bl	8003418 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	; 0x38
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <HAL_InitTick+0xe4>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	4a32      	ldr	r2, [pc, #200]	; (8000e78 <HAL_InitTick+0xe4>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6413      	str	r3, [r2, #64]	; 0x40
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <HAL_InitTick+0xe4>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	f003 0310 	and.w	r3, r3, #16
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc0:	f107 0210 	add.w	r2, r7, #16
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 f842 	bl	8001e54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d103      	bne.n	8000de2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dda:	f001 f827 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8000dde:	6378      	str	r0, [r7, #52]	; 0x34
 8000de0:	e004      	b.n	8000dec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000de2:	f001 f823 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8000de6:	4603      	mov	r3, r0
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dee:	4a23      	ldr	r2, [pc, #140]	; (8000e7c <HAL_InitTick+0xe8>)
 8000df0:	fba2 2303 	umull	r2, r3, r2, r3
 8000df4:	0c9b      	lsrs	r3, r3, #18
 8000df6:	3b01      	subs	r3, #1
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_InitTick+0xec>)
 8000dfc:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <HAL_InitTick+0xf0>)
 8000dfe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <HAL_InitTick+0xec>)
 8000e02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e06:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <HAL_InitTick+0xec>)
 8000e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_InitTick+0xec>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <HAL_InitTick+0xec>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_InitTick+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e20:	4817      	ldr	r0, [pc, #92]	; (8000e80 <HAL_InitTick+0xec>)
 8000e22:	f001 f849 	bl	8001eb8 <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d11b      	bne.n	8000e6c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e34:	4812      	ldr	r0, [pc, #72]	; (8000e80 <HAL_InitTick+0xec>)
 8000e36:	f001 f899 	bl	8001f6c <HAL_TIM_Base_Start_IT>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d111      	bne.n	8000e6c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e48:	2036      	movs	r0, #54	; 0x36
 8000e4a:	f000 f991 	bl	8001170 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d808      	bhi.n	8000e66 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	2036      	movs	r0, #54	; 0x36
 8000e5a:	f000 f96d 	bl	8001138 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_InitTick+0xf4>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	e002      	b.n	8000e6c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3738      	adds	r7, #56	; 0x38
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	431bde83 	.word	0x431bde83
 8000e80:	20000038 	.word	0x20000038
 8000e84:	40001000 	.word	0x40001000
 8000e88:	20000004 	.word	0x20000004

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM6_DAC_IRQHandler+0x10>)
 8000ebe:	f001 f8c5 	bl	800204c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000038 	.word	0x20000038

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef4:	f7ff ffea 	bl	8000ecc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	; (8000f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	; (8000f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f005 f94b 	bl	80061b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fb2d 	bl	8000580 <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000f34:	080063ac 	.word	0x080063ac
  ldr r2, =_sbss
 8000f38:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000f3c:	2001442c 	.word	0x2001442c

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f8d8 	bl	8001122 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff ff0e 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fee4 	bl	8000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000080 	.word	0x20000080

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000080 	.word	0x20000080

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <__NVIC_EnableIRQ+0x38>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff4c 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114a:	f7ff ff61 	bl	8001010 <__NVIC_GetPriorityGrouping>
 800114e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	68b9      	ldr	r1, [r7, #8]
 8001154:	6978      	ldr	r0, [r7, #20]
 8001156:	f7ff ffb1 	bl	80010bc <NVIC_EncodePriority>
 800115a:	4602      	mov	r2, r0
 800115c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff80 	bl	8001068 <__NVIC_SetPriority>
}
 8001168:	bf00      	nop
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff54 	bl	800102c <__NVIC_EnableIRQ>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e177      	b.n	8001498 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8166 	bne.w	8001492 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80c0 	beq.w	8001492 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b66      	ldr	r3, [pc, #408]	; (80014b0 <HAL_GPIO_Init+0x324>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a65      	ldr	r2, [pc, #404]	; (80014b0 <HAL_GPIO_Init+0x324>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b63      	ldr	r3, [pc, #396]	; (80014b0 <HAL_GPIO_Init+0x324>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a61      	ldr	r2, [pc, #388]	; (80014b4 <HAL_GPIO_Init+0x328>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a58      	ldr	r2, [pc, #352]	; (80014b8 <HAL_GPIO_Init+0x32c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d037      	beq.n	80013ca <HAL_GPIO_Init+0x23e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a57      	ldr	r2, [pc, #348]	; (80014bc <HAL_GPIO_Init+0x330>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d031      	beq.n	80013c6 <HAL_GPIO_Init+0x23a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a56      	ldr	r2, [pc, #344]	; (80014c0 <HAL_GPIO_Init+0x334>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d02b      	beq.n	80013c2 <HAL_GPIO_Init+0x236>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a55      	ldr	r2, [pc, #340]	; (80014c4 <HAL_GPIO_Init+0x338>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d025      	beq.n	80013be <HAL_GPIO_Init+0x232>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a54      	ldr	r2, [pc, #336]	; (80014c8 <HAL_GPIO_Init+0x33c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01f      	beq.n	80013ba <HAL_GPIO_Init+0x22e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a53      	ldr	r2, [pc, #332]	; (80014cc <HAL_GPIO_Init+0x340>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_GPIO_Init+0x22a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a52      	ldr	r2, [pc, #328]	; (80014d0 <HAL_GPIO_Init+0x344>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x226>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a51      	ldr	r2, [pc, #324]	; (80014d4 <HAL_GPIO_Init+0x348>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x222>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a50      	ldr	r2, [pc, #320]	; (80014d8 <HAL_GPIO_Init+0x34c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x21e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4f      	ldr	r2, [pc, #316]	; (80014dc <HAL_GPIO_Init+0x350>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x21a>
 80013a2:	2309      	movs	r3, #9
 80013a4:	e012      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013a6:	230a      	movs	r3, #10
 80013a8:	e010      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013aa:	2308      	movs	r3, #8
 80013ac:	e00e      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013ae:	2307      	movs	r3, #7
 80013b0:	e00c      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013b2:	2306      	movs	r3, #6
 80013b4:	e00a      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013b6:	2305      	movs	r3, #5
 80013b8:	e008      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013ba:	2304      	movs	r3, #4
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013be:	2303      	movs	r3, #3
 80013c0:	e004      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013ca:	2300      	movs	r3, #0
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	f002 0203 	and.w	r2, r2, #3
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	4093      	lsls	r3, r2
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013dc:	4935      	ldr	r1, [pc, #212]	; (80014b4 <HAL_GPIO_Init+0x328>)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <HAL_GPIO_Init+0x354>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800140e:	4a34      	ldr	r2, [pc, #208]	; (80014e0 <HAL_GPIO_Init+0x354>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001414:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <HAL_GPIO_Init+0x354>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001438:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <HAL_GPIO_Init+0x354>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <HAL_GPIO_Init+0x354>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001462:	4a1f      	ldr	r2, [pc, #124]	; (80014e0 <HAL_GPIO_Init+0x354>)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_GPIO_Init+0x354>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800148c:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <HAL_GPIO_Init+0x354>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3301      	adds	r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	2b0f      	cmp	r3, #15
 800149c:	f67f ae84 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40013800 	.word	0x40013800
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020c00 	.word	0x40020c00
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40021400 	.word	0x40021400
 80014d0:	40021800 	.word	0x40021800
 80014d4:	40021c00 	.word	0x40021c00
 80014d8:	40022000 	.word	0x40022000
 80014dc:	40022400 	.word	0x40022400
 80014e0:	40013c00 	.word	0x40013c00

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	041a      	lsls	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001516:	b480      	push	{r7}
 8001518:	b085      	sub	sp, #20
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	460b      	mov	r3, r1
 8001520:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001528:	887a      	ldrh	r2, [r7, #2]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4013      	ands	r3, r2
 800152e:	041a      	lsls	r2, r3, #16
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43d9      	mvns	r1, r3
 8001534:	887b      	ldrh	r3, [r7, #2]
 8001536:	400b      	ands	r3, r1
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e267      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d075      	beq.n	8001656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156a:	4b88      	ldr	r3, [pc, #544]	; (800178c <HAL_RCC_OscConfig+0x240>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b04      	cmp	r3, #4
 8001574:	d00c      	beq.n	8001590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001576:	4b85      	ldr	r3, [pc, #532]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800157e:	2b08      	cmp	r3, #8
 8001580:	d112      	bne.n	80015a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001582:	4b82      	ldr	r3, [pc, #520]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800158e:	d10b      	bne.n	80015a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	4b7e      	ldr	r3, [pc, #504]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d05b      	beq.n	8001654 <HAL_RCC_OscConfig+0x108>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d157      	bne.n	8001654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e242      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b0:	d106      	bne.n	80015c0 <HAL_RCC_OscConfig+0x74>
 80015b2:	4b76      	ldr	r3, [pc, #472]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a75      	ldr	r2, [pc, #468]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e01d      	b.n	80015fc <HAL_RCC_OscConfig+0xb0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x98>
 80015ca:	4b70      	ldr	r3, [pc, #448]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a6f      	ldr	r2, [pc, #444]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b6d      	ldr	r3, [pc, #436]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a6c      	ldr	r2, [pc, #432]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0xb0>
 80015e4:	4b69      	ldr	r3, [pc, #420]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a68      	ldr	r2, [pc, #416]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b66      	ldr	r3, [pc, #408]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a65      	ldr	r2, [pc, #404]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80015f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fcd4 	bl	8000fb0 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fcd0 	bl	8000fb0 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e207      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	4b5b      	ldr	r3, [pc, #364]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0xc0>
 800162a:	e014      	b.n	8001656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fcc0 	bl	8000fb0 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fcbc 	bl	8000fb0 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1f3      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	4b51      	ldr	r3, [pc, #324]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0xe8>
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d063      	beq.n	800172a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001662:	4b4a      	ldr	r3, [pc, #296]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001676:	2b08      	cmp	r3, #8
 8001678:	d11c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <HAL_RCC_OscConfig+0x240>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d116      	bne.n	80016b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	4b41      	ldr	r3, [pc, #260]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <HAL_RCC_OscConfig+0x152>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e1c7      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169e:	4b3b      	ldr	r3, [pc, #236]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4937      	ldr	r1, [pc, #220]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	e03a      	b.n	800172a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d020      	beq.n	80016fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016bc:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_RCC_OscConfig+0x244>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c2:	f7ff fc75 	bl	8000fb0 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff fc71 	bl	8000fb0 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e1a8      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4925      	ldr	r1, [pc, #148]	; (800178c <HAL_RCC_OscConfig+0x240>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_RCC_OscConfig+0x244>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fc54 	bl	8000fb0 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fc50 	bl	8000fb0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e187      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d036      	beq.n	80017a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d016      	beq.n	800176c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_RCC_OscConfig+0x248>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff fc34 	bl	8000fb0 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff fc30 	bl	8000fb0 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e167      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_OscConfig+0x240>)
 8001760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x200>
 800176a:	e01b      	b.n	80017a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_RCC_OscConfig+0x248>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7ff fc1d 	bl	8000fb0 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	e00e      	b.n	8001798 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177a:	f7ff fc19 	bl	8000fb0 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d907      	bls.n	8001798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e150      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
 800178c:	40023800 	.word	0x40023800
 8001790:	42470000 	.word	0x42470000
 8001794:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	4b88      	ldr	r3, [pc, #544]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800179a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ea      	bne.n	800177a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 8097 	beq.w	80018e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b6:	4b81      	ldr	r3, [pc, #516]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10f      	bne.n	80017e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b7d      	ldr	r3, [pc, #500]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a7c      	ldr	r2, [pc, #496]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b7a      	ldr	r3, [pc, #488]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017de:	2301      	movs	r3, #1
 80017e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e2:	4b77      	ldr	r3, [pc, #476]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d118      	bne.n	8001820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ee:	4b74      	ldr	r3, [pc, #464]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a73      	ldr	r2, [pc, #460]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fbd9 	bl	8000fb0 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001802:	f7ff fbd5 	bl	8000fb0 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e10c      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001814:	4b6a      	ldr	r3, [pc, #424]	; (80019c0 <HAL_RCC_OscConfig+0x474>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x2ea>
 8001828:	4b64      	ldr	r3, [pc, #400]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	4a63      	ldr	r2, [pc, #396]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6713      	str	r3, [r2, #112]	; 0x70
 8001834:	e01c      	b.n	8001870 <HAL_RCC_OscConfig+0x324>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x30c>
 800183e:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	4a5e      	ldr	r2, [pc, #376]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6713      	str	r3, [r2, #112]	; 0x70
 800184a:	4b5c      	ldr	r3, [pc, #368]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a5b      	ldr	r2, [pc, #364]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0x324>
 8001858:	4b58      	ldr	r3, [pc, #352]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	4a57      	ldr	r2, [pc, #348]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	6713      	str	r3, [r2, #112]	; 0x70
 8001864:	4b55      	ldr	r3, [pc, #340]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001868:	4a54      	ldr	r2, [pc, #336]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 800186a:	f023 0304 	bic.w	r3, r3, #4
 800186e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d015      	beq.n	80018a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fb9a 	bl	8000fb0 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff fb96 	bl	8000fb0 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e0cb      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001896:	4b49      	ldr	r3, [pc, #292]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0ee      	beq.n	8001880 <HAL_RCC_OscConfig+0x334>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a4:	f7ff fb84 	bl	8000fb0 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ac:	f7ff fb80 	bl	8000fb0 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e0b5      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c2:	4b3e      	ldr	r3, [pc, #248]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1ee      	bne.n	80018ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d105      	bne.n	80018e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d4:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	4a38      	ldr	r2, [pc, #224]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80a1 	beq.w	8001a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ea:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d05c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d141      	bne.n	8001982 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b31      	ldr	r3, [pc, #196]	; (80019c4 <HAL_RCC_OscConfig+0x478>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fb54 	bl	8000fb0 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fb50 	bl	8000fb0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e087      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69da      	ldr	r2, [r3, #28]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	019b      	lsls	r3, r3, #6
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	3b01      	subs	r3, #1
 8001944:	041b      	lsls	r3, r3, #16
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	491b      	ldr	r1, [pc, #108]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_RCC_OscConfig+0x478>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff fb29 	bl	8000fb0 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff fb25 	bl	8000fb0 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e05c      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x416>
 8001980:	e054      	b.n	8001a2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_RCC_OscConfig+0x478>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff fb12 	bl	8000fb0 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff fb0e 	bl	8000fb0 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e045      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_OscConfig+0x470>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x444>
 80019ae:	e03d      	b.n	8001a2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e038      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40007000 	.word	0x40007000
 80019c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x4ec>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d028      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d121      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d11a      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019f8:	4013      	ands	r3, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d111      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	085b      	lsrs	r3, r3, #1
 8001a10:	3b01      	subs	r3, #1
 8001a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0cc      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d90c      	bls.n	8001a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b65      	ldr	r3, [pc, #404]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b63      	ldr	r3, [pc, #396]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0b8      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d020      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	494d      	ldr	r1, [pc, #308]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d044      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d119      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e07f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e06f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e067      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f023 0203 	bic.w	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4934      	ldr	r1, [pc, #208]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff fa40 	bl	8000fb0 <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b34:	f7ff fa3c 	bl	8000fb0 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e04f      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 020c 	and.w	r2, r3, #12
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1eb      	bne.n	8001b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d20c      	bcs.n	8001b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e032      	b.n	8001bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4916      	ldr	r1, [pc, #88]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc2:	f000 f821 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	490a      	ldr	r1, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	5ccb      	ldrb	r3, [r1, r3]
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f8d6 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023c00 	.word	0x40023c00
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	08006348 	.word	0x08006348
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000004 	.word	0x20000004

08001c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c0c:	b094      	sub	sp, #80	; 0x50
 8001c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	647b      	str	r3, [r7, #68]	; 0x44
 8001c14:	2300      	movs	r3, #0
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c18:	2300      	movs	r3, #0
 8001c1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c20:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d00d      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x40>
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	f200 80e1 	bhi.w	8001df4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x34>
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c3a:	e0db      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c3c:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c3e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c40:	e0db      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c42:	4b73      	ldr	r3, [pc, #460]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c46:	e0d8      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c48:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c50:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c52:	4b6d      	ldr	r3, [pc, #436]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d063      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5e:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	099b      	lsrs	r3, r3, #6
 8001c64:	2200      	movs	r2, #0
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
 8001c72:	2300      	movs	r3, #0
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
 8001c76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	462b      	mov	r3, r5
 8001c7e:	f04f 0000 	mov.w	r0, #0
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	0159      	lsls	r1, r3, #5
 8001c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c8c:	0150      	lsls	r0, r2, #5
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4621      	mov	r1, r4
 8001c94:	1a51      	subs	r1, r2, r1
 8001c96:	6139      	str	r1, [r7, #16]
 8001c98:	4629      	mov	r1, r5
 8001c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cac:	4659      	mov	r1, fp
 8001cae:	018b      	lsls	r3, r1, #6
 8001cb0:	4651      	mov	r1, sl
 8001cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cb6:	4651      	mov	r1, sl
 8001cb8:	018a      	lsls	r2, r1, #6
 8001cba:	4651      	mov	r1, sl
 8001cbc:	ebb2 0801 	subs.w	r8, r2, r1
 8001cc0:	4659      	mov	r1, fp
 8001cc2:	eb63 0901 	sbc.w	r9, r3, r1
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cda:	4690      	mov	r8, r2
 8001cdc:	4699      	mov	r9, r3
 8001cde:	4623      	mov	r3, r4
 8001ce0:	eb18 0303 	adds.w	r3, r8, r3
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	462b      	mov	r3, r5
 8001ce8:	eb49 0303 	adc.w	r3, r9, r3
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	024b      	lsls	r3, r1, #9
 8001cfe:	4621      	mov	r1, r4
 8001d00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d04:	4621      	mov	r1, r4
 8001d06:	024a      	lsls	r2, r1, #9
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0e:	2200      	movs	r2, #0
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d18:	f7fe fab4 	bl	8000284 <__aeabi_uldivmod>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4613      	mov	r3, r2
 8001d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d24:	e058      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d26:	4b38      	ldr	r3, [pc, #224]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4611      	mov	r1, r2
 8001d32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d40:	4642      	mov	r2, r8
 8001d42:	464b      	mov	r3, r9
 8001d44:	f04f 0000 	mov.w	r0, #0
 8001d48:	f04f 0100 	mov.w	r1, #0
 8001d4c:	0159      	lsls	r1, r3, #5
 8001d4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d52:	0150      	lsls	r0, r2, #5
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4641      	mov	r1, r8
 8001d5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d5e:	4649      	mov	r1, r9
 8001d60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d78:	ebb2 040a 	subs.w	r4, r2, sl
 8001d7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	00eb      	lsls	r3, r5, #3
 8001d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d8e:	00e2      	lsls	r2, r4, #3
 8001d90:	4614      	mov	r4, r2
 8001d92:	461d      	mov	r5, r3
 8001d94:	4643      	mov	r3, r8
 8001d96:	18e3      	adds	r3, r4, r3
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	464b      	mov	r3, r9
 8001d9c:	eb45 0303 	adc.w	r3, r5, r3
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dae:	4629      	mov	r1, r5
 8001db0:	028b      	lsls	r3, r1, #10
 8001db2:	4621      	mov	r1, r4
 8001db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001db8:	4621      	mov	r1, r4
 8001dba:	028a      	lsls	r2, r1, #10
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	61fa      	str	r2, [r7, #28]
 8001dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dcc:	f7fe fa5a 	bl	8000284 <__aeabi_uldivmod>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	3301      	adds	r3, #1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001de8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3750      	adds	r7, #80	; 0x50
 8001e00:	46bd      	mov	sp, r7
 8001e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	00f42400 	.word	0x00f42400
 8001e10:	007a1200 	.word	0x007a1200

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08006358 	.word	0x08006358

08001e54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	220f      	movs	r2, #15
 8001e62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0203 	and.w	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_RCC_GetClockConfig+0x60>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 020f 	and.w	r2, r3, #15
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	601a      	str	r2, [r3, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e041      	b.n	8001f4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f839 	bl	8001f56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	f000 f9c0 	bl	800227c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d001      	beq.n	8001f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e04e      	b.n	8002022 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a23      	ldr	r2, [pc, #140]	; (8002030 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d022      	beq.n	8001fec <HAL_TIM_Base_Start_IT+0x80>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fae:	d01d      	beq.n	8001fec <HAL_TIM_Base_Start_IT+0x80>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d018      	beq.n	8001fec <HAL_TIM_Base_Start_IT+0x80>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	; (8002038 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <HAL_TIM_Base_Start_IT+0x80>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1c      	ldr	r2, [pc, #112]	; (800203c <HAL_TIM_Base_Start_IT+0xd0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00e      	beq.n	8001fec <HAL_TIM_Base_Start_IT+0x80>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d009      	beq.n	8001fec <HAL_TIM_Base_Start_IT+0x80>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d004      	beq.n	8001fec <HAL_TIM_Base_Start_IT+0x80>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a18      	ldr	r2, [pc, #96]	; (8002048 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d111      	bne.n	8002010 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b06      	cmp	r3, #6
 8001ffc:	d010      	beq.n	8002020 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200e:	e007      	b.n	8002020 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40010000 	.word	0x40010000
 8002034:	40000400 	.word	0x40000400
 8002038:	40000800 	.word	0x40000800
 800203c:	40000c00 	.word	0x40000c00
 8002040:	40010400 	.word	0x40010400
 8002044:	40014000 	.word	0x40014000
 8002048:	40001800 	.word	0x40001800

0800204c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d020      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01b      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0202 	mvn.w	r2, #2
 8002080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f8d2 	bl	8002240 <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8c4 	bl	800222c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f8d5 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d020      	beq.n	80020fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01b      	beq.n	80020fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0204 	mvn.w	r2, #4
 80020cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2202      	movs	r2, #2
 80020d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f8ac 	bl	8002240 <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f89e 	bl	800222c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f8af 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d020      	beq.n	8002148 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01b      	beq.n	8002148 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0208 	mvn.w	r2, #8
 8002118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2204      	movs	r2, #4
 800211e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f886 	bl	8002240 <HAL_TIM_IC_CaptureCallback>
 8002134:	e005      	b.n	8002142 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f878 	bl	800222c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f889 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d020      	beq.n	8002194 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01b      	beq.n	8002194 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0210 	mvn.w	r2, #16
 8002164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2208      	movs	r2, #8
 800216a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f860 	bl	8002240 <HAL_TIM_IC_CaptureCallback>
 8002180:	e005      	b.n	800218e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f852 	bl	800222c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f863 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00c      	beq.n	80021b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0201 	mvn.w	r2, #1
 80021b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7fe fdae 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00c      	beq.n	80021dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f906 	bl	80023e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00c      	beq.n	8002200 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f834 	bl	8002268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00c      	beq.n	8002224 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b00      	cmp	r3, #0
 8002212:	d007      	beq.n	8002224 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0220 	mvn.w	r2, #32
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f8d8 	bl	80023d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a46      	ldr	r2, [pc, #280]	; (80023a8 <TIM_Base_SetConfig+0x12c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d013      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229a:	d00f      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a43      	ldr	r2, [pc, #268]	; (80023ac <TIM_Base_SetConfig+0x130>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00b      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a42      	ldr	r2, [pc, #264]	; (80023b0 <TIM_Base_SetConfig+0x134>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d007      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a41      	ldr	r2, [pc, #260]	; (80023b4 <TIM_Base_SetConfig+0x138>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d003      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a40      	ldr	r2, [pc, #256]	; (80023b8 <TIM_Base_SetConfig+0x13c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d108      	bne.n	80022ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a35      	ldr	r2, [pc, #212]	; (80023a8 <TIM_Base_SetConfig+0x12c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d02b      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022dc:	d027      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a32      	ldr	r2, [pc, #200]	; (80023ac <TIM_Base_SetConfig+0x130>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d023      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a31      	ldr	r2, [pc, #196]	; (80023b0 <TIM_Base_SetConfig+0x134>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01f      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a30      	ldr	r2, [pc, #192]	; (80023b4 <TIM_Base_SetConfig+0x138>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01b      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a2f      	ldr	r2, [pc, #188]	; (80023b8 <TIM_Base_SetConfig+0x13c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d017      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a2e      	ldr	r2, [pc, #184]	; (80023bc <TIM_Base_SetConfig+0x140>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a2d      	ldr	r2, [pc, #180]	; (80023c0 <TIM_Base_SetConfig+0x144>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00f      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a2c      	ldr	r2, [pc, #176]	; (80023c4 <TIM_Base_SetConfig+0x148>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00b      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a2b      	ldr	r2, [pc, #172]	; (80023c8 <TIM_Base_SetConfig+0x14c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d007      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a2a      	ldr	r2, [pc, #168]	; (80023cc <TIM_Base_SetConfig+0x150>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d003      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a29      	ldr	r2, [pc, #164]	; (80023d0 <TIM_Base_SetConfig+0x154>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d108      	bne.n	8002340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <TIM_Base_SetConfig+0x12c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d003      	beq.n	8002374 <TIM_Base_SetConfig+0xf8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <TIM_Base_SetConfig+0x13c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d103      	bne.n	800237c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d105      	bne.n	800239a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f023 0201 	bic.w	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	611a      	str	r2, [r3, #16]
  }
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40000400 	.word	0x40000400
 80023b0:	40000800 	.word	0x40000800
 80023b4:	40000c00 	.word	0x40000c00
 80023b8:	40010400 	.word	0x40010400
 80023bc:	40014000 	.word	0x40014000
 80023c0:	40014400 	.word	0x40014400
 80023c4:	40014800 	.word	0x40014800
 80023c8:	40001800 	.word	0x40001800
 80023cc:	40001c00 	.word	0x40001c00
 80023d0:	40002000 	.word	0x40002000

080023d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f103 0208 	add.w	r2, r3, #8
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f103 0208 	add.w	r2, r3, #8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f103 0208 	add.w	r2, r3, #8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d103      	bne.n	8002476 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e00c      	b.n	8002490 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3308      	adds	r3, #8
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	e002      	b.n	8002484 <vListInsert+0x2e>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	429a      	cmp	r2, r3
 800248e:	d2f6      	bcs.n	800247e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	601a      	str	r2, [r3, #0]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6892      	ldr	r2, [r2, #8]
 80024de:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6852      	ldr	r2, [r2, #4]
 80024e8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d103      	bne.n	80024fc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	1e5a      	subs	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	; 0x30
 8002520:	af04      	add	r7, sp, #16
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4618      	mov	r0, r3
 8002532:	f001 f91b 	bl	800376c <pvPortMalloc>
 8002536:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d013      	beq.n	8002566 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800253e:	2058      	movs	r0, #88	; 0x58
 8002540:	f001 f914 	bl	800376c <pvPortMalloc>
 8002544:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800254c:	2258      	movs	r2, #88	; 0x58
 800254e:	2100      	movs	r1, #0
 8002550:	69f8      	ldr	r0, [r7, #28]
 8002552:	f003 fe29 	bl	80061a8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
 800255c:	e005      	b.n	800256a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f001 f9be 	bl	80038e0 <vPortFree>
 8002564:	e001      	b.n	800256a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d013      	beq.n	8002598 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002570:	88fa      	ldrh	r2, [r7, #6]
 8002572:	2300      	movs	r3, #0
 8002574:	9303      	str	r3, [sp, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	9302      	str	r3, [sp, #8]
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f80e 	bl	80025a8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800258c:	69f8      	ldr	r0, [r7, #28]
 800258e:	f000 f899 	bl	80026c4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002592:	2301      	movs	r3, #1
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	e002      	b.n	800259e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
 800259c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800259e:	69bb      	ldr	r3, [r7, #24]
    }
 80025a0:	4618      	mov	r0, r3
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	461a      	mov	r2, r3
 80025c0:	21a5      	movs	r1, #165	; 0xa5
 80025c2:	f003 fdf1 	bl	80061a8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025d0:	3b01      	subs	r3, #1
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f023 0307 	bic.w	r3, r3, #7
 80025de:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <prvInitialiseNewTask+0x58>
        __asm volatile
 80025ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ee:	f383 8811 	msr	BASEPRI, r3
 80025f2:	f3bf 8f6f 	isb	sy
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	617b      	str	r3, [r7, #20]
    }
 80025fc:	bf00      	nop
 80025fe:	e7fe      	b.n	80025fe <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d01e      	beq.n	8002644 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	e012      	b.n	8002632 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	4413      	add	r3, r2
 8002612:	7819      	ldrb	r1, [r3, #0]
 8002614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	4413      	add	r3, r2
 800261a:	3334      	adds	r3, #52	; 0x34
 800261c:	460a      	mov	r2, r1
 800261e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	4413      	add	r3, r2
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	3301      	adds	r3, #1
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	2b09      	cmp	r3, #9
 8002636:	d9e9      	bls.n	800260c <prvInitialiseNewTask+0x64>
 8002638:	e000      	b.n	800263c <prvInitialiseNewTask+0x94>
            {
                break;
 800263a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002646:	2b04      	cmp	r3, #4
 8002648:	d90a      	bls.n	8002660 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	613b      	str	r3, [r7, #16]
    }
 800265c:	bf00      	nop
 800265e:	e7fe      	b.n	800265e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	2b04      	cmp	r3, #4
 8002664:	d901      	bls.n	800266a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002666:	2304      	movs	r3, #4
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002674:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002678:	3304      	adds	r3, #4
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fede 	bl	800243c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	3318      	adds	r3, #24
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fed9 	bl	800243c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	f1c3 0205 	rsb	r2, r3, #5
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800269e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	69b8      	ldr	r0, [r7, #24]
 80026a6:	f000 fd85 	bl	80031b4 <pxPortInitialiseStack>
 80026aa:	4602      	mov	r2, r0
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026bc:	bf00      	nop
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80026c4:	b5b0      	push	{r4, r5, r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80026cc:	f000 ff22 	bl	8003514 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80026d0:	4b4f      	ldr	r3, [pc, #316]	; (8002810 <prvAddNewTaskToReadyList+0x14c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	4a4e      	ldr	r2, [pc, #312]	; (8002810 <prvAddNewTaskToReadyList+0x14c>)
 80026d8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80026da:	4b4e      	ldr	r3, [pc, #312]	; (8002814 <prvAddNewTaskToReadyList+0x150>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80026e2:	4a4c      	ldr	r2, [pc, #304]	; (8002814 <prvAddNewTaskToReadyList+0x150>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026e8:	4b49      	ldr	r3, [pc, #292]	; (8002810 <prvAddNewTaskToReadyList+0x14c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d110      	bne.n	8002712 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80026f0:	f000 fc46 	bl	8002f80 <prvInitialiseTaskLists>
 80026f4:	e00d      	b.n	8002712 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80026f6:	4b48      	ldr	r3, [pc, #288]	; (8002818 <prvAddNewTaskToReadyList+0x154>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026fe:	4b45      	ldr	r3, [pc, #276]	; (8002814 <prvAddNewTaskToReadyList+0x150>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	429a      	cmp	r2, r3
 800270a:	d802      	bhi.n	8002712 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800270c:	4a41      	ldr	r2, [pc, #260]	; (8002814 <prvAddNewTaskToReadyList+0x150>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002712:	4b42      	ldr	r3, [pc, #264]	; (800281c <prvAddNewTaskToReadyList+0x158>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	4a40      	ldr	r2, [pc, #256]	; (800281c <prvAddNewTaskToReadyList+0x158>)
 800271a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800271c:	4b3f      	ldr	r3, [pc, #252]	; (800281c <prvAddNewTaskToReadyList+0x158>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <prvAddNewTaskToReadyList+0x94>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	f003 fae1 	bl	8005cf4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	461d      	mov	r5, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461c      	mov	r4, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	1ae3      	subs	r3, r4, r3
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	462b      	mov	r3, r5
 8002754:	f001 fa86 	bl	8003c64 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 fb4e 	bl	8005dfc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	2201      	movs	r2, #1
 8002766:	409a      	lsls	r2, r3
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <prvAddNewTaskToReadyList+0x15c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4313      	orrs	r3, r2
 800276e:	4a2c      	ldr	r2, [pc, #176]	; (8002820 <prvAddNewTaskToReadyList+0x15c>)
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002776:	492b      	ldr	r1, [pc, #172]	; (8002824 <prvAddNewTaskToReadyList+0x160>)
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3304      	adds	r3, #4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	3204      	adds	r2, #4
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	1d1a      	adds	r2, r3, #4
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <prvAddNewTaskToReadyList+0x160>)
 80027b6:	441a      	add	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	615a      	str	r2, [r3, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	4918      	ldr	r1, [pc, #96]	; (8002824 <prvAddNewTaskToReadyList+0x160>)
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	1c59      	adds	r1, r3, #1
 80027d0:	4814      	ldr	r0, [pc, #80]	; (8002824 <prvAddNewTaskToReadyList+0x160>)
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4403      	add	r3, r0
 80027dc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80027de:	f000 fec9 	bl	8003574 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <prvAddNewTaskToReadyList+0x154>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00e      	beq.n	8002808 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <prvAddNewTaskToReadyList+0x150>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <prvAddNewTaskToReadyList+0x164>)
 80027fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bdb0      	pop	{r4, r5, r7, pc}
 8002810:	2000015c 	.word	0x2000015c
 8002814:	20000084 	.word	0x20000084
 8002818:	20000168 	.word	0x20000168
 800281c:	20000178 	.word	0x20000178
 8002820:	20000164 	.word	0x20000164
 8002824:	20000088 	.word	0x20000088
 8002828:	e000ed04 	.word	0xe000ed04

0800282c <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <xTaskDelayUntil+0x2a>
        __asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	617b      	str	r3, [r7, #20]
    }
 8002852:	bf00      	nop
 8002854:	e7fe      	b.n	8002854 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <xTaskDelayUntil+0x46>
        __asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	613b      	str	r3, [r7, #16]
    }
 800286e:	bf00      	nop
 8002870:	e7fe      	b.n	8002870 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8002872:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <xTaskDelayUntil+0xf8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <xTaskDelayUntil+0x64>
        __asm volatile
 800287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287e:	f383 8811 	msr	BASEPRI, r3
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	60fb      	str	r3, [r7, #12]
    }
 800288c:	bf00      	nop
 800288e:	e7fe      	b.n	800288e <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002890:	f000 f8aa 	bl	80029e8 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <xTaskDelayUntil+0xfc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	4413      	add	r3, r2
 80028a2:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a3a      	ldr	r2, [r7, #32]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d20b      	bcs.n	80028c6 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d211      	bcs.n	80028dc <xTaskDelayUntil+0xb0>
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d90d      	bls.n	80028dc <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	e00a      	b.n	80028dc <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d303      	bcc.n	80028d8 <xTaskDelayUntil+0xac>
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d901      	bls.n	80028dc <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80028d8:	2301      	movs	r3, #1
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d009      	beq.n	80028fc <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80028e8:	2024      	movs	r0, #36	; 0x24
 80028ea:	f002 fdef 	bl	80054cc <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fbdc 	bl	80030b4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80028fc:	f000 f882 	bl	8002a04 <xTaskResumeAll>
 8002900:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <xTaskDelayUntil+0x100>)
 800290a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800291a:	4618      	mov	r0, r3
 800291c:	3728      	adds	r7, #40	; 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000184 	.word	0x20000184
 8002928:	20000160 	.word	0x20000160
 800292c:	e000ed04 	.word	0xe000ed04

08002930 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <vTaskStartScheduler+0x98>)
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2300      	movs	r3, #0
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2300      	movs	r3, #0
 8002940:	2282      	movs	r2, #130	; 0x82
 8002942:	4922      	ldr	r1, [pc, #136]	; (80029cc <vTaskStartScheduler+0x9c>)
 8002944:	4822      	ldr	r0, [pc, #136]	; (80029d0 <vTaskStartScheduler+0xa0>)
 8002946:	f7ff fde9 	bl	800251c <xTaskCreate>
 800294a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d124      	bne.n	800299c <vTaskStartScheduler+0x6c>
        __asm volatile
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	60bb      	str	r3, [r7, #8]
    }
 8002964:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <vTaskStartScheduler+0xa4>)
 8002968:	f04f 32ff 	mov.w	r2, #4294967295
 800296c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <vTaskStartScheduler+0xa8>)
 8002970:	2201      	movs	r2, #1
 8002972:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <vTaskStartScheduler+0xac>)
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <vTaskStartScheduler+0xb0>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <vTaskStartScheduler+0x98>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d102      	bne.n	800298c <vTaskStartScheduler+0x5c>
 8002986:	f003 f999 	bl	8005cbc <SEGGER_SYSVIEW_OnIdle>
 800298a:	e004      	b.n	8002996 <vTaskStartScheduler+0x66>
 800298c:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <vTaskStartScheduler+0xb0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f003 f9f1 	bl	8005d78 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002996:	f000 fc9d 	bl	80032d4 <xPortStartScheduler>
 800299a:	e00e      	b.n	80029ba <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a2:	d10a      	bne.n	80029ba <vTaskStartScheduler+0x8a>
        __asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	607b      	str	r3, [r7, #4]
    }
 80029b6:	bf00      	nop
 80029b8:	e7fe      	b.n	80029b8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <vTaskStartScheduler+0xb4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000180 	.word	0x20000180
 80029cc:	0800627c 	.word	0x0800627c
 80029d0:	08002f51 	.word	0x08002f51
 80029d4:	2000017c 	.word	0x2000017c
 80029d8:	20000168 	.word	0x20000168
 80029dc:	20000160 	.word	0x20000160
 80029e0:	20000084 	.word	0x20000084
 80029e4:	2000000c 	.word	0x2000000c

080029e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80029ec:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <vTaskSuspendAll+0x18>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	4a03      	ldr	r2, [pc, #12]	; (8002a00 <vTaskSuspendAll+0x18>)
 80029f4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80029f6:	bf00      	nop
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	20000184 	.word	0x20000184

08002a04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a12:	4b73      	ldr	r3, [pc, #460]	; (8002be0 <xTaskResumeAll+0x1dc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10a      	bne.n	8002a30 <xTaskResumeAll+0x2c>
        __asm volatile
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	607b      	str	r3, [r7, #4]
    }
 8002a2c:	bf00      	nop
 8002a2e:	e7fe      	b.n	8002a2e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a30:	f000 fd70 	bl	8003514 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a34:	4b6a      	ldr	r3, [pc, #424]	; (8002be0 <xTaskResumeAll+0x1dc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	4a69      	ldr	r2, [pc, #420]	; (8002be0 <xTaskResumeAll+0x1dc>)
 8002a3c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a3e:	4b68      	ldr	r3, [pc, #416]	; (8002be0 <xTaskResumeAll+0x1dc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f040 80c4 	bne.w	8002bd0 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a48:	4b66      	ldr	r3, [pc, #408]	; (8002be4 <xTaskResumeAll+0x1e0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80bf 	beq.w	8002bd0 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a52:	e08e      	b.n	8002b72 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a54:	4b64      	ldr	r3, [pc, #400]	; (8002be8 <xTaskResumeAll+0x1e4>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	6a12      	ldr	r2, [r2, #32]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	69d2      	ldr	r2, [r2, #28]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3318      	adds	r3, #24
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d103      	bne.n	8002a8a <xTaskResumeAll+0x86>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	6a1a      	ldr	r2, [r3, #32]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	1e5a      	subs	r2, r3, #1
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	68d2      	ldr	r2, [r2, #12]
 8002aa8:	609a      	str	r2, [r3, #8]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	6892      	ldr	r2, [r2, #8]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3304      	adds	r3, #4
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d103      	bne.n	8002ac8 <xTaskResumeAll+0xc4>
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2200      	movs	r2, #0
 8002acc:	615a      	str	r2, [r3, #20]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	1e5a      	subs	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 f98e 	bl	8005dfc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	4b40      	ldr	r3, [pc, #256]	; (8002bec <xTaskResumeAll+0x1e8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	4a3f      	ldr	r2, [pc, #252]	; (8002bec <xTaskResumeAll+0x1e8>)
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af6:	493e      	ldr	r1, [pc, #248]	; (8002bf0 <xTaskResumeAll+0x1ec>)
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	3304      	adds	r3, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	3204      	adds	r2, #4
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	1d1a      	adds	r2, r3, #4
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4a2e      	ldr	r2, [pc, #184]	; (8002bf0 <xTaskResumeAll+0x1ec>)
 8002b36:	441a      	add	r2, r3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	615a      	str	r2, [r3, #20]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b40:	492b      	ldr	r1, [pc, #172]	; (8002bf0 <xTaskResumeAll+0x1ec>)
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	1c59      	adds	r1, r3, #1
 8002b50:	4827      	ldr	r0, [pc, #156]	; (8002bf0 <xTaskResumeAll+0x1ec>)
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4403      	add	r3, r0
 8002b5c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <xTaskResumeAll+0x1f0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d302      	bcc.n	8002b72 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <xTaskResumeAll+0x1f4>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <xTaskResumeAll+0x1e4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f47f af6c 	bne.w	8002a54 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002b82:	f000 fa7b 	bl	800307c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <xTaskResumeAll+0x1f8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d010      	beq.n	8002bb4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b92:	f000 f859 	bl	8002c48 <xTaskIncrementTick>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002b9c:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <xTaskResumeAll+0x1f4>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f1      	bne.n	8002b92 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <xTaskResumeAll+0x1f8>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002bb4:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <xTaskResumeAll+0x1f4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	; (8002c00 <xTaskResumeAll+0x1fc>)
 8002bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002bd0:	f000 fcd0 	bl	8003574 <vPortExitCritical>

    return xAlreadyYielded;
 8002bd4:	69bb      	ldr	r3, [r7, #24]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3720      	adds	r7, #32
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000184 	.word	0x20000184
 8002be4:	2000015c 	.word	0x2000015c
 8002be8:	2000011c 	.word	0x2000011c
 8002bec:	20000164 	.word	0x20000164
 8002bf0:	20000088 	.word	0x20000088
 8002bf4:	20000084 	.word	0x20000084
 8002bf8:	20000170 	.word	0x20000170
 8002bfc:	2000016c 	.word	0x2000016c
 8002c00:	e000ed04 	.word	0xe000ed04

08002c04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <xTaskGetTickCount+0x1c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002c10:	687b      	ldr	r3, [r7, #4]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000160 	.word	0x20000160

08002c24 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c2a:	f000 fd5f 	bl	80036ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <xTaskGetTickCountFromISR+0x20>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002c38:	683b      	ldr	r3, [r7, #0]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000160 	.word	0x20000160

08002c48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c52:	4b7f      	ldr	r3, [pc, #508]	; (8002e50 <xTaskIncrementTick+0x208>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 80f0 	bne.w	8002e3c <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c5c:	4b7d      	ldr	r3, [pc, #500]	; (8002e54 <xTaskIncrementTick+0x20c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c64:	4a7b      	ldr	r2, [pc, #492]	; (8002e54 <xTaskIncrementTick+0x20c>)
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d120      	bne.n	8002cb2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002c70:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <xTaskIncrementTick+0x210>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <xTaskIncrementTick+0x48>
        __asm volatile
 8002c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	607b      	str	r3, [r7, #4]
    }
 8002c8c:	bf00      	nop
 8002c8e:	e7fe      	b.n	8002c8e <xTaskIncrementTick+0x46>
 8002c90:	4b71      	ldr	r3, [pc, #452]	; (8002e58 <xTaskIncrementTick+0x210>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	4b71      	ldr	r3, [pc, #452]	; (8002e5c <xTaskIncrementTick+0x214>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6f      	ldr	r2, [pc, #444]	; (8002e58 <xTaskIncrementTick+0x210>)
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4a6f      	ldr	r2, [pc, #444]	; (8002e5c <xTaskIncrementTick+0x214>)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b6e      	ldr	r3, [pc, #440]	; (8002e60 <xTaskIncrementTick+0x218>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	4a6d      	ldr	r2, [pc, #436]	; (8002e60 <xTaskIncrementTick+0x218>)
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	f000 f9e5 	bl	800307c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002cb2:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <xTaskIncrementTick+0x21c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a3a      	ldr	r2, [r7, #32]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	f0c0 80aa 	bcc.w	8002e12 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cbe:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <xTaskIncrementTick+0x210>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d104      	bne.n	8002cd2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cc8:	4b66      	ldr	r3, [pc, #408]	; (8002e64 <xTaskIncrementTick+0x21c>)
 8002cca:	f04f 32ff 	mov.w	r2, #4294967295
 8002cce:	601a      	str	r2, [r3, #0]
                    break;
 8002cd0:	e09f      	b.n	8002e12 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cd2:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <xTaskIncrementTick+0x210>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002ce2:	6a3a      	ldr	r2, [r7, #32]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d203      	bcs.n	8002cf2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002cea:	4a5e      	ldr	r2, [pc, #376]	; (8002e64 <xTaskIncrementTick+0x21c>)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002cf0:	e08f      	b.n	8002e12 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	68d2      	ldr	r2, [r2, #12]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	6892      	ldr	r2, [r2, #8]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	3304      	adds	r3, #4
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d103      	bne.n	8002d20 <xTaskIncrementTick+0xd8>
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2200      	movs	r2, #0
 8002d24:	615a      	str	r2, [r3, #20]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	1e5a      	subs	r2, r3, #1
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01e      	beq.n	8002d76 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	6a12      	ldr	r2, [r2, #32]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	69d2      	ldr	r2, [r2, #28]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	3318      	adds	r3, #24
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d103      	bne.n	8002d66 <xTaskIncrementTick+0x11e>
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1e5a      	subs	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 f83f 	bl	8005dfc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	2201      	movs	r2, #1
 8002d84:	409a      	lsls	r2, r3
 8002d86:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <xTaskIncrementTick+0x220>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	4a36      	ldr	r2, [pc, #216]	; (8002e68 <xTaskIncrementTick+0x220>)
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d94:	4935      	ldr	r1, [pc, #212]	; (8002e6c <xTaskIncrementTick+0x224>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3304      	adds	r3, #4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	3204      	adds	r2, #4
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	1d1a      	adds	r2, r3, #4
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <xTaskIncrementTick+0x224>)
 8002dd4:	441a      	add	r2, r3
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	615a      	str	r2, [r3, #20]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dde:	4923      	ldr	r1, [pc, #140]	; (8002e6c <xTaskIncrementTick+0x224>)
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	1c59      	adds	r1, r3, #1
 8002dee:	481f      	ldr	r0, [pc, #124]	; (8002e6c <xTaskIncrementTick+0x224>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4403      	add	r3, r0
 8002dfa:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <xTaskIncrementTick+0x228>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	429a      	cmp	r2, r3
 8002e08:	f67f af59 	bls.w	8002cbe <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e10:	e755      	b.n	8002cbe <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e12:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <xTaskIncrementTick+0x228>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e18:	4914      	ldr	r1, [pc, #80]	; (8002e6c <xTaskIncrementTick+0x224>)
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d901      	bls.n	8002e2e <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <xTaskIncrementTick+0x22c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8002e36:	2301      	movs	r3, #1
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3a:	e004      	b.n	8002e46 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <xTaskIncrementTick+0x230>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	4a0d      	ldr	r2, [pc, #52]	; (8002e78 <xTaskIncrementTick+0x230>)
 8002e44:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3728      	adds	r7, #40	; 0x28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20000184 	.word	0x20000184
 8002e54:	20000160 	.word	0x20000160
 8002e58:	20000114 	.word	0x20000114
 8002e5c:	20000118 	.word	0x20000118
 8002e60:	20000174 	.word	0x20000174
 8002e64:	2000017c 	.word	0x2000017c
 8002e68:	20000164 	.word	0x20000164
 8002e6c:	20000088 	.word	0x20000088
 8002e70:	20000084 	.word	0x20000084
 8002e74:	20000170 	.word	0x20000170
 8002e78:	2000016c 	.word	0x2000016c

08002e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <vTaskSwitchContext+0xbc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <vTaskSwitchContext+0xc0>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002e90:	e04d      	b.n	8002f2e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002e92:	4b2a      	ldr	r3, [pc, #168]	; (8002f3c <vTaskSwitchContext+0xc0>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e98:	4b29      	ldr	r3, [pc, #164]	; (8002f40 <vTaskSwitchContext+0xc4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002ea6:	7afb      	ldrb	r3, [r7, #11]
 8002ea8:	f1c3 031f 	rsb	r3, r3, #31
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	4925      	ldr	r1, [pc, #148]	; (8002f44 <vTaskSwitchContext+0xc8>)
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	607b      	str	r3, [r7, #4]
    }
 8002ed4:	bf00      	nop
 8002ed6:	e7fe      	b.n	8002ed6 <vTaskSwitchContext+0x5a>
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4a18      	ldr	r2, [pc, #96]	; (8002f44 <vTaskSwitchContext+0xc8>)
 8002ee4:	4413      	add	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	3308      	adds	r3, #8
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d104      	bne.n	8002f08 <vTaskSwitchContext+0x8c>
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	4a0e      	ldr	r2, [pc, #56]	; (8002f48 <vTaskSwitchContext+0xcc>)
 8002f10:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <vTaskSwitchContext+0xcc>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <vTaskSwitchContext+0xd0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d102      	bne.n	8002f24 <vTaskSwitchContext+0xa8>
 8002f1e:	f002 fecd 	bl	8005cbc <SEGGER_SYSVIEW_OnIdle>
}
 8002f22:	e004      	b.n	8002f2e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002f24:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <vTaskSwitchContext+0xcc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 ff25 	bl	8005d78 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000184 	.word	0x20000184
 8002f3c:	20000170 	.word	0x20000170
 8002f40:	20000164 	.word	0x20000164
 8002f44:	20000088 	.word	0x20000088
 8002f48:	20000084 	.word	0x20000084
 8002f4c:	20000180 	.word	0x20000180

08002f50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002f58:	f000 f852 	bl	8003000 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <prvIdleTask+0x28>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d9f9      	bls.n	8002f58 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <prvIdleTask+0x2c>)
 8002f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002f74:	e7f0      	b.n	8002f58 <prvIdleTask+0x8>
 8002f76:	bf00      	nop
 8002f78:	20000088 	.word	0x20000088
 8002f7c:	e000ed04 	.word	0xe000ed04

08002f80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f86:	2300      	movs	r3, #0
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	e00c      	b.n	8002fa6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <prvInitialiseTaskLists+0x60>)
 8002f98:	4413      	add	r3, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fa2e 	bl	80023fc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d9ef      	bls.n	8002f8c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002fac:	480d      	ldr	r0, [pc, #52]	; (8002fe4 <prvInitialiseTaskLists+0x64>)
 8002fae:	f7ff fa25 	bl	80023fc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002fb2:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <prvInitialiseTaskLists+0x68>)
 8002fb4:	f7ff fa22 	bl	80023fc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002fb8:	480c      	ldr	r0, [pc, #48]	; (8002fec <prvInitialiseTaskLists+0x6c>)
 8002fba:	f7ff fa1f 	bl	80023fc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002fbe:	480c      	ldr	r0, [pc, #48]	; (8002ff0 <prvInitialiseTaskLists+0x70>)
 8002fc0:	f7ff fa1c 	bl	80023fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002fc4:	480b      	ldr	r0, [pc, #44]	; (8002ff4 <prvInitialiseTaskLists+0x74>)
 8002fc6:	f7ff fa19 	bl	80023fc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <prvInitialiseTaskLists+0x78>)
 8002fcc:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <prvInitialiseTaskLists+0x64>)
 8002fce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <prvInitialiseTaskLists+0x7c>)
 8002fd2:	4a05      	ldr	r2, [pc, #20]	; (8002fe8 <prvInitialiseTaskLists+0x68>)
 8002fd4:	601a      	str	r2, [r3, #0]
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000088 	.word	0x20000088
 8002fe4:	200000ec 	.word	0x200000ec
 8002fe8:	20000100 	.word	0x20000100
 8002fec:	2000011c 	.word	0x2000011c
 8002ff0:	20000130 	.word	0x20000130
 8002ff4:	20000148 	.word	0x20000148
 8002ff8:	20000114 	.word	0x20000114
 8002ffc:	20000118 	.word	0x20000118

08003000 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003006:	e019      	b.n	800303c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003008:	f000 fa84 	bl	8003514 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <prvCheckTasksWaitingTermination+0x50>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fa55 	bl	80024c8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <prvCheckTasksWaitingTermination+0x54>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3b01      	subs	r3, #1
 8003024:	4a0b      	ldr	r2, [pc, #44]	; (8003054 <prvCheckTasksWaitingTermination+0x54>)
 8003026:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <prvCheckTasksWaitingTermination+0x58>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3b01      	subs	r3, #1
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <prvCheckTasksWaitingTermination+0x58>)
 8003030:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003032:	f000 fa9f 	bl	8003574 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f810 	bl	800305c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <prvCheckTasksWaitingTermination+0x58>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e1      	bne.n	8003008 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000130 	.word	0x20000130
 8003054:	2000015c 	.word	0x2000015c
 8003058:	20000144 	.word	0x20000144

0800305c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fc39 	bl	80038e0 <vPortFree>
            vPortFree( pxTCB );
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fc36 	bl	80038e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <prvResetNextTaskUnblockTime+0x30>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <prvResetNextTaskUnblockTime+0x34>)
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003092:	e005      	b.n	80030a0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <prvResetNextTaskUnblockTime+0x30>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <prvResetNextTaskUnblockTime+0x34>)
 800309e:	6013      	str	r3, [r2, #0]
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000114 	.word	0x20000114
 80030b0:	2000017c 	.word	0x2000017c

080030b4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80030be:	4b36      	ldr	r3, [pc, #216]	; (8003198 <prvAddCurrentTaskToDelayedList+0xe4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030c4:	4b35      	ldr	r3, [pc, #212]	; (800319c <prvAddCurrentTaskToDelayedList+0xe8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3304      	adds	r3, #4
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f9fc 	bl	80024c8 <uxListRemove>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10b      	bne.n	80030ee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80030d6:	4b31      	ldr	r3, [pc, #196]	; (800319c <prvAddCurrentTaskToDelayedList+0xe8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	2201      	movs	r2, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43da      	mvns	r2, r3
 80030e4:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <prvAddCurrentTaskToDelayedList+0xec>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4013      	ands	r3, r2
 80030ea:	4a2d      	ldr	r2, [pc, #180]	; (80031a0 <prvAddCurrentTaskToDelayedList+0xec>)
 80030ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d124      	bne.n	8003140 <prvAddCurrentTaskToDelayedList+0x8c>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d021      	beq.n	8003140 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030fc:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	4b24      	ldr	r3, [pc, #144]	; (800319c <prvAddCurrentTaskToDelayedList+0xe8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	6892      	ldr	r2, [r2, #8]
 8003112:	60da      	str	r2, [r3, #12]
 8003114:	4b21      	ldr	r3, [pc, #132]	; (800319c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	3204      	adds	r2, #4
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	4b1e      	ldr	r3, [pc, #120]	; (800319c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	1d1a      	adds	r2, r3, #4
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	609a      	str	r2, [r3, #8]
 800312a:	4b1c      	ldr	r3, [pc, #112]	; (800319c <prvAddCurrentTaskToDelayedList+0xe8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003130:	615a      	str	r2, [r3, #20]
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800313e:	e026      	b.n	800318e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003148:	4b14      	ldr	r3, [pc, #80]	; (800319c <prvAddCurrentTaskToDelayedList+0xe8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	d209      	bcs.n	800316c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003158:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b0f      	ldr	r3, [pc, #60]	; (800319c <prvAddCurrentTaskToDelayedList+0xe8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3304      	adds	r3, #4
 8003162:	4619      	mov	r1, r3
 8003164:	4610      	mov	r0, r2
 8003166:	f7ff f976 	bl	8002456 <vListInsert>
}
 800316a:	e010      	b.n	800318e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <prvAddCurrentTaskToDelayedList+0xf8>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3304      	adds	r3, #4
 8003176:	4619      	mov	r1, r3
 8003178:	4610      	mov	r0, r2
 800317a:	f7ff f96c 	bl	8002456 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800317e:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	429a      	cmp	r2, r3
 8003186:	d202      	bcs.n	800318e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003188:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6013      	str	r3, [r2, #0]
}
 800318e:	bf00      	nop
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000160 	.word	0x20000160
 800319c:	20000084 	.word	0x20000084
 80031a0:	20000164 	.word	0x20000164
 80031a4:	20000148 	.word	0x20000148
 80031a8:	20000118 	.word	0x20000118
 80031ac:	20000114 	.word	0x20000114
 80031b0:	2000017c 	.word	0x2000017c

080031b4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3b04      	subs	r3, #4
 80031c4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3b04      	subs	r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f023 0201 	bic.w	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3b04      	subs	r3, #4
 80031e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80031e4:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <pxPortInitialiseStack+0x64>)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3b14      	subs	r3, #20
 80031ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	3b04      	subs	r3, #4
 80031fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f06f 0202 	mvn.w	r2, #2
 8003202:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3b20      	subs	r3, #32
 8003208:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	0800321d 	.word	0x0800321d

0800321c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <prvTaskExitError+0x54>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322e:	d00a      	beq.n	8003246 <prvTaskExitError+0x2a>
        __asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	60fb      	str	r3, [r7, #12]
    }
 8003242:	bf00      	nop
 8003244:	e7fe      	b.n	8003244 <prvTaskExitError+0x28>
        __asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	60bb      	str	r3, [r7, #8]
    }
 8003258:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800325a:	bf00      	nop
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0fc      	beq.n	800325c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003262:	bf00      	nop
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	20000010 	.word	0x20000010
	...

08003280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <pxCurrentTCBConst2>)
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	6808      	ldr	r0, [r1, #0]
 8003286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800328a:	f380 8809 	msr	PSP, r0
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f04f 0000 	mov.w	r0, #0
 8003296:	f380 8811 	msr	BASEPRI, r0
 800329a:	4770      	bx	lr
 800329c:	f3af 8000 	nop.w

080032a0 <pxCurrentTCBConst2>:
 80032a0:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop

080032a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80032a8:	4808      	ldr	r0, [pc, #32]	; (80032cc <prvPortStartFirstTask+0x24>)
 80032aa:	6800      	ldr	r0, [r0, #0]
 80032ac:	6800      	ldr	r0, [r0, #0]
 80032ae:	f380 8808 	msr	MSP, r0
 80032b2:	f04f 0000 	mov.w	r0, #0
 80032b6:	f380 8814 	msr	CONTROL, r0
 80032ba:	b662      	cpsie	i
 80032bc:	b661      	cpsie	f
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	df00      	svc	0
 80032c8:	bf00      	nop
 80032ca:	0000      	.short	0x0000
 80032cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop

080032d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80032da:	4b46      	ldr	r3, [pc, #280]	; (80033f4 <xPortStartScheduler+0x120>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a46      	ldr	r2, [pc, #280]	; (80033f8 <xPortStartScheduler+0x124>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d10a      	bne.n	80032fa <xPortStartScheduler+0x26>
        __asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	613b      	str	r3, [r7, #16]
    }
 80032f6:	bf00      	nop
 80032f8:	e7fe      	b.n	80032f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80032fa:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <xPortStartScheduler+0x120>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a3f      	ldr	r2, [pc, #252]	; (80033fc <xPortStartScheduler+0x128>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d10a      	bne.n	800331a <xPortStartScheduler+0x46>
        __asm volatile
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	60fb      	str	r3, [r7, #12]
    }
 8003316:	bf00      	nop
 8003318:	e7fe      	b.n	8003318 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800331a:	4b39      	ldr	r3, [pc, #228]	; (8003400 <xPortStartScheduler+0x12c>)
 800331c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	22ff      	movs	r2, #255	; 0xff
 800332a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800333c:	b2da      	uxtb	r2, r3
 800333e:	4b31      	ldr	r3, [pc, #196]	; (8003404 <xPortStartScheduler+0x130>)
 8003340:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003342:	4b31      	ldr	r3, [pc, #196]	; (8003408 <xPortStartScheduler+0x134>)
 8003344:	2207      	movs	r2, #7
 8003346:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003348:	e009      	b.n	800335e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800334a:	4b2f      	ldr	r3, [pc, #188]	; (8003408 <xPortStartScheduler+0x134>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3b01      	subs	r3, #1
 8003350:	4a2d      	ldr	r2, [pc, #180]	; (8003408 <xPortStartScheduler+0x134>)
 8003352:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	b2db      	uxtb	r3, r3
 800335c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b80      	cmp	r3, #128	; 0x80
 8003368:	d0ef      	beq.n	800334a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800336a:	4b27      	ldr	r3, [pc, #156]	; (8003408 <xPortStartScheduler+0x134>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f1c3 0307 	rsb	r3, r3, #7
 8003372:	2b04      	cmp	r3, #4
 8003374:	d00a      	beq.n	800338c <xPortStartScheduler+0xb8>
        __asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	60bb      	str	r3, [r7, #8]
    }
 8003388:	bf00      	nop
 800338a:	e7fe      	b.n	800338a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800338c:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <xPortStartScheduler+0x134>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <xPortStartScheduler+0x134>)
 8003394:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003396:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <xPortStartScheduler+0x134>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800339e:	4a1a      	ldr	r2, [pc, #104]	; (8003408 <xPortStartScheduler+0x134>)
 80033a0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80033aa:	4b18      	ldr	r3, [pc, #96]	; (800340c <xPortStartScheduler+0x138>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a17      	ldr	r2, [pc, #92]	; (800340c <xPortStartScheduler+0x138>)
 80033b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <xPortStartScheduler+0x138>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a14      	ldr	r2, [pc, #80]	; (800340c <xPortStartScheduler+0x138>)
 80033bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80033c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80033c2:	f000 f963 	bl	800368c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <xPortStartScheduler+0x13c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80033cc:	f000 f982 	bl	80036d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80033d0:	4b10      	ldr	r3, [pc, #64]	; (8003414 <xPortStartScheduler+0x140>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0f      	ldr	r2, [pc, #60]	; (8003414 <xPortStartScheduler+0x140>)
 80033d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80033da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80033dc:	f7ff ff64 	bl	80032a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80033e0:	f7ff fd4c 	bl	8002e7c <vTaskSwitchContext>
    prvTaskExitError();
 80033e4:	f7ff ff1a 	bl	800321c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000ed00 	.word	0xe000ed00
 80033f8:	410fc271 	.word	0x410fc271
 80033fc:	410fc270 	.word	0x410fc270
 8003400:	e000e400 	.word	0xe000e400
 8003404:	20000188 	.word	0x20000188
 8003408:	2000018c 	.word	0x2000018c
 800340c:	e000ed20 	.word	0xe000ed20
 8003410:	20000010 	.word	0x20000010
 8003414:	e000ef34 	.word	0xe000ef34

08003418 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800341e:	4b37      	ldr	r3, [pc, #220]	; (80034fc <vInitPrioGroupValue+0xe4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a37      	ldr	r2, [pc, #220]	; (8003500 <vInitPrioGroupValue+0xe8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d10a      	bne.n	800343e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	613b      	str	r3, [r7, #16]
    }
 800343a:	bf00      	nop
 800343c:	e7fe      	b.n	800343c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800343e:	4b2f      	ldr	r3, [pc, #188]	; (80034fc <vInitPrioGroupValue+0xe4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a30      	ldr	r2, [pc, #192]	; (8003504 <vInitPrioGroupValue+0xec>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d10a      	bne.n	800345e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	60fb      	str	r3, [r7, #12]
    }
 800345a:	bf00      	nop
 800345c:	e7fe      	b.n	800345c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800345e:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <vInitPrioGroupValue+0xf0>)
 8003460:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	22ff      	movs	r2, #255	; 0xff
 800346e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003480:	b2da      	uxtb	r2, r3
 8003482:	4b22      	ldr	r3, [pc, #136]	; (800350c <vInitPrioGroupValue+0xf4>)
 8003484:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003486:	4b22      	ldr	r3, [pc, #136]	; (8003510 <vInitPrioGroupValue+0xf8>)
 8003488:	2207      	movs	r2, #7
 800348a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800348c:	e009      	b.n	80034a2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800348e:	4b20      	ldr	r3, [pc, #128]	; (8003510 <vInitPrioGroupValue+0xf8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3b01      	subs	r3, #1
 8003494:	4a1e      	ldr	r2, [pc, #120]	; (8003510 <vInitPrioGroupValue+0xf8>)
 8003496:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d0ef      	beq.n	800348e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <vInitPrioGroupValue+0xf8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f1c3 0307 	rsb	r3, r3, #7
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d00a      	beq.n	80034d0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	60bb      	str	r3, [r7, #8]
    }
 80034cc:	bf00      	nop
 80034ce:	e7fe      	b.n	80034ce <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <vInitPrioGroupValue+0xf8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	4a0e      	ldr	r2, [pc, #56]	; (8003510 <vInitPrioGroupValue+0xf8>)
 80034d8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <vInitPrioGroupValue+0xf8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034e2:	4a0b      	ldr	r2, [pc, #44]	; (8003510 <vInitPrioGroupValue+0xf8>)
 80034e4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000ed00 	.word	0xe000ed00
 8003500:	410fc271 	.word	0x410fc271
 8003504:	410fc270 	.word	0x410fc270
 8003508:	e000e400 	.word	0xe000e400
 800350c:	20000188 	.word	0x20000188
 8003510:	2000018c 	.word	0x2000018c

08003514 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
        __asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	607b      	str	r3, [r7, #4]
    }
 800352c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800352e:	4b0f      	ldr	r3, [pc, #60]	; (800356c <vPortEnterCritical+0x58>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3301      	adds	r3, #1
 8003534:	4a0d      	ldr	r2, [pc, #52]	; (800356c <vPortEnterCritical+0x58>)
 8003536:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <vPortEnterCritical+0x58>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d10f      	bne.n	8003560 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <vPortEnterCritical+0x5c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <vPortEnterCritical+0x4c>
        __asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	603b      	str	r3, [r7, #0]
    }
 800355c:	bf00      	nop
 800355e:	e7fe      	b.n	800355e <vPortEnterCritical+0x4a>
    }
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	20000010 	.word	0x20000010
 8003570:	e000ed04 	.word	0xe000ed04

08003574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <vPortExitCritical+0x50>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10a      	bne.n	8003598 <vPortExitCritical+0x24>
        __asm volatile
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	607b      	str	r3, [r7, #4]
    }
 8003594:	bf00      	nop
 8003596:	e7fe      	b.n	8003596 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <vPortExitCritical+0x50>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3b01      	subs	r3, #1
 800359e:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <vPortExitCritical+0x50>)
 80035a0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80035a2:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <vPortExitCritical+0x50>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d105      	bne.n	80035b6 <vPortExitCritical+0x42>
 80035aa:	2300      	movs	r3, #0
 80035ac:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80035b4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20000010 	.word	0x20000010
	...

080035d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80035d0:	f3ef 8009 	mrs	r0, PSP
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <pxCurrentTCBConst>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	f01e 0f10 	tst.w	lr, #16
 80035e0:	bf08      	it	eq
 80035e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80035e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ea:	6010      	str	r0, [r2, #0]
 80035ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80035f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80035f4:	f380 8811 	msr	BASEPRI, r0
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f7ff fc3c 	bl	8002e7c <vTaskSwitchContext>
 8003604:	f04f 0000 	mov.w	r0, #0
 8003608:	f380 8811 	msr	BASEPRI, r0
 800360c:	bc09      	pop	{r0, r3}
 800360e:	6819      	ldr	r1, [r3, #0]
 8003610:	6808      	ldr	r0, [r1, #0]
 8003612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003616:	f01e 0f10 	tst.w	lr, #16
 800361a:	bf08      	it	eq
 800361c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003620:	f380 8809 	msr	PSP, r0
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	f3af 8000 	nop.w

08003630 <pxCurrentTCBConst>:
 8003630:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop

08003638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
        __asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	607b      	str	r3, [r7, #4]
    }
 8003650:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003652:	f002 fab9 	bl	8005bc8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003656:	f7ff faf7 	bl	8002c48 <xTaskIncrementTick>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d006      	beq.n	800366e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003660:	f002 fb10 	bl	8005c84 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <SysTick_Handler+0x50>)
 8003666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e001      	b.n	8003672 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800366e:	f002 faed 	bl	8005c4c <SEGGER_SYSVIEW_RecordExitISR>
 8003672:	2300      	movs	r3, #0
 8003674:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f383 8811 	msr	BASEPRI, r3
    }
 800367c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	e000ed04 	.word	0xe000ed04

0800368c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <vPortSetupTimerInterrupt+0x34>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <vPortSetupTimerInterrupt+0x38>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <vPortSetupTimerInterrupt+0x3c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <vPortSetupTimerInterrupt+0x40>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	099b      	lsrs	r3, r3, #6
 80036a8:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <vPortSetupTimerInterrupt+0x44>)
 80036aa:	3b01      	subs	r3, #1
 80036ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036ae:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <vPortSetupTimerInterrupt+0x34>)
 80036b0:	2207      	movs	r2, #7
 80036b2:	601a      	str	r2, [r3, #0]
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000e010 	.word	0xe000e010
 80036c4:	e000e018 	.word	0xe000e018
 80036c8:	20000000 	.word	0x20000000
 80036cc:	10624dd3 	.word	0x10624dd3
 80036d0:	e000e014 	.word	0xe000e014

080036d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80036d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80036e4 <vPortEnableVFP+0x10>
 80036d8:	6801      	ldr	r1, [r0, #0]
 80036da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80036de:	6001      	str	r1, [r0, #0]
 80036e0:	4770      	bx	lr
 80036e2:	0000      	.short	0x0000
 80036e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop

080036ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80036f2:	f3ef 8305 	mrs	r3, IPSR
 80036f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b0f      	cmp	r3, #15
 80036fc:	d914      	bls.n	8003728 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80036fe:	4a17      	ldr	r2, [pc, #92]	; (800375c <vPortValidateInterruptPriority+0x70>)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <vPortValidateInterruptPriority+0x74>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	7afa      	ldrb	r2, [r7, #11]
 800370e:	429a      	cmp	r2, r3
 8003710:	d20a      	bcs.n	8003728 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	607b      	str	r3, [r7, #4]
    }
 8003724:	bf00      	nop
 8003726:	e7fe      	b.n	8003726 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003728:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <vPortValidateInterruptPriority+0x78>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003730:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <vPortValidateInterruptPriority+0x7c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d90a      	bls.n	800374e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	603b      	str	r3, [r7, #0]
    }
 800374a:	bf00      	nop
 800374c:	e7fe      	b.n	800374c <vPortValidateInterruptPriority+0x60>
    }
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000e3f0 	.word	0xe000e3f0
 8003760:	20000188 	.word	0x20000188
 8003764:	e000ed0c 	.word	0xe000ed0c
 8003768:	2000018c 	.word	0x2000018c

0800376c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08a      	sub	sp, #40	; 0x28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003778:	f7ff f936 	bl	80029e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800377c:	4b53      	ldr	r3, [pc, #332]	; (80038cc <pvPortMalloc+0x160>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003784:	f000 f908 	bl	8003998 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d012      	beq.n	80037b4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800378e:	2208      	movs	r2, #8
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	3308      	adds	r3, #8
 800379a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	43db      	mvns	r3, r3
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d804      	bhi.n	80037b0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	4413      	add	r3, r2
 80037ac:	607b      	str	r3, [r7, #4]
 80037ae:	e001      	b.n	80037b4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	db70      	blt.n	800389c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d06d      	beq.n	800389c <pvPortMalloc+0x130>
 80037c0:	4b43      	ldr	r3, [pc, #268]	; (80038d0 <pvPortMalloc+0x164>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d868      	bhi.n	800389c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80037ca:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <pvPortMalloc+0x168>)
 80037cc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80037ce:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <pvPortMalloc+0x168>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037d4:	e004      	b.n	80037e0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d903      	bls.n	80037f2 <pvPortMalloc+0x86>
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f1      	bne.n	80037d6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <pvPortMalloc+0x160>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d04f      	beq.n	800389c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2208      	movs	r2, #8
 8003802:	4413      	add	r3, r2
 8003804:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	1ad2      	subs	r2, r2, r3
 8003816:	2308      	movs	r3, #8
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	429a      	cmp	r2, r3
 800381c:	d91f      	bls.n	800385e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4413      	add	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <pvPortMalloc+0xda>
        __asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	613b      	str	r3, [r7, #16]
    }
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	1ad2      	subs	r2, r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003858:	6978      	ldr	r0, [r7, #20]
 800385a:	f000 f8f9 	bl	8003a50 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800385e:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <pvPortMalloc+0x164>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <pvPortMalloc+0x164>)
 800386a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800386c:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <pvPortMalloc+0x164>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <pvPortMalloc+0x16c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d203      	bcs.n	8003880 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <pvPortMalloc+0x164>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <pvPortMalloc+0x16c>)
 800387e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <pvPortMalloc+0x170>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	4a10      	ldr	r2, [pc, #64]	; (80038dc <pvPortMalloc+0x170>)
 800389a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800389c:	f7ff f8b2 	bl	8002a04 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <pvPortMalloc+0x154>
        __asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	60fb      	str	r3, [r7, #12]
    }
 80038bc:	bf00      	nop
 80038be:	e7fe      	b.n	80038be <pvPortMalloc+0x152>
    return pvReturn;
 80038c0:	69fb      	ldr	r3, [r7, #28]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3728      	adds	r7, #40	; 0x28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20012d98 	.word	0x20012d98
 80038d0:	20012d9c 	.word	0x20012d9c
 80038d4:	20012d90 	.word	0x20012d90
 80038d8:	20012da0 	.word	0x20012da0
 80038dc:	20012da4 	.word	0x20012da4

080038e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d049      	beq.n	8003986 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80038f2:	2308      	movs	r3, #8
 80038f4:	425b      	negs	r3, r3
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	4413      	add	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	db0a      	blt.n	800391e <vPortFree+0x3e>
        __asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	60fb      	str	r3, [r7, #12]
    }
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <vPortFree+0x5c>
        __asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	60bb      	str	r3, [r7, #8]
    }
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0fdb      	lsrs	r3, r3, #31
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01c      	beq.n	8003986 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d118      	bne.n	8003986 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003960:	f7ff f842 	bl	80029e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <vPortFree+0xb0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4413      	add	r3, r2
 800396e:	4a08      	ldr	r2, [pc, #32]	; (8003990 <vPortFree+0xb0>)
 8003970:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003972:	6938      	ldr	r0, [r7, #16]
 8003974:	f000 f86c 	bl	8003a50 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003978:	4b06      	ldr	r3, [pc, #24]	; (8003994 <vPortFree+0xb4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	4a05      	ldr	r2, [pc, #20]	; (8003994 <vPortFree+0xb4>)
 8003980:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003982:	f7ff f83f 	bl	8002a04 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003986:	bf00      	nop
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20012d9c 	.word	0x20012d9c
 8003994:	20012da8 	.word	0x20012da8

08003998 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800399e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80039a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80039a4:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <prvHeapInit+0xa4>)
 80039a6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00c      	beq.n	80039cc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3307      	adds	r3, #7
 80039b6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0307 	bic.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <prvHeapInit+0xa4>)
 80039c8:	4413      	add	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039d0:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <prvHeapInit+0xa8>)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80039d6:	4b1a      	ldr	r3, [pc, #104]	; (8003a40 <prvHeapInit+0xa8>)
 80039d8:	2200      	movs	r2, #0
 80039da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	4413      	add	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80039e4:	2208      	movs	r2, #8
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0307 	bic.w	r3, r3, #7
 80039f2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a13      	ldr	r2, [pc, #76]	; (8003a44 <prvHeapInit+0xac>)
 80039f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80039fa:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <prvHeapInit+0xac>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2200      	movs	r2, #0
 8003a00:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003a02:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <prvHeapInit+0xac>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	1ad2      	subs	r2, r2, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a18:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <prvHeapInit+0xac>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <prvHeapInit+0xb0>)
 8003a26:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <prvHeapInit+0xb4>)
 8003a2e:	6013      	str	r3, [r2, #0]
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	20000190 	.word	0x20000190
 8003a40:	20012d90 	.word	0x20012d90
 8003a44:	20012d98 	.word	0x20012d98
 8003a48:	20012da0 	.word	0x20012da0
 8003a4c:	20012d9c 	.word	0x20012d9c

08003a50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a58:	4b28      	ldr	r3, [pc, #160]	; (8003afc <prvInsertBlockIntoFreeList+0xac>)
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e002      	b.n	8003a64 <prvInsertBlockIntoFreeList+0x14>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d8f7      	bhi.n	8003a5e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	4413      	add	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d108      	bne.n	8003a92 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	441a      	add	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	441a      	add	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d118      	bne.n	8003ad8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <prvInsertBlockIntoFreeList+0xb0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d00d      	beq.n	8003ace <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	441a      	add	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e008      	b.n	8003ae0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <prvInsertBlockIntoFreeList+0xb0>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e003      	b.n	8003ae0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d002      	beq.n	8003aee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20012d90 	.word	0x20012d90
 8003b00:	20012d98 	.word	0x20012d98

08003b04 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003b08:	4803      	ldr	r0, [pc, #12]	; (8003b18 <_cbSendSystemDesc+0x14>)
 8003b0a:	f002 f807 	bl	8005b1c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003b0e:	4803      	ldr	r0, [pc, #12]	; (8003b1c <_cbSendSystemDesc+0x18>)
 8003b10:	f002 f804 	bl	8005b1c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003b14:	bf00      	nop
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	08006284 	.word	0x08006284
 8003b1c:	080062c4 	.word	0x080062c4

08003b20 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b2a:	6819      	ldr	r1, [r3, #0]
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <SEGGER_SYSVIEW_Conf+0x24>)
 8003b2e:	4a06      	ldr	r2, [pc, #24]	; (8003b48 <SEGGER_SYSVIEW_Conf+0x28>)
 8003b30:	f001 fc78 	bl	8005424 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003b34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003b38:	f001 fcb8 	bl	80054ac <SEGGER_SYSVIEW_SetRAMBase>
}
 8003b3c:	bf00      	nop
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000000 	.word	0x20000000
 8003b44:	08003b05 	.word	0x08003b05
 8003b48:	08006360 	.word	0x08006360

08003b4c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	e033      	b.n	8003bc0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003b58:	491e      	ldr	r1, [pc, #120]	; (8003bd4 <_cbSendTaskList+0x88>)
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	491a      	ldr	r1, [pc, #104]	; (8003bd4 <_cbSendTaskList+0x88>)
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	3304      	adds	r3, #4
 8003b78:	6819      	ldr	r1, [r3, #0]
 8003b7a:	4c16      	ldr	r4, [pc, #88]	; (8003bd4 <_cbSendTaskList+0x88>)
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4423      	add	r3, r4
 8003b88:	3308      	adds	r3, #8
 8003b8a:	681c      	ldr	r4, [r3, #0]
 8003b8c:	4d11      	ldr	r5, [pc, #68]	; (8003bd4 <_cbSendTaskList+0x88>)
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	442b      	add	r3, r5
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	681d      	ldr	r5, [r3, #0]
 8003b9e:	4e0d      	ldr	r6, [pc, #52]	; (8003bd4 <_cbSendTaskList+0x88>)
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4433      	add	r3, r6
 8003bac:	3310      	adds	r3, #16
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	462b      	mov	r3, r5
 8003bb4:	4622      	mov	r2, r4
 8003bb6:	f000 f8bd 	bl	8003d34 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	607b      	str	r3, [r7, #4]
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <_cbSendTaskList+0x8c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d3c6      	bcc.n	8003b58 <_cbSendTaskList+0xc>
  }
}
 8003bca:	bf00      	nop
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd4:	20012dac 	.word	0x20012dac
 8003bd8:	20012e4c 	.word	0x20012e4c

08003bdc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003be4:	f7ff f81e 	bl	8002c24 <xTaskGetTickCountFromISR>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2200      	movs	r2, #0
 8003bec:	469a      	mov	sl, r3
 8003bee:	4693      	mov	fp, r2
 8003bf0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003bf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	f04f 0a00 	mov.w	sl, #0
 8003c00:	f04f 0b00 	mov.w	fp, #0
 8003c04:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003c08:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003c0c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003c10:	4652      	mov	r2, sl
 8003c12:	465b      	mov	r3, fp
 8003c14:	1a14      	subs	r4, r2, r0
 8003c16:	eb63 0501 	sbc.w	r5, r3, r1
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	00ab      	lsls	r3, r5, #2
 8003c24:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003c28:	00a2      	lsls	r2, r4, #2
 8003c2a:	4614      	mov	r4, r2
 8003c2c:	461d      	mov	r5, r3
 8003c2e:	eb14 0800 	adds.w	r8, r4, r0
 8003c32:	eb45 0901 	adc.w	r9, r5, r1
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c4a:	4690      	mov	r8, r2
 8003c4c:	4699      	mov	r9, r3
 8003c4e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003c52:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003c64 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003c72:	2205      	movs	r2, #5
 8003c74:	492b      	ldr	r1, [pc, #172]	; (8003d24 <SYSVIEW_AddTask+0xc0>)
 8003c76:	68b8      	ldr	r0, [r7, #8]
 8003c78:	f002 fa86 	bl	8006188 <memcmp>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d04b      	beq.n	8003d1a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003c82:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <SYSVIEW_AddTask+0xc4>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b07      	cmp	r3, #7
 8003c88:	d903      	bls.n	8003c92 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003c8a:	4828      	ldr	r0, [pc, #160]	; (8003d2c <SYSVIEW_AddTask+0xc8>)
 8003c8c:	f002 f9f2 	bl	8006074 <SEGGER_SYSVIEW_Warn>
    return;
 8003c90:	e044      	b.n	8003d1c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003c92:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <SYSVIEW_AddTask+0xc4>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4926      	ldr	r1, [pc, #152]	; (8003d30 <SYSVIEW_AddTask+0xcc>)
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003ca6:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <SYSVIEW_AddTask+0xc4>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4921      	ldr	r1, [pc, #132]	; (8003d30 <SYSVIEW_AddTask+0xcc>)
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003cbc:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <SYSVIEW_AddTask+0xc4>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	491b      	ldr	r1, [pc, #108]	; (8003d30 <SYSVIEW_AddTask+0xcc>)
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	3308      	adds	r3, #8
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <SYSVIEW_AddTask+0xc4>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4916      	ldr	r1, [pc, #88]	; (8003d30 <SYSVIEW_AddTask+0xcc>)
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <SYSVIEW_AddTask+0xc4>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	4910      	ldr	r1, [pc, #64]	; (8003d30 <SYSVIEW_AddTask+0xcc>)
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	3310      	adds	r3, #16
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <SYSVIEW_AddTask+0xc4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3301      	adds	r3, #1
 8003d04:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <SYSVIEW_AddTask+0xc4>)
 8003d06:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f80e 	bl	8003d34 <SYSVIEW_SendTaskInfo>
 8003d18:	e000      	b.n	8003d1c <SYSVIEW_AddTask+0xb8>
    return;
 8003d1a:	bf00      	nop

}
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	080062d4 	.word	0x080062d4
 8003d28:	20012e4c 	.word	0x20012e4c
 8003d2c:	080062dc 	.word	0x080062dc
 8003d30:	20012dac 	.word	0x20012dac

08003d34 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003d42:	f107 0314 	add.w	r3, r7, #20
 8003d46:	2214      	movs	r2, #20
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f002 fa2c 	bl	80061a8 <memset>
  TaskInfo.TaskID     = TaskID;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 fddf 	bl	800592c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003d6e:	bf00      	nop
 8003d70:	3728      	adds	r7, #40	; 0x28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <__NVIC_EnableIRQ>:
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	db0b      	blt.n	8003da2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	f003 021f 	and.w	r2, r3, #31
 8003d90:	4907      	ldr	r1, [pc, #28]	; (8003db0 <__NVIC_EnableIRQ+0x38>)
 8003d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	2001      	movs	r0, #1
 8003d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	e000e100 	.word	0xe000e100

08003db4 <__NVIC_SetPriority>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	6039      	str	r1, [r7, #0]
 8003dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	db0a      	blt.n	8003dde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	490c      	ldr	r1, [pc, #48]	; (8003e00 <__NVIC_SetPriority+0x4c>)
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	0112      	lsls	r2, r2, #4
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ddc:	e00a      	b.n	8003df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	4908      	ldr	r1, [pc, #32]	; (8003e04 <__NVIC_SetPriority+0x50>)
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	3b04      	subs	r3, #4
 8003dec:	0112      	lsls	r2, r2, #4
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	440b      	add	r3, r1
 8003df2:	761a      	strb	r2, [r3, #24]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000e100 	.word	0xe000e100
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003e0e:	f002 f98d 	bl	800612c <SEGGER_SYSVIEW_IsStarted>
 8003e12:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003e1a:	f001 fc0b 	bl	8005634 <SEGGER_SYSVIEW_Start>
  }
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <_cbOnUARTRx+0x3c>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d806      	bhi.n	8003e48 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <_cbOnUARTRx+0x3c>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <_cbOnUARTRx+0x3c>)
 8003e44:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003e46:	e009      	b.n	8003e5c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003e48:	f7ff ffde 	bl	8003e08 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <_cbOnUARTRx+0x3c>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	4618      	mov	r0, r3
 8003e52:	1dfb      	adds	r3, r7, #7
 8003e54:	2201      	movs	r2, #1
 8003e56:	4619      	mov	r1, r3
 8003e58:	f000 fb9e 	bl	8004598 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003e5c:	bf00      	nop
}
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000014 	.word	0x20000014

08003e68 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <_cbOnUARTTx+0x5c>)
 8003e72:	785b      	ldrb	r3, [r3, #1]
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d80f      	bhi.n	8003e98 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <_cbOnUARTTx+0x5c>)
 8003e7a:	785b      	ldrb	r3, [r3, #1]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <_cbOnUARTTx+0x60>)
 8003e80:	5c9a      	ldrb	r2, [r3, r2]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003e86:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <_cbOnUARTTx+0x5c>)
 8003e88:	785b      	ldrb	r3, [r3, #1]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <_cbOnUARTTx+0x5c>)
 8003e90:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003e92:	2301      	movs	r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003e96:	e00f      	b.n	8003eb8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <_cbOnUARTTx+0x5c>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fa1d 	bl	80042e0 <SEGGER_RTT_ReadUpBufferNoLock>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	da02      	bge.n	8003eb6 <_cbOnUARTTx+0x4e>
    r = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e000      	b.n	8003eb8 <_cbOnUARTTx+0x50>
  }
Done:
 8003eb6:	bf00      	nop
  return r;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000014 	.word	0x20000014
 8003ec8:	08006368 	.word	0x08006368

08003ecc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003ed4:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <SEGGER_UART_init+0x1c>)
 8003ed6:	4905      	ldr	r1, [pc, #20]	; (8003eec <SEGGER_UART_init+0x20>)
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f863 	bl	8003fa4 <HIF_UART_Init>
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	08003e29 	.word	0x08003e29
 8003eec:	08003e69 	.word	0x08003e69

08003ef0 <USART1_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART1_IRQHandler(void);
void USART1_IRQHandler(void) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003ef6:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <USART1_IRQHandler+0x80>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d011      	beq.n	8003f2a <USART1_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003f06:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <USART1_IRQHandler+0x84>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 030b 	and.w	r3, r3, #11
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d108      	bne.n	8003f2a <USART1_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003f18:	4b17      	ldr	r3, [pc, #92]	; (8003f78 <USART1_IRQHandler+0x88>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <USART1_IRQHandler+0x3a>
        _cbOnRx(v);
 8003f20:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <USART1_IRQHandler+0x88>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	79fa      	ldrb	r2, [r7, #7]
 8003f26:	4610      	mov	r0, r2
 8003f28:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01a      	beq.n	8003f6a <USART1_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003f34:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <USART1_IRQHandler+0x8c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d015      	beq.n	8003f68 <USART1_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <USART1_IRQHandler+0x8c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	1dfa      	adds	r2, r7, #7
 8003f42:	4610      	mov	r0, r2
 8003f44:	4798      	blx	r3
 8003f46:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <USART1_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <USART1_IRQHandler+0x90>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a0b      	ldr	r2, [pc, #44]	; (8003f80 <USART1_IRQHandler+0x90>)
 8003f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e006      	b.n	8003f6a <USART1_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <USART1_IRQHandler+0x80>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003f60:	79fa      	ldrb	r2, [r7, #7]
 8003f62:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <USART1_IRQHandler+0x84>)
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	e000      	b.n	8003f6a <USART1_IRQHandler+0x7a>
      return;
 8003f68:	bf00      	nop
    }
  }
}
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40011000 	.word	0x40011000
 8003f74:	40011004 	.word	0x40011004
 8003f78:	20012e50 	.word	0x20012e50
 8003f7c:	20012e54 	.word	0x20012e54
 8003f80:	4001100c 	.word	0x4001100c

08003f84 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f92:	6013      	str	r3, [r2, #0]
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	4001100c 	.word	0x4001100c

08003fa4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  //
  // Configure USART RX/TX pins for alternate function AF7
  //

  //RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
  RCC_APB2ENR |= (1 <<  4);        // Enable USART1 clock // PK: change for stm32f429 disc1
 8003fb0:	4b2e      	ldr	r3, [pc, #184]	; (800406c <HIF_UART_Init+0xc8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2d      	ldr	r2, [pc, #180]	; (800406c <HIF_UART_Init+0xc8>)
 8003fb6:	f043 0310 	orr.w	r3, r3, #16
 8003fba:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003fbc:	4b2c      	ldr	r3, [pc, #176]	; (8004070 <HIF_UART_Init+0xcc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a2b      	ldr	r2, [pc, #172]	; (8004070 <HIF_UART_Init+0xcc>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	6013      	str	r3, [r2, #0]

  v  = GPIO_AFRH;	// v  = GPIO_AFRL;	// PK: Changed for stm32f429
 8003fc8:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <HIF_UART_Init+0xd0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	613b      	str	r3, [r7, #16]
  //v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
  //v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
  v &= ~((15UL << 4) | (15UL << 8));
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003fd4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << 4) | (7UL << 8));
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8003fdc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003fde:	4a26      	ldr	r2, [pc, #152]	; (8004078 <HIF_UART_Init+0xd4>)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <HIF_UART_Init+0xd8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8003ff0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8003ff8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003ffa:	4a20      	ldr	r2, [pc, #128]	; (800407c <HIF_UART_Init+0xd8>)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004000:	4b1f      	ldr	r3, [pc, #124]	; (8004080 <HIF_UART_Init+0xdc>)
 8004002:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004006:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004008:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <HIF_UART_Init+0xe0>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800400e:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <HIF_UART_Init+0xe4>)
 8004010:	2280      	movs	r2, #128	; 0x80
 8004012:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800401a:	4a1c      	ldr	r2, [pc, #112]	; (800408c <HIF_UART_Init+0xe8>)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	3301      	adds	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	085b      	lsrs	r3, r3, #1
 800402a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004032:	d302      	bcc.n	800403a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004034:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004038:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	4a12      	ldr	r2, [pc, #72]	; (8004090 <HIF_UART_Init+0xec>)
 8004046:	b29b      	uxth	r3, r3
 8004048:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800404a:	4a12      	ldr	r2, [pc, #72]	; (8004094 <HIF_UART_Init+0xf0>)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004050:	4a11      	ldr	r2, [pc, #68]	; (8004098 <HIF_UART_Init+0xf4>)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004056:	2106      	movs	r1, #6
 8004058:	2025      	movs	r0, #37	; 0x25
 800405a:	f7ff feab 	bl	8003db4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800405e:	2025      	movs	r0, #37	; 0x25
 8004060:	f7ff fe8a 	bl	8003d78 <__NVIC_EnableIRQ>
}
 8004064:	bf00      	nop
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40023844 	.word	0x40023844
 8004070:	40023830 	.word	0x40023830
 8004074:	40020024 	.word	0x40020024
 8004078:	40020020 	.word	0x40020020
 800407c:	40020000 	.word	0x40020000
 8004080:	4001100c 	.word	0x4001100c
 8004084:	40011010 	.word	0x40011010
 8004088:	40011014 	.word	0x40011014
 800408c:	0a037a00 	.word	0x0a037a00
 8004090:	40011008 	.word	0x40011008
 8004094:	20012e50 	.word	0x20012e50
 8004098:	20012e54 	.word	0x20012e54

0800409c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80040a2:	4b26      	ldr	r3, [pc, #152]	; (800413c <_DoInit+0xa0>)
 80040a4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80040a6:	22a8      	movs	r2, #168	; 0xa8
 80040a8:	2100      	movs	r1, #0
 80040aa:	6838      	ldr	r0, [r7, #0]
 80040ac:	f002 f87c 	bl	80061a8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2203      	movs	r2, #3
 80040b4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2203      	movs	r2, #3
 80040ba:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4a20      	ldr	r2, [pc, #128]	; (8004140 <_DoInit+0xa4>)
 80040c0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <_DoInit+0xa8>)
 80040c6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040ce:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2200      	movs	r2, #0
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2200      	movs	r2, #0
 80040e0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	4a16      	ldr	r2, [pc, #88]	; (8004140 <_DoInit+0xa4>)
 80040e6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4a17      	ldr	r2, [pc, #92]	; (8004148 <_DoInit+0xac>)
 80040ec:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2210      	movs	r2, #16
 80040f2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2200      	movs	r2, #0
 80040f8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2200      	movs	r2, #0
 80040fe:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2200      	movs	r2, #0
 8004104:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004106:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	e00c      	b.n	800412a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f1c3 030f 	rsb	r3, r3, #15
 8004116:	4a0d      	ldr	r2, [pc, #52]	; (800414c <_DoInit+0xb0>)
 8004118:	5cd1      	ldrb	r1, [r2, r3]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4413      	add	r3, r2
 8004120:	460a      	mov	r2, r1
 8004122:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3301      	adds	r3, #1
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b0f      	cmp	r3, #15
 800412e:	d9ef      	bls.n	8004110 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004130:	f3bf 8f5f 	dmb	sy
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20012e58 	.word	0x20012e58
 8004140:	0800632c 	.word	0x0800632c
 8004144:	20012f00 	.word	0x20012f00
 8004148:	20013300 	.word	0x20013300
 800414c:	0800636c 	.word	0x0800636c

08004150 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	; 0x28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800415c:	2300      	movs	r3, #0
 800415e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	429a      	cmp	r2, r3
 8004172:	d905      	bls.n	8004180 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
 800417e:	e007      	b.n	8004190 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	69b9      	ldr	r1, [r7, #24]
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	1acb      	subs	r3, r1, r3
 800418a:	4413      	add	r3, r2
 800418c:	3b01      	subs	r3, #1
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419a:	4293      	cmp	r3, r2
 800419c:	bf28      	it	cs
 800419e:	4613      	movcs	r3, r2
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80041a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4293      	cmp	r3, r2
 80041a8:	bf28      	it	cs
 80041aa:	4613      	movcs	r3, r2
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80041b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	6978      	ldr	r0, [r7, #20]
 80041be:	f002 f81f 	bl	8006200 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80041c2:	6a3a      	ldr	r2, [r7, #32]
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	4413      	add	r3, r2
 80041c8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	4413      	add	r3, r2
 80041d0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	4413      	add	r3, r2
 80041e0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d101      	bne.n	80041f0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80041f0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1b2      	bne.n	8004166 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004200:	6a3b      	ldr	r3, [r7, #32]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3728      	adds	r7, #40	; 0x28
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800420a:	b580      	push	{r7, lr}
 800420c:	b088      	sub	sp, #32
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	429a      	cmp	r2, r3
 800422c:	d911      	bls.n	8004252 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	4413      	add	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	6938      	ldr	r0, [r7, #16]
 800423e:	f001 ffdf 	bl	8006200 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004242:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	441a      	add	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004250:	e01f      	b.n	8004292 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	6938      	ldr	r0, [r7, #16]
 8004266:	f001 ffcb 	bl	8006200 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	4413      	add	r3, r2
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4619      	mov	r1, r3
 8004282:	6938      	ldr	r0, [r7, #16]
 8004284:	f001 ffbc 	bl	8006200 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004288:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	60da      	str	r2, [r3, #12]
}
 8004292:	bf00      	nop
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800429a:	b480      	push	{r7}
 800429c:	b087      	sub	sp, #28
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d808      	bhi.n	80042c8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1ad2      	subs	r2, r2, r3
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4413      	add	r3, r2
 80042c2:	3b01      	subs	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e004      	b.n	80042d2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80042d2:	697b      	ldr	r3, [r7, #20]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08c      	sub	sp, #48	; 0x30
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80042ec:	4b3e      	ldr	r3, [pc, #248]	; (80043e8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80042ee:	623b      	str	r3, [r7, #32]
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b53      	cmp	r3, #83	; 0x53
 80042f8:	d001      	beq.n	80042fe <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80042fa:	f7ff fecf 	bl	800409c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	4613      	mov	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	4413      	add	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4a37      	ldr	r2, [pc, #220]	; (80043e8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800430c:	4413      	add	r3, r2
 800430e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004320:	2300      	movs	r3, #0
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	429a      	cmp	r2, r3
 800432a:	d92b      	bls.n	8004384 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4293      	cmp	r3, r2
 800433c:	bf28      	it	cs
 800433e:	4613      	movcs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	4413      	add	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	6939      	ldr	r1, [r7, #16]
 8004350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004352:	f001 ff55 	bl	8006200 <memcpy>
    NumBytesRead += NumBytesRem;
 8004356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	4413      	add	r3, r2
 800435c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800435e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4413      	add	r3, r2
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800436e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	4413      	add	r3, r2
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800437c:	429a      	cmp	r2, r3
 800437e:	d101      	bne.n	8004384 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004380:	2300      	movs	r3, #0
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4293      	cmp	r3, r2
 8004392:	bf28      	it	cs
 8004394:	4613      	movcs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d019      	beq.n	80043d2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	4413      	add	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	6939      	ldr	r1, [r7, #16]
 80043ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ae:	f001 ff27 	bl	8006200 <memcpy>
    NumBytesRead += NumBytesRem;
 80043b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	4413      	add	r3, r2
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80043ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	4413      	add	r3, r2
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80043ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	4413      	add	r3, r2
 80043d0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043dc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3730      	adds	r7, #48	; 0x30
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20012e58 	.word	0x20012e58

080043ec <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08c      	sub	sp, #48	; 0x30
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80043f8:	4b3e      	ldr	r3, [pc, #248]	; (80044f4 <SEGGER_RTT_ReadNoLock+0x108>)
 80043fa:	623b      	str	r3, [r7, #32]
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b53      	cmp	r3, #83	; 0x53
 8004404:	d001      	beq.n	800440a <SEGGER_RTT_ReadNoLock+0x1e>
 8004406:	f7ff fe49 	bl	800409c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4613      	mov	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	3360      	adds	r3, #96	; 0x60
 8004416:	4a37      	ldr	r2, [pc, #220]	; (80044f4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004418:	4413      	add	r3, r2
 800441a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800442c:	2300      	movs	r3, #0
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	429a      	cmp	r2, r3
 8004436:	d92b      	bls.n	8004490 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4293      	cmp	r3, r2
 8004448:	bf28      	it	cs
 800444a:	4613      	movcs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	4413      	add	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	6939      	ldr	r1, [r7, #16]
 800445c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800445e:	f001 fecf 	bl	8006200 <memcpy>
    NumBytesRead += NumBytesRem;
 8004462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	4413      	add	r3, r2
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800446a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	4413      	add	r3, r2
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800447a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004488:	429a      	cmp	r2, r3
 800448a:	d101      	bne.n	8004490 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800448c:	2300      	movs	r3, #0
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4293      	cmp	r3, r2
 800449e:	bf28      	it	cs
 80044a0:	4613      	movcs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d019      	beq.n	80044de <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	4413      	add	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	6939      	ldr	r1, [r7, #16]
 80044b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044ba:	f001 fea1 	bl	8006200 <memcpy>
    NumBytesRead += NumBytesRem;
 80044be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4413      	add	r3, r2
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80044c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4413      	add	r3, r2
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80044d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	4413      	add	r3, r2
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044e8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3730      	adds	r7, #48	; 0x30
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20012e58 	.word	0x20012e58

080044f8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4613      	mov	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4413      	add	r3, r2
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	3360      	adds	r3, #96	; 0x60
 8004514:	4a1f      	ldr	r2, [pc, #124]	; (8004594 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004516:	4413      	add	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d029      	beq.n	8004576 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004522:	2b02      	cmp	r3, #2
 8004524:	d82e      	bhi.n	8004584 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800452a:	2b01      	cmp	r3, #1
 800452c:	d013      	beq.n	8004556 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800452e:	e029      	b.n	8004584 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004530:	6978      	ldr	r0, [r7, #20]
 8004532:	f7ff feb2 	bl	800429a <_GetAvailWriteSpace>
 8004536:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	429a      	cmp	r2, r3
 800453e:	d202      	bcs.n	8004546 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004544:	e021      	b.n	800458a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	69b9      	ldr	r1, [r7, #24]
 800454e:	6978      	ldr	r0, [r7, #20]
 8004550:	f7ff fe5b 	bl	800420a <_WriteNoCheck>
    break;
 8004554:	e019      	b.n	800458a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004556:	6978      	ldr	r0, [r7, #20]
 8004558:	f7ff fe9f 	bl	800429a <_GetAvailWriteSpace>
 800455c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4293      	cmp	r3, r2
 8004564:	bf28      	it	cs
 8004566:	4613      	movcs	r3, r2
 8004568:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	69b9      	ldr	r1, [r7, #24]
 800456e:	6978      	ldr	r0, [r7, #20]
 8004570:	f7ff fe4b 	bl	800420a <_WriteNoCheck>
    break;
 8004574:	e009      	b.n	800458a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	69b9      	ldr	r1, [r7, #24]
 800457a:	6978      	ldr	r0, [r7, #20]
 800457c:	f7ff fde8 	bl	8004150 <_WriteBlocking>
 8004580:	61f8      	str	r0, [r7, #28]
    break;
 8004582:	e002      	b.n	800458a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
    break;
 8004588:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800458a:	69fb      	ldr	r3, [r7, #28]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20012e58 	.word	0x20012e58

08004598 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80045a4:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b53      	cmp	r3, #83	; 0x53
 80045b0:	d001      	beq.n	80045b6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80045b2:	f7ff fd73 	bl	800409c <_DoInit>
  SEGGER_RTT_LOCK();
 80045b6:	f3ef 8311 	mrs	r3, BASEPRI
 80045ba:	f04f 0120 	mov.w	r1, #32
 80045be:	f381 8811 	msr	BASEPRI, r1
 80045c2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7ff ff95 	bl	80044f8 <SEGGER_RTT_WriteDownBufferNoLock>
 80045ce:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80045d6:	697b      	ldr	r3, [r7, #20]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20012e58 	.word	0x20012e58

080045e4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b088      	sub	sp, #32
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80045f2:	4b3d      	ldr	r3, [pc, #244]	; (80046e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b53      	cmp	r3, #83	; 0x53
 80045fe:	d001      	beq.n	8004604 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004600:	f7ff fd4c 	bl	800409c <_DoInit>
  SEGGER_RTT_LOCK();
 8004604:	f3ef 8311 	mrs	r3, BASEPRI
 8004608:	f04f 0120 	mov.w	r1, #32
 800460c:	f381 8811 	msr	BASEPRI, r1
 8004610:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004612:	4b35      	ldr	r3, [pc, #212]	; (80046e8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004614:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800461a:	6939      	ldr	r1, [r7, #16]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	4613      	mov	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	440b      	add	r3, r1
 800462a:	3304      	adds	r3, #4
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d008      	beq.n	8004644 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3301      	adds	r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	429a      	cmp	r2, r3
 8004640:	dbeb      	blt.n	800461a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004642:	e000      	b.n	8004646 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004644:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	429a      	cmp	r2, r3
 800464e:	da3f      	bge.n	80046d0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004650:	6939      	ldr	r1, [r7, #16]
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	440b      	add	r3, r1
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004664:	6939      	ldr	r1, [r7, #16]
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	4613      	mov	r3, r2
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	4413      	add	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	440b      	add	r3, r1
 8004674:	3304      	adds	r3, #4
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800467a:	6939      	ldr	r1, [r7, #16]
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	4613      	mov	r3, r2
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4413      	add	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	440b      	add	r3, r1
 8004688:	3320      	adds	r3, #32
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800468e:	6939      	ldr	r1, [r7, #16]
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	4613      	mov	r3, r2
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	4413      	add	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	440b      	add	r3, r1
 800469c:	3328      	adds	r3, #40	; 0x28
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80046a2:	6939      	ldr	r1, [r7, #16]
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	440b      	add	r3, r1
 80046b0:	3324      	adds	r3, #36	; 0x24
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80046b6:	6939      	ldr	r1, [r7, #16]
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	440b      	add	r3, r1
 80046c4:	332c      	adds	r3, #44	; 0x2c
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046ca:	f3bf 8f5f 	dmb	sy
 80046ce:	e002      	b.n	80046d6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295
 80046d4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80046dc:	69fb      	ldr	r3, [r7, #28]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20012e58 	.word	0x20012e58

080046ec <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	; 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80046fa:	4b21      	ldr	r3, [pc, #132]	; (8004780 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80046fc:	623b      	str	r3, [r7, #32]
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b53      	cmp	r3, #83	; 0x53
 8004706:	d001      	beq.n	800470c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004708:	f7ff fcc8 	bl	800409c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800470c:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800470e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d82c      	bhi.n	8004770 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004716:	f3ef 8311 	mrs	r3, BASEPRI
 800471a:	f04f 0120 	mov.w	r1, #32
 800471e:	f381 8811 	msr	BASEPRI, r1
 8004722:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4613      	mov	r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	4413      	add	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	3360      	adds	r3, #96	; 0x60
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	4413      	add	r3, r2
 8004734:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00e      	beq.n	800475a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2200      	movs	r2, #0
 8004758:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004760:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800476a:	2300      	movs	r3, #0
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
 800476e:	e002      	b.n	8004776 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004770:	f04f 33ff 	mov.w	r3, #4294967295
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004778:	4618      	mov	r0, r3
 800477a:	3728      	adds	r7, #40	; 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20012e58 	.word	0x20012e58

08004784 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	60fa      	str	r2, [r7, #12]
 800479a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b80      	cmp	r3, #128	; 0x80
 80047a0:	d90a      	bls.n	80047b8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80047a2:	2380      	movs	r3, #128	; 0x80
 80047a4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80047a6:	e007      	b.n	80047b8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	1c53      	adds	r3, r2, #1
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1c59      	adds	r1, r3, #1
 80047b2:	60f9      	str	r1, [r7, #12]
 80047b4:	7812      	ldrb	r2, [r2, #0]
 80047b6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	1e5a      	subs	r2, r3, #1
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <_EncodeStr+0x46>
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1ee      	bne.n	80047a8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80047d6:	68fb      	ldr	r3, [r7, #12]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3307      	adds	r3, #7
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004802:	4b34      	ldr	r3, [pc, #208]	; (80048d4 <_HandleIncomingPacket+0xd8>)
 8004804:	7e1b      	ldrb	r3, [r3, #24]
 8004806:	4618      	mov	r0, r3
 8004808:	1cfb      	adds	r3, r7, #3
 800480a:	2201      	movs	r2, #1
 800480c:	4619      	mov	r1, r3
 800480e:	f7ff fded 	bl	80043ec <SEGGER_RTT_ReadNoLock>
 8004812:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d057      	beq.n	80048ca <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800481a:	78fb      	ldrb	r3, [r7, #3]
 800481c:	2b80      	cmp	r3, #128	; 0x80
 800481e:	d031      	beq.n	8004884 <_HandleIncomingPacket+0x88>
 8004820:	2b80      	cmp	r3, #128	; 0x80
 8004822:	dc40      	bgt.n	80048a6 <_HandleIncomingPacket+0xaa>
 8004824:	2b07      	cmp	r3, #7
 8004826:	dc15      	bgt.n	8004854 <_HandleIncomingPacket+0x58>
 8004828:	2b00      	cmp	r3, #0
 800482a:	dd3c      	ble.n	80048a6 <_HandleIncomingPacket+0xaa>
 800482c:	3b01      	subs	r3, #1
 800482e:	2b06      	cmp	r3, #6
 8004830:	d839      	bhi.n	80048a6 <_HandleIncomingPacket+0xaa>
 8004832:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <_HandleIncomingPacket+0x3c>)
 8004834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004838:	0800485b 	.word	0x0800485b
 800483c:	08004861 	.word	0x08004861
 8004840:	08004867 	.word	0x08004867
 8004844:	0800486d 	.word	0x0800486d
 8004848:	08004873 	.word	0x08004873
 800484c:	08004879 	.word	0x08004879
 8004850:	0800487f 	.word	0x0800487f
 8004854:	2b7f      	cmp	r3, #127	; 0x7f
 8004856:	d033      	beq.n	80048c0 <_HandleIncomingPacket+0xc4>
 8004858:	e025      	b.n	80048a6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800485a:	f000 feeb 	bl	8005634 <SEGGER_SYSVIEW_Start>
      break;
 800485e:	e034      	b.n	80048ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004860:	f000 ffa4 	bl	80057ac <SEGGER_SYSVIEW_Stop>
      break;
 8004864:	e031      	b.n	80048ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004866:	f001 f97d 	bl	8005b64 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800486a:	e02e      	b.n	80048ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800486c:	f001 f942 	bl	8005af4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004870:	e02b      	b.n	80048ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004872:	f000 ffc1 	bl	80057f8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004876:	e028      	b.n	80048ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004878:	f001 fbaa 	bl	8005fd0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800487c:	e025      	b.n	80048ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800487e:	f001 fb89 	bl	8005f94 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004882:	e022      	b.n	80048ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004884:	4b13      	ldr	r3, [pc, #76]	; (80048d4 <_HandleIncomingPacket+0xd8>)
 8004886:	7e1b      	ldrb	r3, [r3, #24]
 8004888:	4618      	mov	r0, r3
 800488a:	1cfb      	adds	r3, r7, #3
 800488c:	2201      	movs	r2, #1
 800488e:	4619      	mov	r1, r3
 8004890:	f7ff fdac 	bl	80043ec <SEGGER_RTT_ReadNoLock>
 8004894:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d013      	beq.n	80048c4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	4618      	mov	r0, r3
 80048a0:	f001 faee 	bl	8005e80 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80048a4:	e00e      	b.n	80048c4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	b25b      	sxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	da0c      	bge.n	80048c8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <_HandleIncomingPacket+0xd8>)
 80048b0:	7e1b      	ldrb	r3, [r3, #24]
 80048b2:	4618      	mov	r0, r3
 80048b4:	1cfb      	adds	r3, r7, #3
 80048b6:	2201      	movs	r2, #1
 80048b8:	4619      	mov	r1, r3
 80048ba:	f7ff fd97 	bl	80043ec <SEGGER_RTT_ReadNoLock>
      }
      break;
 80048be:	e003      	b.n	80048c8 <_HandleIncomingPacket+0xcc>
      break;
 80048c0:	bf00      	nop
 80048c2:	e002      	b.n	80048ca <_HandleIncomingPacket+0xce>
      break;
 80048c4:	bf00      	nop
 80048c6:	e000      	b.n	80048ca <_HandleIncomingPacket+0xce>
      break;
 80048c8:	bf00      	nop
    }
  }
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20014318 	.word	0x20014318

080048d8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08c      	sub	sp, #48	; 0x30
 80048dc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80048de:	2301      	movs	r3, #1
 80048e0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80048e2:	1d3b      	adds	r3, r7, #4
 80048e4:	3301      	adds	r3, #1
 80048e6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ec:	4b32      	ldr	r3, [pc, #200]	; (80049b8 <_TrySendOverflowPacket+0xe0>)
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f2:	e00b      	b.n	800490c <_TrySendOverflowPacket+0x34>
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fa:	1c59      	adds	r1, r3, #1
 80048fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	09db      	lsrs	r3, r3, #7
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	2b7f      	cmp	r3, #127	; 0x7f
 8004910:	d8f0      	bhi.n	80048f4 <_TrySendOverflowPacket+0x1c>
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004920:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004922:	4b26      	ldr	r3, [pc, #152]	; (80049bc <_TrySendOverflowPacket+0xe4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004928:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <_TrySendOverflowPacket+0xe0>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	623b      	str	r3, [r7, #32]
 800493a:	e00b      	b.n	8004954 <_TrySendOverflowPacket+0x7c>
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	b2da      	uxtb	r2, r3
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	1c59      	adds	r1, r3, #1
 8004944:	6279      	str	r1, [r7, #36]	; 0x24
 8004946:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	09db      	lsrs	r3, r3, #7
 8004952:	623b      	str	r3, [r7, #32]
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	2b7f      	cmp	r3, #127	; 0x7f
 8004958:	d8f0      	bhi.n	800493c <_TrySendOverflowPacket+0x64>
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	627a      	str	r2, [r7, #36]	; 0x24
 8004960:	6a3a      	ldr	r2, [r7, #32]
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800496a:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <_TrySendOverflowPacket+0xe0>)
 800496c:	785b      	ldrb	r3, [r3, #1]
 800496e:	4618      	mov	r0, r3
 8004970:	1d3b      	adds	r3, r7, #4
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	461a      	mov	r2, r3
 8004978:	1d3b      	adds	r3, r7, #4
 800497a:	4619      	mov	r1, r3
 800497c:	f7fb fc38 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004980:	4603      	mov	r3, r0
 8004982:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004984:	f7ff fafe 	bl	8003f84 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800498e:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <_TrySendOverflowPacket+0xe0>)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004994:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <_TrySendOverflowPacket+0xe0>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	3b01      	subs	r3, #1
 800499a:	b2da      	uxtb	r2, r3
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <_TrySendOverflowPacket+0xe0>)
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e004      	b.n	80049ac <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <_TrySendOverflowPacket+0xe0>)
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	3301      	adds	r3, #1
 80049a8:	4a03      	ldr	r2, [pc, #12]	; (80049b8 <_TrySendOverflowPacket+0xe0>)
 80049aa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80049ac:	693b      	ldr	r3, [r7, #16]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3730      	adds	r7, #48	; 0x30
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20014318 	.word	0x20014318
 80049bc:	e0001004 	.word	0xe0001004

080049c0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	; 0x28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80049cc:	4b96      	ldr	r3, [pc, #600]	; (8004c28 <_SendPacket+0x268>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d010      	beq.n	80049f6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80049d4:	4b94      	ldr	r3, [pc, #592]	; (8004c28 <_SendPacket+0x268>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 8130 	beq.w	8004c3e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80049de:	4b92      	ldr	r3, [pc, #584]	; (8004c28 <_SendPacket+0x268>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d109      	bne.n	80049fa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80049e6:	f7ff ff77 	bl	80048d8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80049ea:	4b8f      	ldr	r3, [pc, #572]	; (8004c28 <_SendPacket+0x268>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	f040 8127 	bne.w	8004c42 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80049f4:	e001      	b.n	80049fa <_SendPacket+0x3a>
    goto Send;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <_SendPacket+0x3c>
Send:
 80049fa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b1f      	cmp	r3, #31
 8004a00:	d809      	bhi.n	8004a16 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004a02:	4b89      	ldr	r3, [pc, #548]	; (8004c28 <_SendPacket+0x268>)
 8004a04:	69da      	ldr	r2, [r3, #28]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f040 8118 	bne.w	8004c46 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b17      	cmp	r3, #23
 8004a1a:	d807      	bhi.n	8004a2c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e0c4      	b.n	8004bb6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	2b7f      	cmp	r3, #127	; 0x7f
 8004a38:	d912      	bls.n	8004a60 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	09da      	lsrs	r2, r3, #7
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	3a01      	subs	r2, #1
 8004a52:	60fa      	str	r2, [r7, #12]
 8004a54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e006      	b.n	8004a6e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b7e      	cmp	r3, #126	; 0x7e
 8004a72:	d807      	bhi.n	8004a84 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	e098      	b.n	8004bb6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a8a:	d212      	bcs.n	8004ab2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	09da      	lsrs	r2, r3, #7
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	3a01      	subs	r2, #1
 8004aa4:	60fa      	str	r2, [r7, #12]
 8004aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e081      	b.n	8004bb6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ab8:	d21d      	bcs.n	8004af6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	0b9a      	lsrs	r2, r3, #14
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	09db      	lsrs	r3, r3, #7
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	3a01      	subs	r2, #1
 8004ad4:	60fa      	str	r2, [r7, #12]
 8004ad6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	3a01      	subs	r2, #1
 8004ae8:	60fa      	str	r2, [r7, #12]
 8004aea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	e05f      	b.n	8004bb6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004afc:	d228      	bcs.n	8004b50 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	0d5a      	lsrs	r2, r3, #21
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	0b9b      	lsrs	r3, r3, #14
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	3a01      	subs	r2, #1
 8004b18:	60fa      	str	r2, [r7, #12]
 8004b1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	09db      	lsrs	r3, r3, #7
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	3a01      	subs	r2, #1
 8004b2e:	60fa      	str	r2, [r7, #12]
 8004b30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	3a01      	subs	r2, #1
 8004b42:	60fa      	str	r2, [r7, #12]
 8004b44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	e032      	b.n	8004bb6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	0f1a      	lsrs	r2, r3, #28
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	0d5b      	lsrs	r3, r3, #21
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	3a01      	subs	r2, #1
 8004b6a:	60fa      	str	r2, [r7, #12]
 8004b6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	0b9b      	lsrs	r3, r3, #14
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	3a01      	subs	r2, #1
 8004b80:	60fa      	str	r2, [r7, #12]
 8004b82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	09db      	lsrs	r3, r3, #7
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	3a01      	subs	r2, #1
 8004b96:	60fa      	str	r2, [r7, #12]
 8004b98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	3a01      	subs	r2, #1
 8004baa:	60fa      	str	r2, [r7, #12]
 8004bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004bb6:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <_SendPacket+0x26c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <_SendPacket+0x268>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	623b      	str	r3, [r7, #32]
 8004bce:	e00b      	b.n	8004be8 <_SendPacket+0x228>
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	1c59      	adds	r1, r3, #1
 8004bd8:	6279      	str	r1, [r7, #36]	; 0x24
 8004bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	09db      	lsrs	r3, r3, #7
 8004be6:	623b      	str	r3, [r7, #32]
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	2b7f      	cmp	r3, #127	; 0x7f
 8004bec:	d8f0      	bhi.n	8004bd0 <_SendPacket+0x210>
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	627a      	str	r2, [r7, #36]	; 0x24
 8004bf4:	6a3a      	ldr	r2, [r7, #32]
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004bfe:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <_SendPacket+0x268>)
 8004c00:	785b      	ldrb	r3, [r3, #1]
 8004c02:	4618      	mov	r0, r3
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68f9      	ldr	r1, [r7, #12]
 8004c0e:	f7fb faef 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004c12:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004c14:	f7ff f9b6 	bl	8003f84 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d008      	beq.n	8004c30 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004c1e:	4a02      	ldr	r2, [pc, #8]	; (8004c28 <_SendPacket+0x268>)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	60d3      	str	r3, [r2, #12]
 8004c24:	e010      	b.n	8004c48 <_SendPacket+0x288>
 8004c26:	bf00      	nop
 8004c28:	20014318 	.word	0x20014318
 8004c2c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004c30:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <_SendPacket+0x2d8>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	3301      	adds	r3, #1
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	4b17      	ldr	r3, [pc, #92]	; (8004c98 <_SendPacket+0x2d8>)
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	e004      	b.n	8004c48 <_SendPacket+0x288>
    goto SendDone;
 8004c3e:	bf00      	nop
 8004c40:	e002      	b.n	8004c48 <_SendPacket+0x288>
      goto SendDone;
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <_SendPacket+0x288>
      goto SendDone;
 8004c46:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <_SendPacket+0x2d8>)
 8004c4a:	7e1b      	ldrb	r3, [r3, #24]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4a13      	ldr	r2, [pc, #76]	; (8004c9c <_SendPacket+0x2dc>)
 8004c50:	460b      	mov	r3, r1
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	440b      	add	r3, r1
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4413      	add	r3, r2
 8004c5a:	336c      	adds	r3, #108	; 0x6c
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <_SendPacket+0x2d8>)
 8004c60:	7e1b      	ldrb	r3, [r3, #24]
 8004c62:	4618      	mov	r0, r3
 8004c64:	490d      	ldr	r1, [pc, #52]	; (8004c9c <_SendPacket+0x2dc>)
 8004c66:	4603      	mov	r3, r0
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	4403      	add	r3, r0
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	440b      	add	r3, r1
 8004c70:	3370      	adds	r3, #112	; 0x70
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d00b      	beq.n	8004c90 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004c78:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <_SendPacket+0x2d8>)
 8004c7a:	789b      	ldrb	r3, [r3, #2]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d107      	bne.n	8004c90 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <_SendPacket+0x2d8>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004c86:	f7ff fdb9 	bl	80047fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004c8a:	4b03      	ldr	r3, [pc, #12]	; (8004c98 <_SendPacket+0x2d8>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004c90:	bf00      	nop
 8004c92:	3728      	adds	r7, #40	; 0x28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20014318 	.word	0x20014318
 8004c9c:	20012e58 	.word	0x20012e58

08004ca0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	; 0x28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	2b80      	cmp	r3, #128	; 0x80
 8004cb8:	d80a      	bhi.n	8004cd0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	1c59      	adds	r1, r3, #1
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6051      	str	r1, [r2, #4]
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b80      	cmp	r3, #128	; 0x80
 8004cd6:	d15a      	bne.n	8004d8e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	623b      	str	r3, [r7, #32]
 8004cf8:	e00b      	b.n	8004d12 <_StoreChar+0x72>
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	1c59      	adds	r1, r3, #1
 8004d02:	6279      	str	r1, [r7, #36]	; 0x24
 8004d04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	09db      	lsrs	r3, r3, #7
 8004d10:	623b      	str	r3, [r7, #32]
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	2b7f      	cmp	r3, #127	; 0x7f
 8004d16:	d8f0      	bhi.n	8004cfa <_StoreChar+0x5a>
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	627a      	str	r2, [r7, #36]	; 0x24
 8004d1e:	6a3a      	ldr	r2, [r7, #32]
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	e00b      	b.n	8004d4a <_StoreChar+0xaa>
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	1c59      	adds	r1, r3, #1
 8004d3a:	61f9      	str	r1, [r7, #28]
 8004d3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	09db      	lsrs	r3, r3, #7
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d4e:	d8f0      	bhi.n	8004d32 <_StoreChar+0x92>
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	61fa      	str	r2, [r7, #28]
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	221a      	movs	r2, #26
 8004d66:	6939      	ldr	r1, [r7, #16]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fe29 	bl	80049c0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fd36 	bl	80047e4 <_PreparePacket>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	611a      	str	r2, [r3, #16]
  }
}
 8004d8e:	bf00      	nop
 8004d90:	3728      	adds	r7, #40	; 0x28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004daa:	2301      	movs	r3, #1
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004dae:	2301      	movs	r3, #1
 8004db0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004db2:	e007      	b.n	8004dc4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004db4:	6a3a      	ldr	r2, [r7, #32]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	623b      	str	r3, [r7, #32]
    Width++;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004dc4:	6a3a      	ldr	r2, [r7, #32]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d2f3      	bcs.n	8004db4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d901      	bls.n	8004dd8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d11f      	bne.n	8004e22 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01c      	beq.n	8004e22 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <_PrintUnsigned+0x66>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d102      	bne.n	8004dfe <_PrintUnsigned+0x66>
        c = '0';
 8004df8:	2330      	movs	r3, #48	; 0x30
 8004dfa:	76fb      	strb	r3, [r7, #27]
 8004dfc:	e001      	b.n	8004e02 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004dfe:	2320      	movs	r3, #32
 8004e00:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e02:	e007      	b.n	8004e14 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	3b01      	subs	r3, #1
 8004e08:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004e0a:	7efb      	ldrb	r3, [r7, #27]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7ff ff46 	bl	8004ca0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <_PrintUnsigned+0x8a>
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d3f0      	bcc.n	8004e04 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d903      	bls.n	8004e30 <_PrintUnsigned+0x98>
      NumDigits--;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	603b      	str	r3, [r7, #0]
 8004e2e:	e009      	b.n	8004e44 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d200      	bcs.n	8004e44 <_PrintUnsigned+0xac>
        break;
 8004e42:	e005      	b.n	8004e50 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	fb02 f303 	mul.w	r3, r2, r3
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004e4e:	e7e8      	b.n	8004e22 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5e:	fb02 f303 	mul.w	r3, r2, r3
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <_PrintUnsigned+0x128>)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	4619      	mov	r1, r3
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff ff14 	bl	8004ca0 <_StoreChar>
    Digit /= Base;
 8004e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e3      	bne.n	8004e50 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d011      	beq.n	8004eb6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00e      	beq.n	8004eb6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e98:	e006      	b.n	8004ea8 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004ea0:	2120      	movs	r1, #32
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff fefc 	bl	8004ca0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <_PrintUnsigned+0x11e>
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d3f1      	bcc.n	8004e9a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	3728      	adds	r7, #40	; 0x28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	0800638c 	.word	0x0800638c

08004ec4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bfb8      	it	lt
 8004ed8:	425b      	neglt	r3, r3
 8004eda:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004edc:	2301      	movs	r3, #1
 8004ede:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004ee0:	e007      	b.n	8004ef2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004eea:	613b      	str	r3, [r7, #16]
    Width++;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	daf3      	bge.n	8004ee2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d901      	bls.n	8004f06 <_PrintInt+0x42>
    Width = NumDigits;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <_PrintInt+0x5e>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	db04      	blt.n	8004f1c <_PrintInt+0x58>
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <_PrintInt+0x5e>
    FieldWidth--;
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <_PrintInt+0x6e>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d016      	beq.n	8004f60 <_PrintInt+0x9c>
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d111      	bne.n	8004f60 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00e      	beq.n	8004f60 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004f42:	e006      	b.n	8004f52 <_PrintInt+0x8e>
        FieldWidth--;
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004f4a:	2120      	movs	r1, #32
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7ff fea7 	bl	8004ca0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <_PrintInt+0x9c>
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d3f1      	bcc.n	8004f44 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	da07      	bge.n	8004f76 <_PrintInt+0xb2>
    v = -v;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	425b      	negs	r3, r3
 8004f6a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004f6c:	212d      	movs	r1, #45	; 0x2d
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff fe96 	bl	8004ca0 <_StoreChar>
 8004f74:	e008      	b.n	8004f88 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004f80:	212b      	movs	r1, #43	; 0x2b
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff fe8c 	bl	8004ca0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d019      	beq.n	8004fc6 <_PrintInt+0x102>
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d114      	bne.n	8004fc6 <_PrintInt+0x102>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d111      	bne.n	8004fc6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00e      	beq.n	8004fc6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004fa8:	e006      	b.n	8004fb8 <_PrintInt+0xf4>
        FieldWidth--;
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004fb0:	2130      	movs	r1, #48	; 0x30
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7ff fe74 	bl	8004ca0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <_PrintInt+0x102>
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d3f1      	bcc.n	8004faa <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	9301      	str	r3, [sp, #4]
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff fedf 	bl	8004d98 <_PrintUnsigned>
}
 8004fda:	bf00      	nop
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b098      	sub	sp, #96	; 0x60
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ff0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff4:	f04f 0120 	mov.w	r1, #32
 8004ff8:	f381 8811 	msr	BASEPRI, r1
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ffe:	48b7      	ldr	r0, [pc, #732]	; (80052dc <_VPrintTarget+0x2f8>)
 8005000:	f7ff fbf0 	bl	80047e4 <_PreparePacket>
 8005004:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005006:	4bb5      	ldr	r3, [pc, #724]	; (80052dc <_VPrintTarget+0x2f8>)
 8005008:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 800500a:	2300      	movs	r3, #0
 800500c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	3301      	adds	r3, #1
 8005016:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3301      	adds	r3, #1
 8005028:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800502a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 81a8 	beq.w	8005384 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005038:	2b25      	cmp	r3, #37	; 0x25
 800503a:	f040 8195 	bne.w	8005368 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800503e:	2300      	movs	r3, #0
 8005040:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005042:	2301      	movs	r3, #1
 8005044:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800504e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005052:	3b23      	subs	r3, #35	; 0x23
 8005054:	2b0d      	cmp	r3, #13
 8005056:	d83f      	bhi.n	80050d8 <_VPrintTarget+0xf4>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <_VPrintTarget+0x7c>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	080050c9 	.word	0x080050c9
 8005064:	080050d9 	.word	0x080050d9
 8005068:	080050d9 	.word	0x080050d9
 800506c:	080050d9 	.word	0x080050d9
 8005070:	080050d9 	.word	0x080050d9
 8005074:	080050d9 	.word	0x080050d9
 8005078:	080050d9 	.word	0x080050d9
 800507c:	080050d9 	.word	0x080050d9
 8005080:	080050b9 	.word	0x080050b9
 8005084:	080050d9 	.word	0x080050d9
 8005088:	08005099 	.word	0x08005099
 800508c:	080050d9 	.word	0x080050d9
 8005090:	080050d9 	.word	0x080050d9
 8005094:	080050a9 	.word	0x080050a9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e01a      	b.n	80050de <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80050a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050aa:	f043 0302 	orr.w	r3, r3, #2
 80050ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3301      	adds	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e012      	b.n	80050de <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80050b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ba:	f043 0304 	orr.w	r3, r3, #4
 80050be:	64bb      	str	r3, [r7, #72]	; 0x48
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3301      	adds	r3, #1
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	e00a      	b.n	80050de <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80050c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ca:	f043 0308 	orr.w	r3, r3, #8
 80050ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3301      	adds	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e002      	b.n	80050de <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80050d8:	2300      	movs	r3, #0
 80050da:	653b      	str	r3, [r7, #80]	; 0x50
 80050dc:	bf00      	nop
        }
      } while (v);
 80050de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1b0      	bne.n	8005046 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80050e4:	2300      	movs	r3, #0
 80050e6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80050f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050f4:	2b2f      	cmp	r3, #47	; 0x2f
 80050f6:	d912      	bls.n	800511e <_VPrintTarget+0x13a>
 80050f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050fc:	2b39      	cmp	r3, #57	; 0x39
 80050fe:	d80e      	bhi.n	800511e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3301      	adds	r3, #1
 8005104:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	461a      	mov	r2, r3
 8005112:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005116:	4413      	add	r3, r2
 8005118:	3b30      	subs	r3, #48	; 0x30
 800511a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800511c:	e7e4      	b.n	80050e8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800511e:	2300      	movs	r3, #0
 8005120:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800512a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800512e:	2b2e      	cmp	r3, #46	; 0x2e
 8005130:	d11d      	bne.n	800516e <_VPrintTarget+0x18a>
        sFormat++;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3301      	adds	r3, #1
 8005136:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005144:	2b2f      	cmp	r3, #47	; 0x2f
 8005146:	d912      	bls.n	800516e <_VPrintTarget+0x18a>
 8005148:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800514c:	2b39      	cmp	r3, #57	; 0x39
 800514e:	d80e      	bhi.n	800516e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3301      	adds	r3, #1
 8005154:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	461a      	mov	r2, r3
 8005162:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005166:	4413      	add	r3, r2
 8005168:	3b30      	subs	r3, #48	; 0x30
 800516a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800516c:	e7e4      	b.n	8005138 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800517a:	2b6c      	cmp	r3, #108	; 0x6c
 800517c:	d003      	beq.n	8005186 <_VPrintTarget+0x1a2>
 800517e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005182:	2b68      	cmp	r3, #104	; 0x68
 8005184:	d107      	bne.n	8005196 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3301      	adds	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005194:	e7ef      	b.n	8005176 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005196:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800519a:	2b25      	cmp	r3, #37	; 0x25
 800519c:	f000 80d8 	beq.w	8005350 <_VPrintTarget+0x36c>
 80051a0:	2b25      	cmp	r3, #37	; 0x25
 80051a2:	f2c0 80dc 	blt.w	800535e <_VPrintTarget+0x37a>
 80051a6:	2b78      	cmp	r3, #120	; 0x78
 80051a8:	f300 80d9 	bgt.w	800535e <_VPrintTarget+0x37a>
 80051ac:	2b58      	cmp	r3, #88	; 0x58
 80051ae:	f2c0 80d6 	blt.w	800535e <_VPrintTarget+0x37a>
 80051b2:	3b58      	subs	r3, #88	; 0x58
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	f200 80d2 	bhi.w	800535e <_VPrintTarget+0x37a>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <_VPrintTarget+0x1dc>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080052b7 	.word	0x080052b7
 80051c4:	0800535f 	.word	0x0800535f
 80051c8:	0800535f 	.word	0x0800535f
 80051cc:	0800535f 	.word	0x0800535f
 80051d0:	0800535f 	.word	0x0800535f
 80051d4:	0800535f 	.word	0x0800535f
 80051d8:	0800535f 	.word	0x0800535f
 80051dc:	0800535f 	.word	0x0800535f
 80051e0:	0800535f 	.word	0x0800535f
 80051e4:	0800535f 	.word	0x0800535f
 80051e8:	0800535f 	.word	0x0800535f
 80051ec:	08005245 	.word	0x08005245
 80051f0:	0800526b 	.word	0x0800526b
 80051f4:	0800535f 	.word	0x0800535f
 80051f8:	0800535f 	.word	0x0800535f
 80051fc:	0800535f 	.word	0x0800535f
 8005200:	0800535f 	.word	0x0800535f
 8005204:	0800535f 	.word	0x0800535f
 8005208:	0800535f 	.word	0x0800535f
 800520c:	0800535f 	.word	0x0800535f
 8005210:	0800535f 	.word	0x0800535f
 8005214:	0800535f 	.word	0x0800535f
 8005218:	0800535f 	.word	0x0800535f
 800521c:	0800535f 	.word	0x0800535f
 8005220:	0800532b 	.word	0x0800532b
 8005224:	0800535f 	.word	0x0800535f
 8005228:	0800535f 	.word	0x0800535f
 800522c:	080052e1 	.word	0x080052e1
 8005230:	0800535f 	.word	0x0800535f
 8005234:	08005291 	.word	0x08005291
 8005238:	0800535f 	.word	0x0800535f
 800523c:	0800535f 	.word	0x0800535f
 8005240:	080052b7 	.word	0x080052b7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	1d19      	adds	r1, r3, #4
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6011      	str	r1, [r2, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005258:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800525c:	f107 0310 	add.w	r3, r7, #16
 8005260:	4611      	mov	r1, r2
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fd1c 	bl	8004ca0 <_StoreChar>
        break;
 8005268:	e07a      	b.n	8005360 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	1d19      	adds	r1, r3, #4
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6011      	str	r1, [r2, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005278:	f107 0010 	add.w	r0, r7, #16
 800527c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005286:	220a      	movs	r2, #10
 8005288:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800528a:	f7ff fe1b 	bl	8004ec4 <_PrintInt>
        break;
 800528e:	e067      	b.n	8005360 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	1d19      	adds	r1, r3, #4
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800529e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052a0:	f107 0010 	add.w	r0, r7, #16
 80052a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a6:	9301      	str	r3, [sp, #4]
 80052a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ae:	220a      	movs	r2, #10
 80052b0:	f7ff fd72 	bl	8004d98 <_PrintUnsigned>
        break;
 80052b4:	e054      	b.n	8005360 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	1d19      	adds	r1, r3, #4
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6011      	str	r1, [r2, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80052c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052c6:	f107 0010 	add.w	r0, r7, #16
 80052ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d4:	2210      	movs	r2, #16
 80052d6:	f7ff fd5f 	bl	8004d98 <_PrintUnsigned>
        break;
 80052da:	e041      	b.n	8005360 <_VPrintTarget+0x37c>
 80052dc:	20014348 	.word	0x20014348
      case 's':
        s = va_arg(*pParamList, const char*);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	1d19      	adds	r1, r3, #4
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6011      	str	r1, [r2, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 80052ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <_VPrintTarget+0x314>
          s = "(null)";
 80052f4:	4b4a      	ldr	r3, [pc, #296]	; (8005420 <_VPrintTarget+0x43c>)
 80052f6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 80052f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005302:	3301      	adds	r3, #1
 8005304:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005306:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00b      	beq.n	8005326 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800530e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005312:	f107 0310 	add.w	r3, r7, #16
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff fcc1 	bl	8004ca0 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	2b7f      	cmp	r3, #127	; 0x7f
 8005322:	d9e9      	bls.n	80052f8 <_VPrintTarget+0x314>
        break;
 8005324:	e01c      	b.n	8005360 <_VPrintTarget+0x37c>
            break;
 8005326:	bf00      	nop
        break;
 8005328:	e01a      	b.n	8005360 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	1d19      	adds	r1, r3, #4
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6011      	str	r1, [r2, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005338:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800533a:	f107 0010 	add.w	r0, r7, #16
 800533e:	2300      	movs	r3, #0
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	2308      	movs	r3, #8
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	2308      	movs	r3, #8
 8005348:	2210      	movs	r2, #16
 800534a:	f7ff fd25 	bl	8004d98 <_PrintUnsigned>
        break;
 800534e:	e007      	b.n	8005360 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005350:	f107 0310 	add.w	r3, r7, #16
 8005354:	2125      	movs	r1, #37	; 0x25
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fca2 	bl	8004ca0 <_StoreChar>
        break;
 800535c:	e000      	b.n	8005360 <_VPrintTarget+0x37c>
      default:
        break;
 800535e:	bf00      	nop
      }
      sFormat++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	3301      	adds	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	e007      	b.n	8005378 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005368:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800536c:	f107 0310 	add.w	r3, r7, #16
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fc94 	bl	8004ca0 <_StoreChar>
    }
  } while (*sFormat);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	f47f ae4d 	bne.w	800501c <_VPrintTarget+0x38>
 8005382:	e000      	b.n	8005386 <_VPrintTarget+0x3a2>
      break;
 8005384:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d041      	beq.n	8005410 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800538c:	6a3a      	ldr	r2, [r7, #32]
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	63bb      	str	r3, [r7, #56]	; 0x38
 800539c:	e00b      	b.n	80053b6 <_VPrintTarget+0x3d2>
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a4:	1c59      	adds	r1, r3, #1
 80053a6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80053a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	09db      	lsrs	r3, r3, #7
 80053b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	2b7f      	cmp	r3, #127	; 0x7f
 80053ba:	d8f0      	bhi.n	800539e <_VPrintTarget+0x3ba>
 80053bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80053c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ca:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	637b      	str	r3, [r7, #52]	; 0x34
 80053d0:	2300      	movs	r3, #0
 80053d2:	633b      	str	r3, [r7, #48]	; 0x30
 80053d4:	e00b      	b.n	80053ee <_VPrintTarget+0x40a>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053dc:	1c59      	adds	r1, r3, #1
 80053de:	6379      	str	r1, [r7, #52]	; 0x34
 80053e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	09db      	lsrs	r3, r3, #7
 80053ec:	633b      	str	r3, [r7, #48]	; 0x30
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	2b7f      	cmp	r3, #127	; 0x7f
 80053f2:	d8f0      	bhi.n	80053d6 <_VPrintTarget+0x3f2>
 80053f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	637a      	str	r2, [r7, #52]	; 0x34
 80053fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	701a      	strb	r2, [r3, #0]
 8005400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005402:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	6979      	ldr	r1, [r7, #20]
 8005408:	221a      	movs	r2, #26
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff fad8 	bl	80049c0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005416:	bf00      	nop
 8005418:	3758      	adds	r7, #88	; 0x58
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	08006338 	.word	0x08006338

08005424 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005432:	2300      	movs	r3, #0
 8005434:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005438:	4917      	ldr	r1, [pc, #92]	; (8005498 <SEGGER_SYSVIEW_Init+0x74>)
 800543a:	4818      	ldr	r0, [pc, #96]	; (800549c <SEGGER_SYSVIEW_Init+0x78>)
 800543c:	f7ff f8d2 	bl	80045e4 <SEGGER_RTT_AllocUpBuffer>
 8005440:	4603      	mov	r3, r0
 8005442:	b2da      	uxtb	r2, r3
 8005444:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005446:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005448:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800544a:	785a      	ldrb	r2, [r3, #1]
 800544c:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800544e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005450:	4b13      	ldr	r3, [pc, #76]	; (80054a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005452:	7e1b      	ldrb	r3, [r3, #24]
 8005454:	4618      	mov	r0, r3
 8005456:	2300      	movs	r3, #0
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	2308      	movs	r3, #8
 800545c:	4a11      	ldr	r2, [pc, #68]	; (80054a4 <SEGGER_SYSVIEW_Init+0x80>)
 800545e:	490f      	ldr	r1, [pc, #60]	; (800549c <SEGGER_SYSVIEW_Init+0x78>)
 8005460:	f7ff f944 	bl	80046ec <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005464:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005466:	2200      	movs	r2, #0
 8005468:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800546a:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <SEGGER_SYSVIEW_Init+0x84>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a0c      	ldr	r2, [pc, #48]	; (80054a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005470:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005472:	4a0b      	ldr	r2, [pc, #44]	; (80054a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800547e:	4a08      	ldr	r2, [pc, #32]	; (80054a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005484:	4a06      	ldr	r2, [pc, #24]	; (80054a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800548a:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005490:	bf00      	nop
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20013310 	.word	0x20013310
 800549c:	08006340 	.word	0x08006340
 80054a0:	20014318 	.word	0x20014318
 80054a4:	20014310 	.word	0x20014310
 80054a8:	e0001004 	.word	0xe0001004

080054ac <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80054b4:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6113      	str	r3, [r2, #16]
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20014318 	.word	0x20014318

080054cc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054d4:	f3ef 8311 	mrs	r3, BASEPRI
 80054d8:	f04f 0120 	mov.w	r1, #32
 80054dc:	f381 8811 	msr	BASEPRI, r1
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	4808      	ldr	r0, [pc, #32]	; (8005504 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80054e4:	f7ff f97e 	bl	80047e4 <_PreparePacket>
 80054e8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	68b9      	ldr	r1, [r7, #8]
 80054ee:	68b8      	ldr	r0, [r7, #8]
 80054f0:	f7ff fa66 	bl	80049c0 <_SendPacket>
  RECORD_END();
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f383 8811 	msr	BASEPRI, r3
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20014348 	.word	0x20014348

08005508 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005512:	f3ef 8311 	mrs	r3, BASEPRI
 8005516:	f04f 0120 	mov.w	r1, #32
 800551a:	f381 8811 	msr	BASEPRI, r1
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	4816      	ldr	r0, [pc, #88]	; (800557c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005522:	f7ff f95f 	bl	80047e4 <_PreparePacket>
 8005526:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	e00b      	b.n	800554e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	b2da      	uxtb	r2, r3
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	1c59      	adds	r1, r3, #1
 800553e:	61f9      	str	r1, [r7, #28]
 8005540:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	09db      	lsrs	r3, r3, #7
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b7f      	cmp	r3, #127	; 0x7f
 8005552:	d8f0      	bhi.n	8005536 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	61fa      	str	r2, [r7, #28]
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	701a      	strb	r2, [r3, #0]
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	68f9      	ldr	r1, [r7, #12]
 8005568:	6938      	ldr	r0, [r7, #16]
 800556a:	f7ff fa29 	bl	80049c0 <_SendPacket>
  RECORD_END();
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f383 8811 	msr	BASEPRI, r3
}
 8005574:	bf00      	nop
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20014348 	.word	0x20014348

08005580 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b08c      	sub	sp, #48	; 0x30
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800558c:	f3ef 8311 	mrs	r3, BASEPRI
 8005590:	f04f 0120 	mov.w	r1, #32
 8005594:	f381 8811 	msr	BASEPRI, r1
 8005598:	61fb      	str	r3, [r7, #28]
 800559a:	4825      	ldr	r0, [pc, #148]	; (8005630 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800559c:	f7ff f922 	bl	80047e4 <_PreparePacket>
 80055a0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ae:	e00b      	b.n	80055c8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b6:	1c59      	adds	r1, r3, #1
 80055b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	09db      	lsrs	r3, r3, #7
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	2b7f      	cmp	r3, #127	; 0x7f
 80055cc:	d8f0      	bhi.n	80055b0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80055ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055dc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	623b      	str	r3, [r7, #32]
 80055e6:	e00b      	b.n	8005600 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	1c59      	adds	r1, r3, #1
 80055f0:	6279      	str	r1, [r7, #36]	; 0x24
 80055f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	09db      	lsrs	r3, r3, #7
 80055fe:	623b      	str	r3, [r7, #32]
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	2b7f      	cmp	r3, #127	; 0x7f
 8005604:	d8f0      	bhi.n	80055e8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	627a      	str	r2, [r7, #36]	; 0x24
 800560c:	6a3a      	ldr	r2, [r7, #32]
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	6979      	ldr	r1, [r7, #20]
 800561a:	69b8      	ldr	r0, [r7, #24]
 800561c:	f7ff f9d0 	bl	80049c0 <_SendPacket>
  RECORD_END();
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f383 8811 	msr	BASEPRI, r3
}
 8005626:	bf00      	nop
 8005628:	3730      	adds	r7, #48	; 0x30
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20014348 	.word	0x20014348

08005634 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b08c      	sub	sp, #48	; 0x30
 8005638:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800563a:	4b59      	ldr	r3, [pc, #356]	; (80057a0 <SEGGER_SYSVIEW_Start+0x16c>)
 800563c:	2201      	movs	r2, #1
 800563e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005640:	f3ef 8311 	mrs	r3, BASEPRI
 8005644:	f04f 0120 	mov.w	r1, #32
 8005648:	f381 8811 	msr	BASEPRI, r1
 800564c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800564e:	4b54      	ldr	r3, [pc, #336]	; (80057a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005650:	785b      	ldrb	r3, [r3, #1]
 8005652:	220a      	movs	r2, #10
 8005654:	4953      	ldr	r1, [pc, #332]	; (80057a4 <SEGGER_SYSVIEW_Start+0x170>)
 8005656:	4618      	mov	r0, r3
 8005658:	f7fa fdca 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005662:	f7fe fc8f 	bl	8003f84 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005666:	200a      	movs	r0, #10
 8005668:	f7ff ff30 	bl	80054cc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800566c:	f3ef 8311 	mrs	r3, BASEPRI
 8005670:	f04f 0120 	mov.w	r1, #32
 8005674:	f381 8811 	msr	BASEPRI, r1
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	484b      	ldr	r0, [pc, #300]	; (80057a8 <SEGGER_SYSVIEW_Start+0x174>)
 800567c:	f7ff f8b2 	bl	80047e4 <_PreparePacket>
 8005680:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800568a:	4b45      	ldr	r3, [pc, #276]	; (80057a0 <SEGGER_SYSVIEW_Start+0x16c>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005690:	e00b      	b.n	80056aa <SEGGER_SYSVIEW_Start+0x76>
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	b2da      	uxtb	r2, r3
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	1c59      	adds	r1, r3, #1
 800569a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800569c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	09db      	lsrs	r3, r3, #7
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	2b7f      	cmp	r3, #127	; 0x7f
 80056ae:	d8f0      	bhi.n	8005692 <SEGGER_SYSVIEW_Start+0x5e>
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
 80056c4:	4b36      	ldr	r3, [pc, #216]	; (80057a0 <SEGGER_SYSVIEW_Start+0x16c>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	623b      	str	r3, [r7, #32]
 80056ca:	e00b      	b.n	80056e4 <SEGGER_SYSVIEW_Start+0xb0>
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	1c59      	adds	r1, r3, #1
 80056d4:	6279      	str	r1, [r7, #36]	; 0x24
 80056d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	09db      	lsrs	r3, r3, #7
 80056e2:	623b      	str	r3, [r7, #32]
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	2b7f      	cmp	r3, #127	; 0x7f
 80056e8:	d8f0      	bhi.n	80056cc <SEGGER_SYSVIEW_Start+0x98>
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	627a      	str	r2, [r7, #36]	; 0x24
 80056f0:	6a3a      	ldr	r2, [r7, #32]
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	4b28      	ldr	r3, [pc, #160]	; (80057a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	e00b      	b.n	800571e <SEGGER_SYSVIEW_Start+0xea>
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	1c59      	adds	r1, r3, #1
 800570e:	61f9      	str	r1, [r7, #28]
 8005710:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	09db      	lsrs	r3, r3, #7
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b7f      	cmp	r3, #127	; 0x7f
 8005722:	d8f0      	bhi.n	8005706 <SEGGER_SYSVIEW_Start+0xd2>
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	61fa      	str	r2, [r7, #28]
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	b2d2      	uxtb	r2, r2
 800572e:	701a      	strb	r2, [r3, #0]
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	e00b      	b.n	8005756 <SEGGER_SYSVIEW_Start+0x122>
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	b2da      	uxtb	r2, r3
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	1c59      	adds	r1, r3, #1
 8005746:	6179      	str	r1, [r7, #20]
 8005748:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	09db      	lsrs	r3, r3, #7
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b7f      	cmp	r3, #127	; 0x7f
 800575a:	d8f0      	bhi.n	800573e <SEGGER_SYSVIEW_Start+0x10a>
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	617a      	str	r2, [r7, #20]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800576c:	2218      	movs	r2, #24
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff f925 	bl	80049c0 <_SendPacket>
      RECORD_END();
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800577c:	4b08      	ldr	r3, [pc, #32]	; (80057a0 <SEGGER_SYSVIEW_Start+0x16c>)
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005784:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800578a:	f000 f9eb 	bl	8005b64 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800578e:	f000 f9b1 	bl	8005af4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005792:	f000 fc1d 	bl	8005fd0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005796:	bf00      	nop
 8005798:	3730      	adds	r7, #48	; 0x30
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20014318 	.word	0x20014318
 80057a4:	08006380 	.word	0x08006380
 80057a8:	20014348 	.word	0x20014348

080057ac <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80057b2:	f3ef 8311 	mrs	r3, BASEPRI
 80057b6:	f04f 0120 	mov.w	r1, #32
 80057ba:	f381 8811 	msr	BASEPRI, r1
 80057be:	607b      	str	r3, [r7, #4]
 80057c0:	480b      	ldr	r0, [pc, #44]	; (80057f0 <SEGGER_SYSVIEW_Stop+0x44>)
 80057c2:	f7ff f80f 	bl	80047e4 <_PreparePacket>
 80057c6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80057d0:	220b      	movs	r2, #11
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	6838      	ldr	r0, [r7, #0]
 80057d6:	f7ff f8f3 	bl	80049c0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <SEGGER_SYSVIEW_Stop+0x48>)
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f383 8811 	msr	BASEPRI, r3
}
 80057e6:	bf00      	nop
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20014348 	.word	0x20014348
 80057f4:	20014318 	.word	0x20014318

080057f8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08c      	sub	sp, #48	; 0x30
 80057fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80057fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005802:	f04f 0120 	mov.w	r1, #32
 8005806:	f381 8811 	msr	BASEPRI, r1
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	4845      	ldr	r0, [pc, #276]	; (8005924 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800580e:	f7fe ffe9 	bl	80047e4 <_PreparePacket>
 8005812:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800581c:	4b42      	ldr	r3, [pc, #264]	; (8005928 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
 8005822:	e00b      	b.n	800583c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	b2da      	uxtb	r2, r3
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	1c59      	adds	r1, r3, #1
 800582c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800582e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005838:	09db      	lsrs	r3, r3, #7
 800583a:	62bb      	str	r3, [r7, #40]	; 0x28
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	2b7f      	cmp	r3, #127	; 0x7f
 8005840:	d8f0      	bhi.n	8005824 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005850:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
 8005856:	4b34      	ldr	r3, [pc, #208]	; (8005928 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	623b      	str	r3, [r7, #32]
 800585c:	e00b      	b.n	8005876 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	1c59      	adds	r1, r3, #1
 8005866:	6279      	str	r1, [r7, #36]	; 0x24
 8005868:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	09db      	lsrs	r3, r3, #7
 8005874:	623b      	str	r3, [r7, #32]
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	2b7f      	cmp	r3, #127	; 0x7f
 800587a:	d8f0      	bhi.n	800585e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	627a      	str	r2, [r7, #36]	; 0x24
 8005882:	6a3a      	ldr	r2, [r7, #32]
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	4b25      	ldr	r3, [pc, #148]	; (8005928 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	e00b      	b.n	80058b0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	b2da      	uxtb	r2, r3
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	1c59      	adds	r1, r3, #1
 80058a0:	61f9      	str	r1, [r7, #28]
 80058a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	09db      	lsrs	r3, r3, #7
 80058ae:	61bb      	str	r3, [r7, #24]
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	2b7f      	cmp	r3, #127	; 0x7f
 80058b4:	d8f0      	bhi.n	8005898 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	61fa      	str	r2, [r7, #28]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	e00b      	b.n	80058e8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	1c59      	adds	r1, r3, #1
 80058d8:	6179      	str	r1, [r7, #20]
 80058da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	09db      	lsrs	r3, r3, #7
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b7f      	cmp	r3, #127	; 0x7f
 80058ec:	d8f0      	bhi.n	80058d0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	617a      	str	r2, [r7, #20]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80058fe:	2218      	movs	r2, #24
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	68b8      	ldr	r0, [r7, #8]
 8005904:	f7ff f85c 	bl	80049c0 <_SendPacket>
  RECORD_END();
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800590e:	4b06      	ldr	r3, [pc, #24]	; (8005928 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005916:	4b04      	ldr	r3, [pc, #16]	; (8005928 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	4798      	blx	r3
  }
}
 800591c:	bf00      	nop
 800591e:	3730      	adds	r7, #48	; 0x30
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20014348 	.word	0x20014348
 8005928:	20014318 	.word	0x20014318

0800592c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b092      	sub	sp, #72	; 0x48
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005934:	f3ef 8311 	mrs	r3, BASEPRI
 8005938:	f04f 0120 	mov.w	r1, #32
 800593c:	f381 8811 	msr	BASEPRI, r1
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	486a      	ldr	r0, [pc, #424]	; (8005aec <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005944:	f7fe ff4e 	bl	80047e4 <_PreparePacket>
 8005948:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	647b      	str	r3, [r7, #68]	; 0x44
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b66      	ldr	r3, [pc, #408]	; (8005af0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	643b      	str	r3, [r7, #64]	; 0x40
 800595e:	e00b      	b.n	8005978 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005962:	b2da      	uxtb	r2, r3
 8005964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005966:	1c59      	adds	r1, r3, #1
 8005968:	6479      	str	r1, [r7, #68]	; 0x44
 800596a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005974:	09db      	lsrs	r3, r3, #7
 8005976:	643b      	str	r3, [r7, #64]	; 0x40
 8005978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800597a:	2b7f      	cmp	r3, #127	; 0x7f
 800597c:	d8f0      	bhi.n	8005960 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800597e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	647a      	str	r2, [r7, #68]	; 0x44
 8005984:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800598c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	63bb      	str	r3, [r7, #56]	; 0x38
 8005998:	e00b      	b.n	80059b2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	b2da      	uxtb	r2, r3
 800599e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a0:	1c59      	adds	r1, r3, #1
 80059a2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80059a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	09db      	lsrs	r3, r3, #7
 80059b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	2b7f      	cmp	r3, #127	; 0x7f
 80059b6:	d8f0      	bhi.n	800599a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80059b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	4619      	mov	r1, r3
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7fe fed7 	bl	8004784 <_EncodeStr>
 80059d6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80059d8:	2209      	movs	r2, #9
 80059da:	68f9      	ldr	r1, [r7, #12]
 80059dc:	6938      	ldr	r0, [r7, #16]
 80059de:	f7fe ffef 	bl	80049c0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4b40      	ldr	r3, [pc, #256]	; (8005af0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	633b      	str	r3, [r7, #48]	; 0x30
 80059f6:	e00b      	b.n	8005a10 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fe:	1c59      	adds	r1, r3, #1
 8005a00:	6379      	str	r1, [r7, #52]	; 0x34
 8005a02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	09db      	lsrs	r3, r3, #7
 8005a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	2b7f      	cmp	r3, #127	; 0x7f
 8005a14:	d8f0      	bhi.n	80059f8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	637a      	str	r2, [r7, #52]	; 0x34
 8005a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a30:	e00b      	b.n	8005a4a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	1c59      	adds	r1, r3, #1
 8005a3a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	09db      	lsrs	r3, r3, #7
 8005a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a4e:	d8f0      	bhi.n	8005a32 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	623b      	str	r3, [r7, #32]
 8005a6a:	e00b      	b.n	8005a84 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	1c59      	adds	r1, r3, #1
 8005a74:	6279      	str	r1, [r7, #36]	; 0x24
 8005a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	09db      	lsrs	r3, r3, #7
 8005a82:	623b      	str	r3, [r7, #32]
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	2b7f      	cmp	r3, #127	; 0x7f
 8005a88:	d8f0      	bhi.n	8005a6c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	627a      	str	r2, [r7, #36]	; 0x24
 8005a90:	6a3a      	ldr	r2, [r7, #32]
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	e00b      	b.n	8005abc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	1c59      	adds	r1, r3, #1
 8005aac:	61f9      	str	r1, [r7, #28]
 8005aae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	09db      	lsrs	r3, r3, #7
 8005aba:	61bb      	str	r3, [r7, #24]
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac0:	d8f0      	bhi.n	8005aa4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	61fa      	str	r2, [r7, #28]
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005ad2:	2215      	movs	r2, #21
 8005ad4:	68f9      	ldr	r1, [r7, #12]
 8005ad6:	6938      	ldr	r0, [r7, #16]
 8005ad8:	f7fe ff72 	bl	80049c0 <_SendPacket>
  RECORD_END();
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f383 8811 	msr	BASEPRI, r3
}
 8005ae2:	bf00      	nop
 8005ae4:	3748      	adds	r7, #72	; 0x48
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20014348 	.word	0x20014348
 8005af0:	20014318 	.word	0x20014318

08005af4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005af8:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d008      	beq.n	8005b12 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005b00:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005b0a:	4b03      	ldr	r3, [pc, #12]	; (8005b18 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4798      	blx	r3
  }
}
 8005b12:	bf00      	nop
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20014318 	.word	0x20014318

08005b1c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b24:	f3ef 8311 	mrs	r3, BASEPRI
 8005b28:	f04f 0120 	mov.w	r1, #32
 8005b2c:	f381 8811 	msr	BASEPRI, r1
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	480b      	ldr	r0, [pc, #44]	; (8005b60 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005b34:	f7fe fe56 	bl	80047e4 <_PreparePacket>
 8005b38:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b3a:	2280      	movs	r2, #128	; 0x80
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	6938      	ldr	r0, [r7, #16]
 8005b40:	f7fe fe20 	bl	8004784 <_EncodeStr>
 8005b44:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005b46:	220e      	movs	r2, #14
 8005b48:	68f9      	ldr	r1, [r7, #12]
 8005b4a:	6938      	ldr	r0, [r7, #16]
 8005b4c:	f7fe ff38 	bl	80049c0 <_SendPacket>
  RECORD_END();
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f383 8811 	msr	BASEPRI, r3
}
 8005b56:	bf00      	nop
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20014348 	.word	0x20014348

08005b64 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005b64:	b590      	push	{r4, r7, lr}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005b6a:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d01a      	beq.n	8005ba8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005b72:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d015      	beq.n	8005ba8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005b7c:	4b10      	ldr	r3, [pc, #64]	; (8005bc0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4798      	blx	r3
 8005b84:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005b88:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005b8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	000a      	movs	r2, r1
 8005b98:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	200d      	movs	r0, #13
 8005ba2:	f7ff fced 	bl	8005580 <SEGGER_SYSVIEW_RecordU32x2>
 8005ba6:	e006      	b.n	8005bb6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4619      	mov	r1, r3
 8005bae:	200c      	movs	r0, #12
 8005bb0:	f7ff fcaa 	bl	8005508 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd90      	pop	{r4, r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20014318 	.word	0x20014318
 8005bc4:	e0001004 	.word	0xe0001004

08005bc8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005bce:	f3ef 8311 	mrs	r3, BASEPRI
 8005bd2:	f04f 0120 	mov.w	r1, #32
 8005bd6:	f381 8811 	msr	BASEPRI, r1
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	4819      	ldr	r0, [pc, #100]	; (8005c44 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005bde:	f7fe fe01 	bl	80047e4 <_PreparePacket>
 8005be2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005be8:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	e00b      	b.n	8005c14 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	1c59      	adds	r1, r3, #1
 8005c04:	6179      	str	r1, [r7, #20]
 8005c06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	09db      	lsrs	r3, r3, #7
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b7f      	cmp	r3, #127	; 0x7f
 8005c18:	d8f0      	bhi.n	8005bfc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	617a      	str	r2, [r7, #20]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	68b8      	ldr	r0, [r7, #8]
 8005c30:	f7fe fec6 	bl	80049c0 <_SendPacket>
  RECORD_END();
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f383 8811 	msr	BASEPRI, r3
}
 8005c3a:	bf00      	nop
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20014348 	.word	0x20014348
 8005c48:	e000ed04 	.word	0xe000ed04

08005c4c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c52:	f3ef 8311 	mrs	r3, BASEPRI
 8005c56:	f04f 0120 	mov.w	r1, #32
 8005c5a:	f381 8811 	msr	BASEPRI, r1
 8005c5e:	607b      	str	r3, [r7, #4]
 8005c60:	4807      	ldr	r0, [pc, #28]	; (8005c80 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005c62:	f7fe fdbf 	bl	80047e4 <_PreparePacket>
 8005c66:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005c68:	2203      	movs	r2, #3
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	6838      	ldr	r0, [r7, #0]
 8005c6e:	f7fe fea7 	bl	80049c0 <_SendPacket>
  RECORD_END();
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f383 8811 	msr	BASEPRI, r3
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20014348 	.word	0x20014348

08005c84 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c8e:	f04f 0120 	mov.w	r1, #32
 8005c92:	f381 8811 	msr	BASEPRI, r1
 8005c96:	607b      	str	r3, [r7, #4]
 8005c98:	4807      	ldr	r0, [pc, #28]	; (8005cb8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005c9a:	f7fe fda3 	bl	80047e4 <_PreparePacket>
 8005c9e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005ca0:	2212      	movs	r2, #18
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6838      	ldr	r0, [r7, #0]
 8005ca6:	f7fe fe8b 	bl	80049c0 <_SendPacket>
  RECORD_END();
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f383 8811 	msr	BASEPRI, r3
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	20014348 	.word	0x20014348

08005cbc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8005cc6:	f04f 0120 	mov.w	r1, #32
 8005cca:	f381 8811 	msr	BASEPRI, r1
 8005cce:	607b      	str	r3, [r7, #4]
 8005cd0:	4807      	ldr	r0, [pc, #28]	; (8005cf0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005cd2:	f7fe fd87 	bl	80047e4 <_PreparePacket>
 8005cd6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005cd8:	2211      	movs	r2, #17
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	6838      	ldr	r0, [r7, #0]
 8005cde:	f7fe fe6f 	bl	80049c0 <_SendPacket>
  RECORD_END();
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f383 8811 	msr	BASEPRI, r3
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20014348 	.word	0x20014348

08005cf4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8005d00:	f04f 0120 	mov.w	r1, #32
 8005d04:	f381 8811 	msr	BASEPRI, r1
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	4819      	ldr	r0, [pc, #100]	; (8005d70 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005d0c:	f7fe fd6a 	bl	80047e4 <_PreparePacket>
 8005d10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005d16:	4b17      	ldr	r3, [pc, #92]	; (8005d74 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	e00b      	b.n	8005d42 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	1c59      	adds	r1, r3, #1
 8005d32:	61f9      	str	r1, [r7, #28]
 8005d34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	09db      	lsrs	r3, r3, #7
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b7f      	cmp	r3, #127	; 0x7f
 8005d46:	d8f0      	bhi.n	8005d2a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	61fa      	str	r2, [r7, #28]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	701a      	strb	r2, [r3, #0]
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005d58:	2208      	movs	r2, #8
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	6938      	ldr	r0, [r7, #16]
 8005d5e:	f7fe fe2f 	bl	80049c0 <_SendPacket>
  RECORD_END();
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f383 8811 	msr	BASEPRI, r3
}
 8005d68:	bf00      	nop
 8005d6a:	3720      	adds	r7, #32
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	20014348 	.word	0x20014348
 8005d74:	20014318 	.word	0x20014318

08005d78 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d80:	f3ef 8311 	mrs	r3, BASEPRI
 8005d84:	f04f 0120 	mov.w	r1, #32
 8005d88:	f381 8811 	msr	BASEPRI, r1
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	4819      	ldr	r0, [pc, #100]	; (8005df4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005d90:	f7fe fd28 	bl	80047e4 <_PreparePacket>
 8005d94:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005d9a:	4b17      	ldr	r3, [pc, #92]	; (8005df8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	61bb      	str	r3, [r7, #24]
 8005dac:	e00b      	b.n	8005dc6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	1c59      	adds	r1, r3, #1
 8005db6:	61f9      	str	r1, [r7, #28]
 8005db8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	09db      	lsrs	r3, r3, #7
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8005dca:	d8f0      	bhi.n	8005dae <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	61fa      	str	r2, [r7, #28]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	701a      	strb	r2, [r3, #0]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005ddc:	2204      	movs	r2, #4
 8005dde:	68f9      	ldr	r1, [r7, #12]
 8005de0:	6938      	ldr	r0, [r7, #16]
 8005de2:	f7fe fded 	bl	80049c0 <_SendPacket>
  RECORD_END();
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f383 8811 	msr	BASEPRI, r3
}
 8005dec:	bf00      	nop
 8005dee:	3720      	adds	r7, #32
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	20014348 	.word	0x20014348
 8005df8:	20014318 	.word	0x20014318

08005dfc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e04:	f3ef 8311 	mrs	r3, BASEPRI
 8005e08:	f04f 0120 	mov.w	r1, #32
 8005e0c:	f381 8811 	msr	BASEPRI, r1
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	4819      	ldr	r0, [pc, #100]	; (8005e78 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005e14:	f7fe fce6 	bl	80047e4 <_PreparePacket>
 8005e18:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005e1e:	4b17      	ldr	r3, [pc, #92]	; (8005e7c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	61fb      	str	r3, [r7, #28]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	e00b      	b.n	8005e4a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	1c59      	adds	r1, r3, #1
 8005e3a:	61f9      	str	r1, [r7, #28]
 8005e3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	701a      	strb	r2, [r3, #0]
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	09db      	lsrs	r3, r3, #7
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e4e:	d8f0      	bhi.n	8005e32 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	61fa      	str	r2, [r7, #28]
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005e60:	2206      	movs	r2, #6
 8005e62:	68f9      	ldr	r1, [r7, #12]
 8005e64:	6938      	ldr	r0, [r7, #16]
 8005e66:	f7fe fdab 	bl	80049c0 <_SendPacket>
  RECORD_END();
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f383 8811 	msr	BASEPRI, r3
}
 8005e70:	bf00      	nop
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20014348 	.word	0x20014348
 8005e7c:	20014318 	.word	0x20014318

08005e80 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08c      	sub	sp, #48	; 0x30
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005e8a:	4b40      	ldr	r3, [pc, #256]	; (8005f8c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d077      	beq.n	8005f82 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005e92:	4b3e      	ldr	r3, [pc, #248]	; (8005f8c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005e98:	2300      	movs	r3, #0
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e9c:	e008      	b.n	8005eb0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d007      	beq.n	8005eba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	3301      	adds	r3, #1
 8005eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d3f2      	bcc.n	8005e9e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005eb8:	e000      	b.n	8005ebc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005eba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d055      	beq.n	8005f6e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ec2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ec6:	f04f 0120 	mov.w	r1, #32
 8005eca:	f381 8811 	msr	BASEPRI, r1
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	482f      	ldr	r0, [pc, #188]	; (8005f90 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005ed2:	f7fe fc87 	bl	80047e4 <_PreparePacket>
 8005ed6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	623b      	str	r3, [r7, #32]
 8005ee4:	e00b      	b.n	8005efe <SEGGER_SYSVIEW_SendModule+0x7e>
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	1c59      	adds	r1, r3, #1
 8005eee:	6279      	str	r1, [r7, #36]	; 0x24
 8005ef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	09db      	lsrs	r3, r3, #7
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	2b7f      	cmp	r3, #127	; 0x7f
 8005f02:	d8f0      	bhi.n	8005ee6 <SEGGER_SYSVIEW_SendModule+0x66>
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	627a      	str	r2, [r7, #36]	; 0x24
 8005f0a:	6a3a      	ldr	r2, [r7, #32]
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	61fb      	str	r3, [r7, #28]
 8005f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	e00b      	b.n	8005f38 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	1c59      	adds	r1, r3, #1
 8005f28:	61f9      	str	r1, [r7, #28]
 8005f2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	09db      	lsrs	r3, r3, #7
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f3c:	d8f0      	bhi.n	8005f20 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	61fa      	str	r2, [r7, #28]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2280      	movs	r2, #128	; 0x80
 8005f54:	4619      	mov	r1, r3
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7fe fc14 	bl	8004784 <_EncodeStr>
 8005f5c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005f5e:	2216      	movs	r2, #22
 8005f60:	68f9      	ldr	r1, [r7, #12]
 8005f62:	6938      	ldr	r0, [r7, #16]
 8005f64:	f7fe fd2c 	bl	80049c0 <_SendPacket>
      RECORD_END();
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <SEGGER_SYSVIEW_SendModule+0x102>
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4798      	blx	r3
    }
  }
}
 8005f82:	bf00      	nop
 8005f84:	3730      	adds	r7, #48	; 0x30
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20014340 	.word	0x20014340
 8005f90:	20014348 	.word	0x20014348

08005f94 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005f9a:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00f      	beq.n	8005fc2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005fa2:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f2      	bne.n	8005fa8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20014340 	.word	0x20014340

08005fd0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fda:	f04f 0120 	mov.w	r1, #32
 8005fde:	f381 8811 	msr	BASEPRI, r1
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	4817      	ldr	r0, [pc, #92]	; (8006044 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005fe6:	f7fe fbfd 	bl	80047e4 <_PreparePacket>
 8005fea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	4b14      	ldr	r3, [pc, #80]	; (8006048 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	e00b      	b.n	8006014 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	6179      	str	r1, [r7, #20]
 8006006:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	09db      	lsrs	r3, r3, #7
 8006012:	613b      	str	r3, [r7, #16]
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b7f      	cmp	r3, #127	; 0x7f
 8006018:	d8f0      	bhi.n	8005ffc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	617a      	str	r2, [r7, #20]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800602a:	221b      	movs	r2, #27
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	68b8      	ldr	r0, [r7, #8]
 8006030:	f7fe fcc6 	bl	80049c0 <_SendPacket>
  RECORD_END();
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f383 8811 	msr	BASEPRI, r3
}
 800603a:	bf00      	nop
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20014348 	.word	0x20014348
 8006048:	20014344 	.word	0x20014344

0800604c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800604c:	b40f      	push	{r0, r1, r2, r3}
 800604e:	b580      	push	{r7, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006054:	f107 0314 	add.w	r3, r7, #20
 8006058:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800605a:	1d3b      	adds	r3, r7, #4
 800605c:	461a      	mov	r2, r3
 800605e:	2100      	movs	r1, #0
 8006060:	6938      	ldr	r0, [r7, #16]
 8006062:	f7fe ffbf 	bl	8004fe4 <_VPrintTarget>
  va_end(ParamList);
}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006070:	b004      	add	sp, #16
 8006072:	4770      	bx	lr

08006074 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006074:	b580      	push	{r7, lr}
 8006076:	b08a      	sub	sp, #40	; 0x28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800607c:	f3ef 8311 	mrs	r3, BASEPRI
 8006080:	f04f 0120 	mov.w	r1, #32
 8006084:	f381 8811 	msr	BASEPRI, r1
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	4827      	ldr	r0, [pc, #156]	; (8006128 <SEGGER_SYSVIEW_Warn+0xb4>)
 800608c:	f7fe fbaa 	bl	80047e4 <_PreparePacket>
 8006090:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006092:	2280      	movs	r2, #128	; 0x80
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	6938      	ldr	r0, [r7, #16]
 8006098:	f7fe fb74 	bl	8004784 <_EncodeStr>
 800609c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
 80060a2:	2301      	movs	r3, #1
 80060a4:	623b      	str	r3, [r7, #32]
 80060a6:	e00b      	b.n	80060c0 <SEGGER_SYSVIEW_Warn+0x4c>
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	1c59      	adds	r1, r3, #1
 80060b0:	6279      	str	r1, [r7, #36]	; 0x24
 80060b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	09db      	lsrs	r3, r3, #7
 80060be:	623b      	str	r3, [r7, #32]
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	2b7f      	cmp	r3, #127	; 0x7f
 80060c4:	d8f0      	bhi.n	80060a8 <SEGGER_SYSVIEW_Warn+0x34>
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	627a      	str	r2, [r7, #36]	; 0x24
 80060cc:	6a3a      	ldr	r2, [r7, #32]
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	61fb      	str	r3, [r7, #28]
 80060da:	2300      	movs	r3, #0
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	e00b      	b.n	80060f8 <SEGGER_SYSVIEW_Warn+0x84>
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	1c59      	adds	r1, r3, #1
 80060e8:	61f9      	str	r1, [r7, #28]
 80060ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	09db      	lsrs	r3, r3, #7
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	2b7f      	cmp	r3, #127	; 0x7f
 80060fc:	d8f0      	bhi.n	80060e0 <SEGGER_SYSVIEW_Warn+0x6c>
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	61fa      	str	r2, [r7, #28]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800610e:	221a      	movs	r2, #26
 8006110:	68f9      	ldr	r1, [r7, #12]
 8006112:	6938      	ldr	r0, [r7, #16]
 8006114:	f7fe fc54 	bl	80049c0 <_SendPacket>
  RECORD_END();
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f383 8811 	msr	BASEPRI, r3
}
 800611e:	bf00      	nop
 8006120:	3728      	adds	r7, #40	; 0x28
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20014348 	.word	0x20014348

0800612c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006130:	4b13      	ldr	r3, [pc, #76]	; (8006180 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006132:	7e1b      	ldrb	r3, [r3, #24]
 8006134:	4619      	mov	r1, r3
 8006136:	4a13      	ldr	r2, [pc, #76]	; (8006184 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006138:	460b      	mov	r3, r1
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	440b      	add	r3, r1
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	4413      	add	r3, r2
 8006142:	336c      	adds	r3, #108	; 0x6c
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006148:	7e1b      	ldrb	r3, [r3, #24]
 800614a:	4618      	mov	r0, r3
 800614c:	490d      	ldr	r1, [pc, #52]	; (8006184 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800614e:	4603      	mov	r3, r0
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	4403      	add	r3, r0
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	440b      	add	r3, r1
 8006158:	3370      	adds	r3, #112	; 0x70
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d00b      	beq.n	8006178 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006160:	4b07      	ldr	r3, [pc, #28]	; (8006180 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006162:	789b      	ldrb	r3, [r3, #2]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d107      	bne.n	8006178 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006168:	4b05      	ldr	r3, [pc, #20]	; (8006180 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800616a:	2201      	movs	r2, #1
 800616c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800616e:	f7fe fb45 	bl	80047fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006172:	4b03      	ldr	r3, [pc, #12]	; (8006180 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006174:	2200      	movs	r2, #0
 8006176:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006178:	4b01      	ldr	r3, [pc, #4]	; (8006180 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800617a:	781b      	ldrb	r3, [r3, #0]
}
 800617c:	4618      	mov	r0, r3
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20014318 	.word	0x20014318
 8006184:	20012e58 	.word	0x20012e58

08006188 <memcmp>:
 8006188:	b510      	push	{r4, lr}
 800618a:	3901      	subs	r1, #1
 800618c:	4402      	add	r2, r0
 800618e:	4290      	cmp	r0, r2
 8006190:	d101      	bne.n	8006196 <memcmp+0xe>
 8006192:	2000      	movs	r0, #0
 8006194:	e005      	b.n	80061a2 <memcmp+0x1a>
 8006196:	7803      	ldrb	r3, [r0, #0]
 8006198:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800619c:	42a3      	cmp	r3, r4
 800619e:	d001      	beq.n	80061a4 <memcmp+0x1c>
 80061a0:	1b18      	subs	r0, r3, r4
 80061a2:	bd10      	pop	{r4, pc}
 80061a4:	3001      	adds	r0, #1
 80061a6:	e7f2      	b.n	800618e <memcmp+0x6>

080061a8 <memset>:
 80061a8:	4402      	add	r2, r0
 80061aa:	4603      	mov	r3, r0
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d100      	bne.n	80061b2 <memset+0xa>
 80061b0:	4770      	bx	lr
 80061b2:	f803 1b01 	strb.w	r1, [r3], #1
 80061b6:	e7f9      	b.n	80061ac <memset+0x4>

080061b8 <__libc_init_array>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	4d0d      	ldr	r5, [pc, #52]	; (80061f0 <__libc_init_array+0x38>)
 80061bc:	4c0d      	ldr	r4, [pc, #52]	; (80061f4 <__libc_init_array+0x3c>)
 80061be:	1b64      	subs	r4, r4, r5
 80061c0:	10a4      	asrs	r4, r4, #2
 80061c2:	2600      	movs	r6, #0
 80061c4:	42a6      	cmp	r6, r4
 80061c6:	d109      	bne.n	80061dc <__libc_init_array+0x24>
 80061c8:	4d0b      	ldr	r5, [pc, #44]	; (80061f8 <__libc_init_array+0x40>)
 80061ca:	4c0c      	ldr	r4, [pc, #48]	; (80061fc <__libc_init_array+0x44>)
 80061cc:	f000 f826 	bl	800621c <_init>
 80061d0:	1b64      	subs	r4, r4, r5
 80061d2:	10a4      	asrs	r4, r4, #2
 80061d4:	2600      	movs	r6, #0
 80061d6:	42a6      	cmp	r6, r4
 80061d8:	d105      	bne.n	80061e6 <__libc_init_array+0x2e>
 80061da:	bd70      	pop	{r4, r5, r6, pc}
 80061dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e0:	4798      	blx	r3
 80061e2:	3601      	adds	r6, #1
 80061e4:	e7ee      	b.n	80061c4 <__libc_init_array+0xc>
 80061e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ea:	4798      	blx	r3
 80061ec:	3601      	adds	r6, #1
 80061ee:	e7f2      	b.n	80061d6 <__libc_init_array+0x1e>
 80061f0:	080063a4 	.word	0x080063a4
 80061f4:	080063a4 	.word	0x080063a4
 80061f8:	080063a4 	.word	0x080063a4
 80061fc:	080063a8 	.word	0x080063a8

08006200 <memcpy>:
 8006200:	440a      	add	r2, r1
 8006202:	4291      	cmp	r1, r2
 8006204:	f100 33ff 	add.w	r3, r0, #4294967295
 8006208:	d100      	bne.n	800620c <memcpy+0xc>
 800620a:	4770      	bx	lr
 800620c:	b510      	push	{r4, lr}
 800620e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006212:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006216:	4291      	cmp	r1, r2
 8006218:	d1f9      	bne.n	800620e <memcpy+0xe>
 800621a:	bd10      	pop	{r4, pc}

0800621c <_init>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr

08006228 <_fini>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	bf00      	nop
 800622c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622e:	bc08      	pop	{r3}
 8006230:	469e      	mov	lr, r3
 8006232:	4770      	bx	lr
