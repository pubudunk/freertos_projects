
007Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058dc  080058dc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080058dc  080058dc  000158dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058e4  080058e4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080058ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014418  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014434  20014434  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000123ed  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b77  00000000  00000000  0003247c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011b8  00000000  00000000  00034ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d9d  00000000  00000000  000361b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000262ba  00000000  00000000  00036f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014c84  00000000  00000000  0005d207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e73ee  00000000  00000000  00071e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000049ac  00000000  00000000  0015927c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000011d  00000000  00000000  0015dc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005790 	.word	0x08005790

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000020 	.word	0x20000020
 80001ec:	08005790 	.word	0x08005790

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e60 	.word	0x20012e60

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b970 	b.w	800057c <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9e08      	ldr	r6, [sp, #32]
 80002ba:	460d      	mov	r5, r1
 80002bc:	4604      	mov	r4, r0
 80002be:	460f      	mov	r7, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14a      	bne.n	800035a <__udivmoddi4+0xa6>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4694      	mov	ip, r2
 80002c8:	d965      	bls.n	8000396 <__udivmoddi4+0xe2>
 80002ca:	fab2 f382 	clz	r3, r2
 80002ce:	b143      	cbz	r3, 80002e2 <__udivmoddi4+0x2e>
 80002d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d4:	f1c3 0220 	rsb	r2, r3, #32
 80002d8:	409f      	lsls	r7, r3
 80002da:	fa20 f202 	lsr.w	r2, r0, r2
 80002de:	4317      	orrs	r7, r2
 80002e0:	409c      	lsls	r4, r3
 80002e2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e6:	fa1f f58c 	uxth.w	r5, ip
 80002ea:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ee:	0c22      	lsrs	r2, r4, #16
 80002f0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f8:	fb01 f005 	mul.w	r0, r1, r5
 80002fc:	4290      	cmp	r0, r2
 80002fe:	d90a      	bls.n	8000316 <__udivmoddi4+0x62>
 8000300:	eb1c 0202 	adds.w	r2, ip, r2
 8000304:	f101 37ff 	add.w	r7, r1, #4294967295
 8000308:	f080 811c 	bcs.w	8000544 <__udivmoddi4+0x290>
 800030c:	4290      	cmp	r0, r2
 800030e:	f240 8119 	bls.w	8000544 <__udivmoddi4+0x290>
 8000312:	3902      	subs	r1, #2
 8000314:	4462      	add	r2, ip
 8000316:	1a12      	subs	r2, r2, r0
 8000318:	b2a4      	uxth	r4, r4
 800031a:	fbb2 f0fe 	udiv	r0, r2, lr
 800031e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000322:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	42a5      	cmp	r5, r4
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x90>
 800032e:	eb1c 0404 	adds.w	r4, ip, r4
 8000332:	f100 32ff 	add.w	r2, r0, #4294967295
 8000336:	f080 8107 	bcs.w	8000548 <__udivmoddi4+0x294>
 800033a:	42a5      	cmp	r5, r4
 800033c:	f240 8104 	bls.w	8000548 <__udivmoddi4+0x294>
 8000340:	4464      	add	r4, ip
 8000342:	3802      	subs	r0, #2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0xa2>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xbc>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80ed 	beq.w	800053e <__udivmoddi4+0x28a>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d149      	bne.n	800040c <__udivmoddi4+0x158>
 8000378:	42ab      	cmp	r3, r5
 800037a:	d302      	bcc.n	8000382 <__udivmoddi4+0xce>
 800037c:	4282      	cmp	r2, r0
 800037e:	f200 80f8 	bhi.w	8000572 <__udivmoddi4+0x2be>
 8000382:	1a84      	subs	r4, r0, r2
 8000384:	eb65 0203 	sbc.w	r2, r5, r3
 8000388:	2001      	movs	r0, #1
 800038a:	4617      	mov	r7, r2
 800038c:	2e00      	cmp	r6, #0
 800038e:	d0e2      	beq.n	8000356 <__udivmoddi4+0xa2>
 8000390:	e9c6 4700 	strd	r4, r7, [r6]
 8000394:	e7df      	b.n	8000356 <__udivmoddi4+0xa2>
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xe6>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f382 	clz	r3, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x210>
 80003a4:	1a8a      	subs	r2, r1, r2
 80003a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	2101      	movs	r1, #1
 80003b0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b4:	fb07 2015 	mls	r0, r7, r5, r2
 80003b8:	0c22      	lsrs	r2, r4, #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb0e f005 	mul.w	r0, lr, r5
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x124>
 80003c6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ca:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x122>
 80003d0:	4290      	cmp	r0, r2
 80003d2:	f200 80cb 	bhi.w	800056c <__udivmoddi4+0x2b8>
 80003d6:	4645      	mov	r5, r8
 80003d8:	1a12      	subs	r2, r2, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e0:	fb07 2210 	mls	r2, r7, r0, r2
 80003e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e8:	fb0e fe00 	mul.w	lr, lr, r0
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x14e>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f8:	d202      	bcs.n	8000400 <__udivmoddi4+0x14c>
 80003fa:	45a6      	cmp	lr, r4
 80003fc:	f200 80bb 	bhi.w	8000576 <__udivmoddi4+0x2c2>
 8000400:	4610      	mov	r0, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800040a:	e79f      	b.n	800034c <__udivmoddi4+0x98>
 800040c:	f1c1 0720 	rsb	r7, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 fc07 	lsr.w	ip, r2, r7
 8000416:	ea4c 0c03 	orr.w	ip, ip, r3
 800041a:	fa05 f401 	lsl.w	r4, r5, r1
 800041e:	fa20 f307 	lsr.w	r3, r0, r7
 8000422:	40fd      	lsrs	r5, r7
 8000424:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fbb5 f8f9 	udiv	r8, r5, r9
 800042e:	fa1f fe8c 	uxth.w	lr, ip
 8000432:	fb09 5518 	mls	r5, r9, r8, r5
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800043c:	fb08 f50e 	mul.w	r5, r8, lr
 8000440:	42a5      	cmp	r5, r4
 8000442:	fa02 f201 	lsl.w	r2, r2, r1
 8000446:	fa00 f001 	lsl.w	r0, r0, r1
 800044a:	d90b      	bls.n	8000464 <__udivmoddi4+0x1b0>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f108 3aff 	add.w	sl, r8, #4294967295
 8000454:	f080 8088 	bcs.w	8000568 <__udivmoddi4+0x2b4>
 8000458:	42a5      	cmp	r5, r4
 800045a:	f240 8085 	bls.w	8000568 <__udivmoddi4+0x2b4>
 800045e:	f1a8 0802 	sub.w	r8, r8, #2
 8000462:	4464      	add	r4, ip
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	b29d      	uxth	r5, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000474:	fb03 fe0e 	mul.w	lr, r3, lr
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1da>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f103 35ff 	add.w	r5, r3, #4294967295
 8000484:	d26c      	bcs.n	8000560 <__udivmoddi4+0x2ac>
 8000486:	45a6      	cmp	lr, r4
 8000488:	d96a      	bls.n	8000560 <__udivmoddi4+0x2ac>
 800048a:	3b02      	subs	r3, #2
 800048c:	4464      	add	r4, ip
 800048e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000492:	fba3 9502 	umull	r9, r5, r3, r2
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	42ac      	cmp	r4, r5
 800049c:	46c8      	mov	r8, r9
 800049e:	46ae      	mov	lr, r5
 80004a0:	d356      	bcc.n	8000550 <__udivmoddi4+0x29c>
 80004a2:	d053      	beq.n	800054c <__udivmoddi4+0x298>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x208>
 80004a6:	ebb0 0208 	subs.w	r2, r0, r8
 80004aa:	eb64 040e 	sbc.w	r4, r4, lr
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40ca      	lsrs	r2, r1
 80004b4:	40cc      	lsrs	r4, r1
 80004b6:	4317      	orrs	r7, r2
 80004b8:	e9c6 7400 	strd	r7, r4, [r6]
 80004bc:	4618      	mov	r0, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c4:	f1c3 0120 	rsb	r1, r3, #32
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	fa20 f201 	lsr.w	r2, r0, r1
 80004d0:	fa25 f101 	lsr.w	r1, r5, r1
 80004d4:	409d      	lsls	r5, r3
 80004d6:	432a      	orrs	r2, r5
 80004d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004dc:	fa1f fe8c 	uxth.w	lr, ip
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1510 	mls	r5, r7, r0, r1
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ee:	fb00 f50e 	mul.w	r5, r0, lr
 80004f2:	428d      	cmp	r5, r1
 80004f4:	fa04 f403 	lsl.w	r4, r4, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x258>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	d22f      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000504:	428d      	cmp	r5, r1
 8000506:	d92d      	bls.n	8000564 <__udivmoddi4+0x2b0>
 8000508:	3802      	subs	r0, #2
 800050a:	4461      	add	r1, ip
 800050c:	1b49      	subs	r1, r1, r5
 800050e:	b292      	uxth	r2, r2
 8000510:	fbb1 f5f7 	udiv	r5, r1, r7
 8000514:	fb07 1115 	mls	r1, r7, r5, r1
 8000518:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800051c:	fb05 f10e 	mul.w	r1, r5, lr
 8000520:	4291      	cmp	r1, r2
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x282>
 8000524:	eb1c 0202 	adds.w	r2, ip, r2
 8000528:	f105 38ff 	add.w	r8, r5, #4294967295
 800052c:	d216      	bcs.n	800055c <__udivmoddi4+0x2a8>
 800052e:	4291      	cmp	r1, r2
 8000530:	d914      	bls.n	800055c <__udivmoddi4+0x2a8>
 8000532:	3d02      	subs	r5, #2
 8000534:	4462      	add	r2, ip
 8000536:	1a52      	subs	r2, r2, r1
 8000538:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800053c:	e738      	b.n	80003b0 <__udivmoddi4+0xfc>
 800053e:	4631      	mov	r1, r6
 8000540:	4630      	mov	r0, r6
 8000542:	e708      	b.n	8000356 <__udivmoddi4+0xa2>
 8000544:	4639      	mov	r1, r7
 8000546:	e6e6      	b.n	8000316 <__udivmoddi4+0x62>
 8000548:	4610      	mov	r0, r2
 800054a:	e6fb      	b.n	8000344 <__udivmoddi4+0x90>
 800054c:	4548      	cmp	r0, r9
 800054e:	d2a9      	bcs.n	80004a4 <__udivmoddi4+0x1f0>
 8000550:	ebb9 0802 	subs.w	r8, r9, r2
 8000554:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000558:	3b01      	subs	r3, #1
 800055a:	e7a3      	b.n	80004a4 <__udivmoddi4+0x1f0>
 800055c:	4645      	mov	r5, r8
 800055e:	e7ea      	b.n	8000536 <__udivmoddi4+0x282>
 8000560:	462b      	mov	r3, r5
 8000562:	e794      	b.n	800048e <__udivmoddi4+0x1da>
 8000564:	4640      	mov	r0, r8
 8000566:	e7d1      	b.n	800050c <__udivmoddi4+0x258>
 8000568:	46d0      	mov	r8, sl
 800056a:	e77b      	b.n	8000464 <__udivmoddi4+0x1b0>
 800056c:	3d02      	subs	r5, #2
 800056e:	4462      	add	r2, ip
 8000570:	e732      	b.n	80003d8 <__udivmoddi4+0x124>
 8000572:	4608      	mov	r0, r1
 8000574:	e70a      	b.n	800038c <__udivmoddi4+0xd8>
 8000576:	4464      	add	r4, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e742      	b.n	8000402 <__udivmoddi4+0x14e>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	BaseType_t xReturned = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fc8b 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f853 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8bb 	bl	800070c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // enable the CYCCNT counter
  *DWT_CTRL |= (1 << 0);
 8000596:	4b20      	ldr	r3, [pc, #128]	; (8000618 <main+0x98>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a1f      	ldr	r2, [pc, #124]	; (8000618 <main+0x98>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6013      	str	r3, [r2, #0]

  // enable usart
  SEGGER_UART_init(500000);
 80005a2:	481e      	ldr	r0, [pc, #120]	; (800061c <main+0x9c>)
 80005a4:	f003 fb22 	bl	8003bec <SEGGER_UART_init>

  // start segger recording
  SEGGER_SYSVIEW_Conf();
 80005a8:	f003 f94a 	bl	8003840 <SEGGER_SYSVIEW_Conf>

  xReturned = xTaskCreate(red_led_handler, "red_led_handler", 200, NULL, 2, &xRedLedTaskHandle);
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <main+0xa0>)
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2302      	movs	r3, #2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	22c8      	movs	r2, #200	; 0xc8
 80005b8:	491a      	ldr	r1, [pc, #104]	; (8000624 <main+0xa4>)
 80005ba:	481b      	ldr	r0, [pc, #108]	; (8000628 <main+0xa8>)
 80005bc:	f001 ff53 	bl	8002466 <xTaskCreate>
 80005c0:	60f8      	str	r0, [r7, #12]
  configASSERT(pdPASS == xReturned);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d00a      	beq.n	80005de <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005cc:	f383 8811 	msr	BASEPRI, r3
 80005d0:	f3bf 8f6f 	isb	sy
 80005d4:	f3bf 8f4f 	dsb	sy
 80005d8:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005da:	bf00      	nop
 80005dc:	e7fe      	b.n	80005dc <main+0x5c>

  xReturned = xTaskCreate(green_led_handler, "green_led_handler", 200, NULL, 3, &xGreenLedTaskHandle);
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <main+0xac>)
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2303      	movs	r3, #3
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	22c8      	movs	r2, #200	; 0xc8
 80005ea:	4911      	ldr	r1, [pc, #68]	; (8000630 <main+0xb0>)
 80005ec:	4811      	ldr	r0, [pc, #68]	; (8000634 <main+0xb4>)
 80005ee:	f001 ff3a 	bl	8002466 <xTaskCreate>
 80005f2:	60f8      	str	r0, [r7, #12]
  configASSERT(pdPASS == xReturned);
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d00a      	beq.n	8000610 <main+0x90>
        __asm volatile
 80005fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fe:	f383 8811 	msr	BASEPRI, r3
 8000602:	f3bf 8f6f 	isb	sy
 8000606:	f3bf 8f4f 	dsb	sy
 800060a:	607b      	str	r3, [r7, #4]
    }
 800060c:	bf00      	nop
 800060e:	e7fe      	b.n	800060e <main+0x8e>

  // start the scheduler
  vTaskStartScheduler();
 8000610:	f002 f8b2 	bl	8002778 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0x94>
 8000616:	bf00      	nop
 8000618:	e0001000 	.word	0xe0001000
 800061c:	0007a120 	.word	0x0007a120
 8000620:	20000038 	.word	0x20000038
 8000624:	080057a8 	.word	0x080057a8
 8000628:	08000c0d 	.word	0x08000c0d
 800062c:	2000003c 	.word	0x2000003c
 8000630:	080057b8 	.word	0x080057b8
 8000634:	08000c2d 	.word	0x08000c2d

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 f868 	bl	800571c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ac:	23a8      	movs	r3, #168	; 0xa8
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 ff23 	bl	8001508 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 fadc 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f984 	bl	80019f8 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 fac5 	bl	8000c84 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08e      	sub	sp, #56	; 0x38
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
 8000726:	4bb2      	ldr	r3, [pc, #712]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4ab1      	ldr	r2, [pc, #708]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4baf      	ldr	r3, [pc, #700]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
 8000742:	4bab      	ldr	r3, [pc, #684]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4aaa      	ldr	r2, [pc, #680]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4ba8      	ldr	r3, [pc, #672]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0320 	and.w	r3, r3, #32
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4ba4      	ldr	r3, [pc, #656]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4aa3      	ldr	r2, [pc, #652]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4ba1      	ldr	r3, [pc, #644]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b9d      	ldr	r3, [pc, #628]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a9c      	ldr	r2, [pc, #624]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b9a      	ldr	r3, [pc, #616]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b96      	ldr	r3, [pc, #600]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a95      	ldr	r2, [pc, #596]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b93      	ldr	r3, [pc, #588]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b8f      	ldr	r3, [pc, #572]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a8e      	ldr	r2, [pc, #568]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b88      	ldr	r3, [pc, #544]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a87      	ldr	r2, [pc, #540]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007d4:	f043 0310 	orr.w	r3, r3, #16
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b85      	ldr	r3, [pc, #532]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0310 	and.w	r3, r3, #16
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b81      	ldr	r3, [pc, #516]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a80      	ldr	r2, [pc, #512]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b7e      	ldr	r3, [pc, #504]	; (80009f0 <MX_GPIO_Init+0x2e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2116      	movs	r1, #22
 8000806:	487b      	ldr	r0, [pc, #492]	; (80009f4 <MX_GPIO_Init+0x2e8>)
 8000808:	f000 fe40 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	4879      	ldr	r0, [pc, #484]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 8000812:	f000 fe3b 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800081c:	4877      	ldr	r0, [pc, #476]	; (80009fc <MX_GPIO_Init+0x2f0>)
 800081e:	f000 fe35 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000828:	4875      	ldr	r0, [pc, #468]	; (8000a00 <MX_GPIO_Init+0x2f4>)
 800082a:	f000 fe2f 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800082e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000840:	230c      	movs	r3, #12
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	486e      	ldr	r0, [pc, #440]	; (8000a04 <MX_GPIO_Init+0x2f8>)
 800084c:	f000 fc72 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000850:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000862:	2305      	movs	r3, #5
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	4619      	mov	r1, r3
 800086c:	4865      	ldr	r0, [pc, #404]	; (8000a04 <MX_GPIO_Init+0x2f8>)
 800086e:	f000 fc61 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000884:	230e      	movs	r3, #14
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088c:	4619      	mov	r1, r3
 800088e:	485d      	ldr	r0, [pc, #372]	; (8000a04 <MX_GPIO_Init+0x2f8>)
 8000890:	f000 fc50 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000894:	2301      	movs	r3, #1
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008a4:	230c      	movs	r3, #12
 80008a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ac:	4619      	mov	r1, r3
 80008ae:	4851      	ldr	r0, [pc, #324]	; (80009f4 <MX_GPIO_Init+0x2e8>)
 80008b0:	f000 fc40 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008b4:	2316      	movs	r3, #22
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	484a      	ldr	r0, [pc, #296]	; (80009f4 <MX_GPIO_Init+0x2e8>)
 80008cc:	f000 fc32 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d0:	2301      	movs	r3, #1
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4844      	ldr	r0, [pc, #272]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 80008e6:	f000 fc25 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80008ea:	f248 0306 	movw	r3, #32774	; 0x8006
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	483d      	ldr	r0, [pc, #244]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 8000902:	f000 fc17 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000906:	f641 0358 	movw	r3, #6232	; 0x1858
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000918:	230e      	movs	r3, #14
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4835      	ldr	r0, [pc, #212]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 8000924:	f000 fc06 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	482e      	ldr	r0, [pc, #184]	; (80009f8 <MX_GPIO_Init+0x2ec>)
 8000940:	f000 fbf8 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000944:	2320      	movs	r3, #32
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000948:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	4826      	ldr	r0, [pc, #152]	; (80009f4 <MX_GPIO_Init+0x2e8>)
 800095a:	f000 fbeb 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800095e:	2303      	movs	r3, #3
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800096e:	2309      	movs	r3, #9
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	4823      	ldr	r0, [pc, #140]	; (8000a08 <MX_GPIO_Init+0x2fc>)
 800097a:	f000 fbdb 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800097e:	2304      	movs	r3, #4
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	481d      	ldr	r0, [pc, #116]	; (8000a08 <MX_GPIO_Init+0x2fc>)
 8000992:	f000 fbcf 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000996:	f248 1333 	movw	r3, #33075	; 0x8133
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a8:	230c      	movs	r3, #12
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	4813      	ldr	r0, [pc, #76]	; (8000a00 <MX_GPIO_Init+0x2f4>)
 80009b4:	f000 fbbe 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80009b8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009ca:	230c      	movs	r3, #12
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_GPIO_Init+0x300>)
 80009d6:	f000 fbad 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80009da:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
 80009ec:	e010      	b.n	8000a10 <MX_GPIO_Init+0x304>
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	40021800 	.word	0x40021800
 8000a04:	40021400 	.word	0x40021400
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a10:	230e      	movs	r3, #14
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4877      	ldr	r0, [pc, #476]	; (8000bf8 <MX_GPIO_Init+0x4ec>)
 8000a1c:	f000 fb8a 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a20:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a32:	230c      	movs	r3, #12
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	486e      	ldr	r0, [pc, #440]	; (8000bf8 <MX_GPIO_Init+0x4ec>)
 8000a3e:	f000 fb79 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4868      	ldr	r0, [pc, #416]	; (8000bf8 <MX_GPIO_Init+0x4ec>)
 8000a58:	f000 fb6c 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a5c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	4860      	ldr	r0, [pc, #384]	; (8000bfc <MX_GPIO_Init+0x4f0>)
 8000a7a:	f000 fb5b 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	485a      	ldr	r0, [pc, #360]	; (8000bfc <MX_GPIO_Init+0x4f0>)
 8000a94:	f000 fb4e 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4852      	ldr	r0, [pc, #328]	; (8000bfc <MX_GPIO_Init+0x4f0>)
 8000ab2:	f000 fb3f 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ab6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac8:	230e      	movs	r3, #14
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	484b      	ldr	r0, [pc, #300]	; (8000c00 <MX_GPIO_Init+0x4f4>)
 8000ad4:	f000 fb2e 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000ad8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aea:	230e      	movs	r3, #14
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4843      	ldr	r0, [pc, #268]	; (8000c04 <MX_GPIO_Init+0x4f8>)
 8000af6:	f000 fb1d 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	483b      	ldr	r0, [pc, #236]	; (8000c04 <MX_GPIO_Init+0x4f8>)
 8000b18:	f000 fb0c 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b22:	2312      	movs	r3, #18
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4833      	ldr	r0, [pc, #204]	; (8000c08 <MX_GPIO_Init+0x4fc>)
 8000b3a:	f000 fafb 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b50:	2307      	movs	r3, #7
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	482b      	ldr	r0, [pc, #172]	; (8000c08 <MX_GPIO_Init+0x4fc>)
 8000b5c:	f000 faea 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b60:	2348      	movs	r3, #72	; 0x48
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b70:	230e      	movs	r3, #14
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4820      	ldr	r0, [pc, #128]	; (8000bfc <MX_GPIO_Init+0x4f0>)
 8000b7c:	f000 fada 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000b80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b92:	2309      	movs	r3, #9
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4818      	ldr	r0, [pc, #96]	; (8000c00 <MX_GPIO_Init+0x4f4>)
 8000b9e:	f000 fac9 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ba2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4811      	ldr	r0, [pc, #68]	; (8000c00 <MX_GPIO_Init+0x4f4>)
 8000bbc:	f000 faba 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000bc0:	2360      	movs	r3, #96	; 0x60
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <MX_GPIO_Init+0x4ec>)
 8000bdc:	f000 faaa 	bl	8001134 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2106      	movs	r1, #6
 8000be4:	2006      	movs	r0, #6
 8000be6:	f000 fa7b 	bl	80010e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bea:	2006      	movs	r0, #6
 8000bec:	f000 fa94 	bl	8001118 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	40020c00 	.word	0x40020c00
 8000c00:	40021800 	.word	0x40021800
 8000c04:	40020800 	.word	0x40020800
 8000c08:	40020000 	.word	0x40020000

08000c0c <red_led_handler>:

/* USER CODE BEGIN 4 */

static void red_led_handler(void *pvParam)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c1a:	4803      	ldr	r0, [pc, #12]	; (8000c28 <red_led_handler+0x1c>)
 8000c1c:	f000 fc36 	bl	800148c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000c20:	2064      	movs	r0, #100	; 0x64
 8000c22:	f000 f981 	bl	8000f28 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
 8000c26:	e7f5      	b.n	8000c14 <red_led_handler+0x8>
 8000c28:	40021800 	.word	0x40021800

08000c2c <green_led_handler>:
	}
}

static void green_led_handler(void *pvParam)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	while(1)
	{
		while(1)
		{
			HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	4804      	ldr	r0, [pc, #16]	; (8000c4c <green_led_handler+0x20>)
 8000c3c:	f000 fc26 	bl	800148c <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c44:	f000 f970 	bl	8000f28 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 8000c48:	e7f4      	b.n	8000c34 <green_led_handler+0x8>
 8000c4a:	bf00      	nop
 8000c4c:	40021800 	.word	0x40021800

08000c50 <button_irq_handler>:
	}
}


void button_irq_handler()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	traceISR_ENTER();	// instruct segger systemview to capture isr
 8000c54:	f004 fa86 	bl	8005164 <SEGGER_SYSVIEW_RecordEnterISR>

	traceISR_EXIT();
 8000c58:	f004 fac6 	bl	80051e8 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d101      	bne.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c72:	f000 f939 	bl	8000ee8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40001000 	.word	0x40001000

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <HAL_MspInit+0x4c>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000cce:	f002 fa33 	bl	8003138 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	; 0x38
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <HAL_InitTick+0xe4>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	4a32      	ldr	r2, [pc, #200]	; (8000dc4 <HAL_InitTick+0xe4>)
 8000cfa:	f043 0310 	orr.w	r3, r3, #16
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000d00:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <HAL_InitTick+0xe4>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f003 0310 	and.w	r3, r3, #16
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d0c:	f107 0210 	add.w	r2, r7, #16
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 f87a 	bl	8001e10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d103      	bne.n	8000d2e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d26:	f001 f85f 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 8000d2a:	6378      	str	r0, [r7, #52]	; 0x34
 8000d2c:	e004      	b.n	8000d38 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d2e:	f001 f85b 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 8000d32:	4603      	mov	r3, r0
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d3a:	4a23      	ldr	r2, [pc, #140]	; (8000dc8 <HAL_InitTick+0xe8>)
 8000d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d40:	0c9b      	lsrs	r3, r3, #18
 8000d42:	3b01      	subs	r3, #1
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <HAL_InitTick+0xec>)
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <HAL_InitTick+0xf0>)
 8000d4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <HAL_InitTick+0xec>)
 8000d4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d54:	4a1d      	ldr	r2, [pc, #116]	; (8000dcc <HAL_InitTick+0xec>)
 8000d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <HAL_InitTick+0xec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_InitTick+0xec>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_InitTick+0xec>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d6c:	4817      	ldr	r0, [pc, #92]	; (8000dcc <HAL_InitTick+0xec>)
 8000d6e:	f001 f881 	bl	8001e74 <HAL_TIM_Base_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d11b      	bne.n	8000db8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d80:	4812      	ldr	r0, [pc, #72]	; (8000dcc <HAL_InitTick+0xec>)
 8000d82:	f001 f8d1 	bl	8001f28 <HAL_TIM_Base_Start_IT>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d111      	bne.n	8000db8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d94:	2036      	movs	r0, #54	; 0x36
 8000d96:	f000 f9bf 	bl	8001118 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d808      	bhi.n	8000db2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	2036      	movs	r0, #54	; 0x36
 8000da6:	f000 f99b 	bl	80010e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_InitTick+0xf4>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	e002      	b.n	8000db8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000db8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3738      	adds	r7, #56	; 0x38
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	431bde83 	.word	0x431bde83
 8000dcc:	20000040 	.word	0x20000040
 8000dd0:	40001000 	.word	0x40001000
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f000 fb59 	bl	80014c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  button_irq_handler();
 8000e0e:	f7ff ff1f 	bl	8000c50 <button_irq_handler>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <TIM6_DAC_IRQHandler+0x10>)
 8000e1e:	f001 f8f3 	bl	8002008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000040 	.word	0x20000040

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e54:	f7ff ffea 	bl	8000e2c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	; (8000e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	; (8000e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	; (8000e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f004 fc55 	bl	800572c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fb7d 	bl	8000580 <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e88:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e94:	080058ec 	.word	0x080058ec
  ldr r2, =_sbss
 8000e98:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e9c:	20014434 	.word	0x20014434

08000ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_Init+0x40>)
 8000eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_Init+0x40>)
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_Init+0x40>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f8fc 	bl	80010ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	200f      	movs	r0, #15
 8000ed4:	f7ff ff04 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff feda 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000088 	.word	0x20000088

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000088 	.word	0x20000088

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff4c 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f2:	f7ff ff61 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 80010f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	6978      	ldr	r0, [r7, #20]
 80010fe:	f7ff ffb1 	bl	8001064 <NVIC_EncodePriority>
 8001102:	4602      	mov	r2, r0
 8001104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff80 	bl	8001010 <__NVIC_SetPriority>
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff54 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	e177      	b.n	8001440 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	429a      	cmp	r2, r3
 800116a:	f040 8166 	bne.w	800143a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b01      	cmp	r3, #1
 8001178:	d005      	beq.n	8001186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001182:	2b02      	cmp	r3, #2
 8001184:	d130      	bne.n	80011e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011bc:	2201      	movs	r2, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	091b      	lsrs	r3, r3, #4
 80011d2:	f003 0201 	and.w	r2, r3, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d017      	beq.n	8001224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d123      	bne.n	8001278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	69b9      	ldr	r1, [r7, #24]
 8001274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0203 	and.w	r2, r3, #3
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80c0 	beq.w	800143a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b66      	ldr	r3, [pc, #408]	; (8001458 <HAL_GPIO_Init+0x324>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a65      	ldr	r2, [pc, #404]	; (8001458 <HAL_GPIO_Init+0x324>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b63      	ldr	r3, [pc, #396]	; (8001458 <HAL_GPIO_Init+0x324>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d6:	4a61      	ldr	r2, [pc, #388]	; (800145c <HAL_GPIO_Init+0x328>)
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a58      	ldr	r2, [pc, #352]	; (8001460 <HAL_GPIO_Init+0x32c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d037      	beq.n	8001372 <HAL_GPIO_Init+0x23e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a57      	ldr	r2, [pc, #348]	; (8001464 <HAL_GPIO_Init+0x330>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d031      	beq.n	800136e <HAL_GPIO_Init+0x23a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a56      	ldr	r2, [pc, #344]	; (8001468 <HAL_GPIO_Init+0x334>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d02b      	beq.n	800136a <HAL_GPIO_Init+0x236>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a55      	ldr	r2, [pc, #340]	; (800146c <HAL_GPIO_Init+0x338>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d025      	beq.n	8001366 <HAL_GPIO_Init+0x232>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a54      	ldr	r2, [pc, #336]	; (8001470 <HAL_GPIO_Init+0x33c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01f      	beq.n	8001362 <HAL_GPIO_Init+0x22e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a53      	ldr	r2, [pc, #332]	; (8001474 <HAL_GPIO_Init+0x340>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x22a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a52      	ldr	r2, [pc, #328]	; (8001478 <HAL_GPIO_Init+0x344>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x226>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a51      	ldr	r2, [pc, #324]	; (800147c <HAL_GPIO_Init+0x348>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x222>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a50      	ldr	r2, [pc, #320]	; (8001480 <HAL_GPIO_Init+0x34c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x21e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4f      	ldr	r2, [pc, #316]	; (8001484 <HAL_GPIO_Init+0x350>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x21a>
 800134a:	2309      	movs	r3, #9
 800134c:	e012      	b.n	8001374 <HAL_GPIO_Init+0x240>
 800134e:	230a      	movs	r3, #10
 8001350:	e010      	b.n	8001374 <HAL_GPIO_Init+0x240>
 8001352:	2308      	movs	r3, #8
 8001354:	e00e      	b.n	8001374 <HAL_GPIO_Init+0x240>
 8001356:	2307      	movs	r3, #7
 8001358:	e00c      	b.n	8001374 <HAL_GPIO_Init+0x240>
 800135a:	2306      	movs	r3, #6
 800135c:	e00a      	b.n	8001374 <HAL_GPIO_Init+0x240>
 800135e:	2305      	movs	r3, #5
 8001360:	e008      	b.n	8001374 <HAL_GPIO_Init+0x240>
 8001362:	2304      	movs	r3, #4
 8001364:	e006      	b.n	8001374 <HAL_GPIO_Init+0x240>
 8001366:	2303      	movs	r3, #3
 8001368:	e004      	b.n	8001374 <HAL_GPIO_Init+0x240>
 800136a:	2302      	movs	r3, #2
 800136c:	e002      	b.n	8001374 <HAL_GPIO_Init+0x240>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x240>
 8001372:	2300      	movs	r3, #0
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	f002 0203 	and.w	r2, r2, #3
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	4093      	lsls	r3, r2
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001384:	4935      	ldr	r1, [pc, #212]	; (800145c <HAL_GPIO_Init+0x328>)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001392:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <HAL_GPIO_Init+0x354>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b6:	4a34      	ldr	r2, [pc, #208]	; (8001488 <HAL_GPIO_Init+0x354>)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013bc:	4b32      	ldr	r3, [pc, #200]	; (8001488 <HAL_GPIO_Init+0x354>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e0:	4a29      	ldr	r2, [pc, #164]	; (8001488 <HAL_GPIO_Init+0x354>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e6:	4b28      	ldr	r3, [pc, #160]	; (8001488 <HAL_GPIO_Init+0x354>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800140a:	4a1f      	ldr	r2, [pc, #124]	; (8001488 <HAL_GPIO_Init+0x354>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_GPIO_Init+0x354>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001434:	4a14      	ldr	r2, [pc, #80]	; (8001488 <HAL_GPIO_Init+0x354>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3301      	adds	r3, #1
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	2b0f      	cmp	r3, #15
 8001444:	f67f ae84 	bls.w	8001150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40013800 	.word	0x40013800
 8001460:	40020000 	.word	0x40020000
 8001464:	40020400 	.word	0x40020400
 8001468:	40020800 	.word	0x40020800
 800146c:	40020c00 	.word	0x40020c00
 8001470:	40021000 	.word	0x40021000
 8001474:	40021400 	.word	0x40021400
 8001478:	40021800 	.word	0x40021800
 800147c:	40021c00 	.word	0x40021c00
 8001480:	40022000 	.word	0x40022000
 8001484:	40022400 	.word	0x40022400
 8001488:	40013c00 	.word	0x40013c00

0800148c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a8:	e003      	b.n	80014b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	619a      	str	r2, [r3, #24]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f806 	bl	80014f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40013c00 	.word	0x40013c00

080014f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e267      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d075      	beq.n	8001612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001526:	4b88      	ldr	r3, [pc, #544]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b04      	cmp	r3, #4
 8001530:	d00c      	beq.n	800154c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001532:	4b85      	ldr	r3, [pc, #532]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800153a:	2b08      	cmp	r3, #8
 800153c:	d112      	bne.n	8001564 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153e:	4b82      	ldr	r3, [pc, #520]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800154a:	d10b      	bne.n	8001564 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	4b7e      	ldr	r3, [pc, #504]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d05b      	beq.n	8001610 <HAL_RCC_OscConfig+0x108>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d157      	bne.n	8001610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e242      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x74>
 800156e:	4b76      	ldr	r3, [pc, #472]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a75      	ldr	r2, [pc, #468]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e01d      	b.n	80015b8 <HAL_RCC_OscConfig+0xb0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x98>
 8001586:	4b70      	ldr	r3, [pc, #448]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6f      	ldr	r2, [pc, #444]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b6d      	ldr	r3, [pc, #436]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a6c      	ldr	r2, [pc, #432]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e00b      	b.n	80015b8 <HAL_RCC_OscConfig+0xb0>
 80015a0:	4b69      	ldr	r3, [pc, #420]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a68      	ldr	r2, [pc, #416]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b66      	ldr	r3, [pc, #408]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a65      	ldr	r2, [pc, #404]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fca6 	bl	8000f10 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fca2 	bl	8000f10 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e207      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b5b      	ldr	r3, [pc, #364]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0xc0>
 80015e6:	e014      	b.n	8001612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fc92 	bl	8000f10 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fc8e 	bl	8000f10 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1f3      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	4b51      	ldr	r3, [pc, #324]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0xe8>
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d063      	beq.n	80016e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800161e:	4b4a      	ldr	r3, [pc, #296]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001632:	2b08      	cmp	r3, #8
 8001634:	d11c      	bne.n	8001670 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001636:	4b44      	ldr	r3, [pc, #272]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d116      	bne.n	8001670 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_RCC_OscConfig+0x152>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e1c7      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4937      	ldr	r1, [pc, #220]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166e:	e03a      	b.n	80016e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <HAL_RCC_OscConfig+0x244>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fc47 	bl	8000f10 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fc43 	bl	8000f10 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e1a8      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4925      	ldr	r1, [pc, #148]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
 80016b8:	e015      	b.n	80016e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_RCC_OscConfig+0x244>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fc26 	bl	8000f10 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc22 	bl	8000f10 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e187      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d036      	beq.n	8001760 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d016      	beq.n	8001728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_RCC_OscConfig+0x248>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff fc06 	bl	8000f10 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fc02 	bl	8000f10 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e167      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800171c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x200>
 8001726:	e01b      	b.n	8001760 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_RCC_OscConfig+0x248>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7ff fbef 	bl	8000f10 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	e00e      	b.n	8001754 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001736:	f7ff fbeb 	bl	8000f10 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d907      	bls.n	8001754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e150      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
 8001748:	40023800 	.word	0x40023800
 800174c:	42470000 	.word	0x42470000
 8001750:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	4b88      	ldr	r3, [pc, #544]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1ea      	bne.n	8001736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8097 	beq.w	800189c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001772:	4b81      	ldr	r3, [pc, #516]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b7d      	ldr	r3, [pc, #500]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a7c      	ldr	r2, [pc, #496]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b7a      	ldr	r3, [pc, #488]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179e:	4b77      	ldr	r3, [pc, #476]	; (800197c <HAL_RCC_OscConfig+0x474>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d118      	bne.n	80017dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017aa:	4b74      	ldr	r3, [pc, #464]	; (800197c <HAL_RCC_OscConfig+0x474>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a73      	ldr	r2, [pc, #460]	; (800197c <HAL_RCC_OscConfig+0x474>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fbab 	bl	8000f10 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017be:	f7ff fba7 	bl	8000f10 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e10c      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	4b6a      	ldr	r3, [pc, #424]	; (800197c <HAL_RCC_OscConfig+0x474>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2ea>
 80017e4:	4b64      	ldr	r3, [pc, #400]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	4a63      	ldr	r2, [pc, #396]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6713      	str	r3, [r2, #112]	; 0x70
 80017f0:	e01c      	b.n	800182c <HAL_RCC_OscConfig+0x324>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0x30c>
 80017fa:	4b5f      	ldr	r3, [pc, #380]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	4a5e      	ldr	r2, [pc, #376]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6713      	str	r3, [r2, #112]	; 0x70
 8001806:	4b5c      	ldr	r3, [pc, #368]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180a:	4a5b      	ldr	r2, [pc, #364]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6713      	str	r3, [r2, #112]	; 0x70
 8001812:	e00b      	b.n	800182c <HAL_RCC_OscConfig+0x324>
 8001814:	4b58      	ldr	r3, [pc, #352]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	4a57      	ldr	r2, [pc, #348]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6713      	str	r3, [r2, #112]	; 0x70
 8001820:	4b55      	ldr	r3, [pc, #340]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001824:	4a54      	ldr	r2, [pc, #336]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001826:	f023 0304 	bic.w	r3, r3, #4
 800182a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d015      	beq.n	8001860 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001834:	f7ff fb6c 	bl	8000f10 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183a:	e00a      	b.n	8001852 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183c:	f7ff fb68 	bl	8000f10 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e0cb      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0ee      	beq.n	800183c <HAL_RCC_OscConfig+0x334>
 800185e:	e014      	b.n	800188a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff fb56 	bl	8000f10 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f7ff fb52 	bl	8000f10 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e0b5      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187e:	4b3e      	ldr	r3, [pc, #248]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ee      	bne.n	8001868 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001890:	4b39      	ldr	r3, [pc, #228]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	4a38      	ldr	r2, [pc, #224]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80a1 	beq.w	80019e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018a6:	4b34      	ldr	r3, [pc, #208]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d05c      	beq.n	800196c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d141      	bne.n	800193e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ba:	4b31      	ldr	r3, [pc, #196]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fb26 	bl	8000f10 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff fb22 	bl	8000f10 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e087      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	4b27      	ldr	r3, [pc, #156]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	019b      	lsls	r3, r3, #6
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	3b01      	subs	r3, #1
 8001900:	041b      	lsls	r3, r3, #16
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	491b      	ldr	r1, [pc, #108]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7ff fafb 	bl	8000f10 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff faf7 	bl	8000f10 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e05c      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x416>
 800193c:	e054      	b.n	80019e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fae4 	bl	8000f10 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff fae0 	bl	8000f10 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e045      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x444>
 800196a:	e03d      	b.n	80019e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d107      	bne.n	8001984 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e038      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
 8001978:	40023800 	.word	0x40023800
 800197c:	40007000 	.word	0x40007000
 8001980:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x4ec>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d028      	beq.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d121      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d11a      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019b4:	4013      	ands	r3, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019bc:	4293      	cmp	r3, r2
 80019be:	d111      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	085b      	lsrs	r3, r3, #1
 80019cc:	3b01      	subs	r3, #1
 80019ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0cc      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d90c      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b65      	ldr	r3, [pc, #404]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0b8      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d020      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4a58      	ldr	r2, [pc, #352]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a70:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	494d      	ldr	r1, [pc, #308]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d044      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d119      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e07f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d003      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab6:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e067      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 0203 	bic.w	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4934      	ldr	r1, [pc, #208]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae8:	f7ff fa12 	bl	8000f10 <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7ff fa0e 	bl	8000f10 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e04f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 020c 	and.w	r2, r3, #12
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1eb      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d20c      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e032      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4916      	ldr	r1, [pc, #88]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	490e      	ldr	r1, [pc, #56]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b7e:	f000 f821 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	490a      	ldr	r1, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	5ccb      	ldrb	r3, [r1, r3]
 8001b92:	fa22 f303 	lsr.w	r3, r2, r3
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f89e 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023c00 	.word	0x40023c00
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	08005898 	.word	0x08005898
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000004 	.word	0x20000004

08001bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc8:	b094      	sub	sp, #80	; 0x50
 8001bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	647b      	str	r3, [r7, #68]	; 0x44
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bdc:	4b79      	ldr	r3, [pc, #484]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d00d      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x40>
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	f200 80e1 	bhi.w	8001db0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8001bf6:	e0db      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf8:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bfa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bfc:	e0db      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bfe:	4b73      	ldr	r3, [pc, #460]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x208>)
 8001c00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c02:	e0d8      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c04:	4b6f      	ldr	r3, [pc, #444]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0e:	4b6d      	ldr	r3, [pc, #436]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d063      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1a:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	099b      	lsrs	r3, r3, #6
 8001c20:	2200      	movs	r2, #0
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c2e:	2300      	movs	r3, #0
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
 8001c32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c36:	4622      	mov	r2, r4
 8001c38:	462b      	mov	r3, r5
 8001c3a:	f04f 0000 	mov.w	r0, #0
 8001c3e:	f04f 0100 	mov.w	r1, #0
 8001c42:	0159      	lsls	r1, r3, #5
 8001c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c48:	0150      	lsls	r0, r2, #5
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4621      	mov	r1, r4
 8001c50:	1a51      	subs	r1, r2, r1
 8001c52:	6139      	str	r1, [r7, #16]
 8001c54:	4629      	mov	r1, r5
 8001c56:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c68:	4659      	mov	r1, fp
 8001c6a:	018b      	lsls	r3, r1, #6
 8001c6c:	4651      	mov	r1, sl
 8001c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c72:	4651      	mov	r1, sl
 8001c74:	018a      	lsls	r2, r1, #6
 8001c76:	4651      	mov	r1, sl
 8001c78:	ebb2 0801 	subs.w	r8, r2, r1
 8001c7c:	4659      	mov	r1, fp
 8001c7e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c96:	4690      	mov	r8, r2
 8001c98:	4699      	mov	r9, r3
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	eb18 0303 	adds.w	r3, r8, r3
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	462b      	mov	r3, r5
 8001ca4:	eb49 0303 	adc.w	r3, r9, r3
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	024b      	lsls	r3, r1, #9
 8001cba:	4621      	mov	r1, r4
 8001cbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	024a      	lsls	r2, r1, #9
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cca:	2200      	movs	r2, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cd4:	f7fe fad6 	bl	8000284 <__aeabi_uldivmod>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4613      	mov	r3, r2
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ce0:	e058      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce2:	4b38      	ldr	r3, [pc, #224]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	099b      	lsrs	r3, r3, #6
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	4611      	mov	r1, r2
 8001cee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cf2:	623b      	str	r3, [r7, #32]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cfc:	4642      	mov	r2, r8
 8001cfe:	464b      	mov	r3, r9
 8001d00:	f04f 0000 	mov.w	r0, #0
 8001d04:	f04f 0100 	mov.w	r1, #0
 8001d08:	0159      	lsls	r1, r3, #5
 8001d0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d0e:	0150      	lsls	r0, r2, #5
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4641      	mov	r1, r8
 8001d16:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d1a:	4649      	mov	r1, r9
 8001d1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d34:	ebb2 040a 	subs.w	r4, r2, sl
 8001d38:	eb63 050b 	sbc.w	r5, r3, fp
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	00eb      	lsls	r3, r5, #3
 8001d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d4a:	00e2      	lsls	r2, r4, #3
 8001d4c:	4614      	mov	r4, r2
 8001d4e:	461d      	mov	r5, r3
 8001d50:	4643      	mov	r3, r8
 8001d52:	18e3      	adds	r3, r4, r3
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	464b      	mov	r3, r9
 8001d58:	eb45 0303 	adc.w	r3, r5, r3
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	028b      	lsls	r3, r1, #10
 8001d6e:	4621      	mov	r1, r4
 8001d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d74:	4621      	mov	r1, r4
 8001d76:	028a      	lsls	r2, r1, #10
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	61fa      	str	r2, [r7, #28]
 8001d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d88:	f7fe fa7c 	bl	8000284 <__aeabi_uldivmod>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4613      	mov	r3, r2
 8001d92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001da4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dae:	e002      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001db2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3750      	adds	r7, #80	; 0x50
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	00f42400 	.word	0x00f42400
 8001dcc:	007a1200 	.word	0x007a1200

08001dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000000 	.word	0x20000000

08001de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dec:	f7ff fff0 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	0a9b      	lsrs	r3, r3, #10
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4903      	ldr	r1, [pc, #12]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	080058a8 	.word	0x080058a8

08001e10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0203 	and.w	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	08db      	lsrs	r3, r3, #3
 8001e4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_RCC_GetClockConfig+0x60>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 020f 	and.w	r2, r3, #15
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	601a      	str	r2, [r3, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40023c00 	.word	0x40023c00

08001e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e041      	b.n	8001f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f839 	bl	8001f12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f000 f9c0 	bl	8002238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d001      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e04e      	b.n	8001fde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_TIM_Base_Start_IT+0xc4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d022      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6a:	d01d      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d018      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00e      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a19      	ldr	r2, [pc, #100]	; (8002000 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d004      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a18      	ldr	r2, [pc, #96]	; (8002004 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d111      	bne.n	8001fcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d010      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fca:	e007      	b.n	8001fdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	40000c00 	.word	0x40000c00
 8001ffc:	40010400 	.word	0x40010400
 8002000:	40014000 	.word	0x40014000
 8002004:	40001800 	.word	0x40001800

08002008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d020      	beq.n	800206c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01b      	beq.n	800206c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0202 	mvn.w	r2, #2
 800203c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8d2 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8c4 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f8d5 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	d020      	beq.n	80020b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0204 	mvn.w	r2, #4
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2202      	movs	r2, #2
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8ac 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f89e 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f8af 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d020      	beq.n	8002104 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01b      	beq.n	8002104 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0208 	mvn.w	r2, #8
 80020d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2204      	movs	r2, #4
 80020da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f886 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 80020f0:	e005      	b.n	80020fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f878 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f889 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d020      	beq.n	8002150 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01b      	beq.n	8002150 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0210 	mvn.w	r2, #16
 8002120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2208      	movs	r2, #8
 8002126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f860 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 800213c:	e005      	b.n	800214a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f852 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f863 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00c      	beq.n	8002174 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d007      	beq.n	8002174 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0201 	mvn.w	r2, #1
 800216c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fd76 	bl	8000c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00c      	beq.n	8002198 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f906 	bl	80023a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f834 	bl	8002224 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00c      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0220 	mvn.w	r2, #32
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f8d8 	bl	8002390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a46      	ldr	r2, [pc, #280]	; (8002364 <TIM_Base_SetConfig+0x12c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d013      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002256:	d00f      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a43      	ldr	r2, [pc, #268]	; (8002368 <TIM_Base_SetConfig+0x130>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00b      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a42      	ldr	r2, [pc, #264]	; (800236c <TIM_Base_SetConfig+0x134>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d007      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a41      	ldr	r2, [pc, #260]	; (8002370 <TIM_Base_SetConfig+0x138>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d003      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a40      	ldr	r2, [pc, #256]	; (8002374 <TIM_Base_SetConfig+0x13c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d108      	bne.n	800228a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a35      	ldr	r2, [pc, #212]	; (8002364 <TIM_Base_SetConfig+0x12c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d02b      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002298:	d027      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a32      	ldr	r2, [pc, #200]	; (8002368 <TIM_Base_SetConfig+0x130>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d023      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a31      	ldr	r2, [pc, #196]	; (800236c <TIM_Base_SetConfig+0x134>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01f      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a30      	ldr	r2, [pc, #192]	; (8002370 <TIM_Base_SetConfig+0x138>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01b      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a2f      	ldr	r2, [pc, #188]	; (8002374 <TIM_Base_SetConfig+0x13c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d017      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a2e      	ldr	r2, [pc, #184]	; (8002378 <TIM_Base_SetConfig+0x140>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a2d      	ldr	r2, [pc, #180]	; (800237c <TIM_Base_SetConfig+0x144>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00f      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <TIM_Base_SetConfig+0x148>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00b      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a2b      	ldr	r2, [pc, #172]	; (8002384 <TIM_Base_SetConfig+0x14c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a2a      	ldr	r2, [pc, #168]	; (8002388 <TIM_Base_SetConfig+0x150>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d003      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a29      	ldr	r2, [pc, #164]	; (800238c <TIM_Base_SetConfig+0x154>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d108      	bne.n	80022fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a10      	ldr	r2, [pc, #64]	; (8002364 <TIM_Base_SetConfig+0x12c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d003      	beq.n	8002330 <TIM_Base_SetConfig+0xf8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <TIM_Base_SetConfig+0x13c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d103      	bne.n	8002338 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b01      	cmp	r3, #1
 8002348:	d105      	bne.n	8002356 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f023 0201 	bic.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	611a      	str	r2, [r3, #16]
  }
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40010000 	.word	0x40010000
 8002368:	40000400 	.word	0x40000400
 800236c:	40000800 	.word	0x40000800
 8002370:	40000c00 	.word	0x40000c00
 8002374:	40010400 	.word	0x40010400
 8002378:	40014000 	.word	0x40014000
 800237c:	40014400 	.word	0x40014400
 8002380:	40014800 	.word	0x40014800
 8002384:	40001800 	.word	0x40001800
 8002388:	40001c00 	.word	0x40001c00
 800238c:	40002000 	.word	0x40002000

08002390 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f103 0208 	add.w	r2, r3, #8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f103 0208 	add.w	r2, r3, #8
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f103 0208 	add.w	r2, r3, #8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6892      	ldr	r2, [r2, #8]
 8002428:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6852      	ldr	r2, [r2, #4]
 8002432:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	d103      	bne.n	8002446 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	1e5a      	subs	r2, r3, #1
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002466:	b580      	push	{r7, lr}
 8002468:	b08c      	sub	sp, #48	; 0x30
 800246a:	af04      	add	r7, sp, #16
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	4613      	mov	r3, r2
 8002474:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4618      	mov	r0, r3
 800247c:	f001 f806 	bl	800348c <pvPortMalloc>
 8002480:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002488:	2058      	movs	r0, #88	; 0x58
 800248a:	f000 ffff 	bl	800348c <pvPortMalloc>
 800248e:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d008      	beq.n	80024a8 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002496:	2258      	movs	r2, #88	; 0x58
 8002498:	2100      	movs	r1, #0
 800249a:	69f8      	ldr	r0, [r7, #28]
 800249c:	f003 f93e 	bl	800571c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
 80024a6:	e005      	b.n	80024b4 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80024a8:	6978      	ldr	r0, [r7, #20]
 80024aa:	f001 f8a9 	bl	8003600 <vPortFree>
 80024ae:	e001      	b.n	80024b4 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d013      	beq.n	80024e2 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	2300      	movs	r3, #0
 80024be:	9303      	str	r3, [sp, #12]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	9302      	str	r3, [sp, #8]
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f80e 	bl	80024f2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80024d6:	69f8      	ldr	r0, [r7, #28]
 80024d8:	f000 f89a 	bl	8002610 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80024dc:	2301      	movs	r3, #1
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	e002      	b.n	80024e8 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80024e8:	69bb      	ldr	r3, [r7, #24]
    }
 80024ea:	4618      	mov	r0, r3
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b088      	sub	sp, #32
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002502:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	461a      	mov	r2, r3
 800250a:	21a5      	movs	r1, #165	; 0xa5
 800250c:	f003 f906 	bl	800571c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800251a:	3b01      	subs	r3, #1
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f023 0307 	bic.w	r3, r3, #7
 8002528:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	617b      	str	r3, [r7, #20]
    }
 8002546:	bf00      	nop
 8002548:	e7fe      	b.n	8002548 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01e      	beq.n	800258e <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	e012      	b.n	800257c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	4413      	add	r3, r2
 800255c:	7819      	ldrb	r1, [r3, #0]
 800255e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	4413      	add	r3, r2
 8002564:	3334      	adds	r3, #52	; 0x34
 8002566:	460a      	mov	r2, r1
 8002568:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	4413      	add	r3, r2
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3301      	adds	r3, #1
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b09      	cmp	r3, #9
 8002580:	d9e9      	bls.n	8002556 <prvInitialiseNewTask+0x64>
 8002582:	e000      	b.n	8002586 <prvInitialiseNewTask+0x94>
            {
                break;
 8002584:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002590:	2b04      	cmp	r3, #4
 8002592:	d90a      	bls.n	80025aa <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	613b      	str	r3, [r7, #16]
    }
 80025a6:	bf00      	nop
 80025a8:	e7fe      	b.n	80025a8 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d901      	bls.n	80025b4 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025b0:	2304      	movs	r3, #4
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80025ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025be:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	3304      	adds	r3, #4
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff17 	bl	80023f8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	3318      	adds	r3, #24
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff12 	bl	80023f8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	f1c3 0205 	rsb	r2, r3, #5
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	68f9      	ldr	r1, [r7, #12]
 80025ee:	69b8      	ldr	r0, [r7, #24]
 80025f0:	f000 fc74 	bl	8002edc <pxPortInitialiseStack>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002604:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002606:	bf00      	nop
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002610:	b5b0      	push	{r4, r5, r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af02      	add	r7, sp, #8
 8002616:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002618:	f000 fe0c 	bl	8003234 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800261c:	4b4f      	ldr	r3, [pc, #316]	; (800275c <prvAddNewTaskToReadyList+0x14c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	4a4e      	ldr	r2, [pc, #312]	; (800275c <prvAddNewTaskToReadyList+0x14c>)
 8002624:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002626:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <prvAddNewTaskToReadyList+0x150>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d109      	bne.n	8002642 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800262e:	4a4c      	ldr	r2, [pc, #304]	; (8002760 <prvAddNewTaskToReadyList+0x150>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002634:	4b49      	ldr	r3, [pc, #292]	; (800275c <prvAddNewTaskToReadyList+0x14c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d110      	bne.n	800265e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800263c:	f000 fbb4 	bl	8002da8 <prvInitialiseTaskLists>
 8002640:	e00d      	b.n	800265e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002642:	4b48      	ldr	r3, [pc, #288]	; (8002764 <prvAddNewTaskToReadyList+0x154>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800264a:	4b45      	ldr	r3, [pc, #276]	; (8002760 <prvAddNewTaskToReadyList+0x150>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	429a      	cmp	r2, r3
 8002656:	d802      	bhi.n	800265e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002658:	4a41      	ldr	r2, [pc, #260]	; (8002760 <prvAddNewTaskToReadyList+0x150>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800265e:	4b42      	ldr	r3, [pc, #264]	; (8002768 <prvAddNewTaskToReadyList+0x158>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	4a40      	ldr	r2, [pc, #256]	; (8002768 <prvAddNewTaskToReadyList+0x158>)
 8002666:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002668:	4b3f      	ldr	r3, [pc, #252]	; (8002768 <prvAddNewTaskToReadyList+0x158>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <prvAddNewTaskToReadyList+0x94>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4618      	mov	r0, r3
 800267a:	f002 fe09 	bl	8005290 <SEGGER_SYSVIEW_OnTaskCreate>
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	461d      	mov	r5, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	461c      	mov	r4, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	1ae3      	subs	r3, r4, r3
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	462b      	mov	r3, r5
 80026a0:	f001 f970 	bl	8003984 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 fe76 	bl	8005398 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	2201      	movs	r2, #1
 80026b2:	409a      	lsls	r2, r3
 80026b4:	4b2d      	ldr	r3, [pc, #180]	; (800276c <prvAddNewTaskToReadyList+0x15c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	4a2c      	ldr	r2, [pc, #176]	; (800276c <prvAddNewTaskToReadyList+0x15c>)
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c2:	492b      	ldr	r1, [pc, #172]	; (8002770 <prvAddNewTaskToReadyList+0x160>)
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	3304      	adds	r3, #4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	3204      	adds	r2, #4
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	1d1a      	adds	r2, r3, #4
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <prvAddNewTaskToReadyList+0x160>)
 8002702:	441a      	add	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	615a      	str	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270c:	4918      	ldr	r1, [pc, #96]	; (8002770 <prvAddNewTaskToReadyList+0x160>)
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	1c59      	adds	r1, r3, #1
 800271c:	4814      	ldr	r0, [pc, #80]	; (8002770 <prvAddNewTaskToReadyList+0x160>)
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4403      	add	r3, r0
 8002728:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800272a:	f000 fdb3 	bl	8003294 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800272e:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <prvAddNewTaskToReadyList+0x154>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00e      	beq.n	8002754 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <prvAddNewTaskToReadyList+0x150>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	429a      	cmp	r2, r3
 8002742:	d207      	bcs.n	8002754 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <prvAddNewTaskToReadyList+0x164>)
 8002746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bdb0      	pop	{r4, r5, r7, pc}
 800275c:	20000164 	.word	0x20000164
 8002760:	2000008c 	.word	0x2000008c
 8002764:	20000170 	.word	0x20000170
 8002768:	20000180 	.word	0x20000180
 800276c:	2000016c 	.word	0x2000016c
 8002770:	20000090 	.word	0x20000090
 8002774:	e000ed04 	.word	0xe000ed04

08002778 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800277e:	4b24      	ldr	r3, [pc, #144]	; (8002810 <vTaskStartScheduler+0x98>)
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	2300      	movs	r3, #0
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2300      	movs	r3, #0
 8002788:	2282      	movs	r2, #130	; 0x82
 800278a:	4922      	ldr	r1, [pc, #136]	; (8002814 <vTaskStartScheduler+0x9c>)
 800278c:	4822      	ldr	r0, [pc, #136]	; (8002818 <vTaskStartScheduler+0xa0>)
 800278e:	f7ff fe6a 	bl	8002466 <xTaskCreate>
 8002792:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d124      	bne.n	80027e4 <vTaskStartScheduler+0x6c>
        __asm volatile
 800279a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	60bb      	str	r3, [r7, #8]
    }
 80027ac:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80027ae:	4b1b      	ldr	r3, [pc, #108]	; (800281c <vTaskStartScheduler+0xa4>)
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295
 80027b4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <vTaskStartScheduler+0xa8>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <vTaskStartScheduler+0xac>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80027c2:	4b19      	ldr	r3, [pc, #100]	; (8002828 <vTaskStartScheduler+0xb0>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <vTaskStartScheduler+0x98>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d102      	bne.n	80027d4 <vTaskStartScheduler+0x5c>
 80027ce:	f002 fd43 	bl	8005258 <SEGGER_SYSVIEW_OnIdle>
 80027d2:	e004      	b.n	80027de <vTaskStartScheduler+0x66>
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <vTaskStartScheduler+0xb0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f002 fd9b 	bl	8005314 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80027de:	f000 fc09 	bl	8002ff4 <xPortStartScheduler>
 80027e2:	e00e      	b.n	8002802 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ea:	d10a      	bne.n	8002802 <vTaskStartScheduler+0x8a>
        __asm volatile
 80027ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f0:	f383 8811 	msr	BASEPRI, r3
 80027f4:	f3bf 8f6f 	isb	sy
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	607b      	str	r3, [r7, #4]
    }
 80027fe:	bf00      	nop
 8002800:	e7fe      	b.n	8002800 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <vTaskStartScheduler+0xb4>)
 8002804:	681b      	ldr	r3, [r3, #0]
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000188 	.word	0x20000188
 8002814:	080057cc 	.word	0x080057cc
 8002818:	08002d79 	.word	0x08002d79
 800281c:	20000184 	.word	0x20000184
 8002820:	20000170 	.word	0x20000170
 8002824:	20000168 	.word	0x20000168
 8002828:	2000008c 	.word	0x2000008c
 800282c:	2000000c 	.word	0x2000000c

08002830 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <vTaskSuspendAll+0x18>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	4a03      	ldr	r2, [pc, #12]	; (8002848 <vTaskSuspendAll+0x18>)
 800283c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800283e:	bf00      	nop
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	2000018c 	.word	0x2000018c

0800284c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800285a:	4b73      	ldr	r3, [pc, #460]	; (8002a28 <xTaskResumeAll+0x1dc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10a      	bne.n	8002878 <xTaskResumeAll+0x2c>
        __asm volatile
 8002862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002866:	f383 8811 	msr	BASEPRI, r3
 800286a:	f3bf 8f6f 	isb	sy
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	607b      	str	r3, [r7, #4]
    }
 8002874:	bf00      	nop
 8002876:	e7fe      	b.n	8002876 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002878:	f000 fcdc 	bl	8003234 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800287c:	4b6a      	ldr	r3, [pc, #424]	; (8002a28 <xTaskResumeAll+0x1dc>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3b01      	subs	r3, #1
 8002882:	4a69      	ldr	r2, [pc, #420]	; (8002a28 <xTaskResumeAll+0x1dc>)
 8002884:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002886:	4b68      	ldr	r3, [pc, #416]	; (8002a28 <xTaskResumeAll+0x1dc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 80c4 	bne.w	8002a18 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002890:	4b66      	ldr	r3, [pc, #408]	; (8002a2c <xTaskResumeAll+0x1e0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80bf 	beq.w	8002a18 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800289a:	e08e      	b.n	80029ba <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800289c:	4b64      	ldr	r3, [pc, #400]	; (8002a30 <xTaskResumeAll+0x1e4>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	6a12      	ldr	r2, [r2, #32]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	69d2      	ldr	r2, [r2, #28]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3318      	adds	r3, #24
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d103      	bne.n	80028d2 <xTaskResumeAll+0x86>
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	6a1a      	ldr	r2, [r3, #32]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	2200      	movs	r2, #0
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	1e5a      	subs	r2, r3, #1
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	68d2      	ldr	r2, [r2, #12]
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	6892      	ldr	r2, [r2, #8]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	3304      	adds	r3, #4
 8002904:	429a      	cmp	r2, r3
 8002906:	d103      	bne.n	8002910 <xTaskResumeAll+0xc4>
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2200      	movs	r2, #0
 8002914:	615a      	str	r2, [r3, #20]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	1e5a      	subs	r2, r3, #1
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fd38 	bl	8005398 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	2201      	movs	r2, #1
 800292e:	409a      	lsls	r2, r3
 8002930:	4b40      	ldr	r3, [pc, #256]	; (8002a34 <xTaskResumeAll+0x1e8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4313      	orrs	r3, r2
 8002936:	4a3f      	ldr	r2, [pc, #252]	; (8002a34 <xTaskResumeAll+0x1e8>)
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293e:	493e      	ldr	r1, [pc, #248]	; (8002a38 <xTaskResumeAll+0x1ec>)
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3304      	adds	r3, #4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	3204      	adds	r2, #4
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	1d1a      	adds	r2, r3, #4
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4a2e      	ldr	r2, [pc, #184]	; (8002a38 <xTaskResumeAll+0x1ec>)
 800297e:	441a      	add	r2, r3
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	615a      	str	r2, [r3, #20]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002988:	492b      	ldr	r1, [pc, #172]	; (8002a38 <xTaskResumeAll+0x1ec>)
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	1c59      	adds	r1, r3, #1
 8002998:	4827      	ldr	r0, [pc, #156]	; (8002a38 <xTaskResumeAll+0x1ec>)
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4403      	add	r3, r0
 80029a4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029aa:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <xTaskResumeAll+0x1f0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d302      	bcc.n	80029ba <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <xTaskResumeAll+0x1f4>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029ba:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <xTaskResumeAll+0x1e4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f47f af6c 	bne.w	800289c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80029ca:	f000 fa6b 	bl	8002ea4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <xTaskResumeAll+0x1f8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d010      	beq.n	80029fc <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80029da:	f000 f849 	bl	8002a70 <xTaskIncrementTick>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80029e4:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <xTaskResumeAll+0x1f4>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f1      	bne.n	80029da <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <xTaskResumeAll+0x1f8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <xTaskResumeAll+0x1f4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d009      	beq.n	8002a18 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002a04:	2301      	movs	r3, #1
 8002a06:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <xTaskResumeAll+0x1fc>)
 8002a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002a18:	f000 fc3c 	bl	8003294 <vPortExitCritical>

    return xAlreadyYielded;
 8002a1c:	69bb      	ldr	r3, [r7, #24]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	2000018c 	.word	0x2000018c
 8002a2c:	20000164 	.word	0x20000164
 8002a30:	20000124 	.word	0x20000124
 8002a34:	2000016c 	.word	0x2000016c
 8002a38:	20000090 	.word	0x20000090
 8002a3c:	2000008c 	.word	0x2000008c
 8002a40:	20000178 	.word	0x20000178
 8002a44:	20000174 	.word	0x20000174
 8002a48:	e000ed04 	.word	0xe000ed04

08002a4c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a52:	f000 fcdb 	bl	800340c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002a5a:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <xTaskGetTickCountFromISR+0x20>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a60:	683b      	ldr	r3, [r7, #0]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000168 	.word	0x20000168

08002a70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a7a:	4b7f      	ldr	r3, [pc, #508]	; (8002c78 <xTaskIncrementTick+0x208>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 80f0 	bne.w	8002c64 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a84:	4b7d      	ldr	r3, [pc, #500]	; (8002c7c <xTaskIncrementTick+0x20c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a8c:	4a7b      	ldr	r2, [pc, #492]	; (8002c7c <xTaskIncrementTick+0x20c>)
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d120      	bne.n	8002ada <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a98:	4b79      	ldr	r3, [pc, #484]	; (8002c80 <xTaskIncrementTick+0x210>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	607b      	str	r3, [r7, #4]
    }
 8002ab4:	bf00      	nop
 8002ab6:	e7fe      	b.n	8002ab6 <xTaskIncrementTick+0x46>
 8002ab8:	4b71      	ldr	r3, [pc, #452]	; (8002c80 <xTaskIncrementTick+0x210>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	4b71      	ldr	r3, [pc, #452]	; (8002c84 <xTaskIncrementTick+0x214>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6f      	ldr	r2, [pc, #444]	; (8002c80 <xTaskIncrementTick+0x210>)
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4a6f      	ldr	r2, [pc, #444]	; (8002c84 <xTaskIncrementTick+0x214>)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b6e      	ldr	r3, [pc, #440]	; (8002c88 <xTaskIncrementTick+0x218>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	4a6d      	ldr	r2, [pc, #436]	; (8002c88 <xTaskIncrementTick+0x218>)
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	f000 f9e5 	bl	8002ea4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ada:	4b6c      	ldr	r3, [pc, #432]	; (8002c8c <xTaskIncrementTick+0x21c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6a3a      	ldr	r2, [r7, #32]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	f0c0 80aa 	bcc.w	8002c3a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ae6:	4b66      	ldr	r3, [pc, #408]	; (8002c80 <xTaskIncrementTick+0x210>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d104      	bne.n	8002afa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002af0:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <xTaskIncrementTick+0x21c>)
 8002af2:	f04f 32ff 	mov.w	r2, #4294967295
 8002af6:	601a      	str	r2, [r3, #0]
                    break;
 8002af8:	e09f      	b.n	8002c3a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002afa:	4b61      	ldr	r3, [pc, #388]	; (8002c80 <xTaskIncrementTick+0x210>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002b0a:	6a3a      	ldr	r2, [r7, #32]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d203      	bcs.n	8002b1a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b12:	4a5e      	ldr	r2, [pc, #376]	; (8002c8c <xTaskIncrementTick+0x21c>)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002b18:	e08f      	b.n	8002c3a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	68d2      	ldr	r2, [r2, #12]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	6892      	ldr	r2, [r2, #8]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d103      	bne.n	8002b48 <xTaskIncrementTick+0xd8>
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	615a      	str	r2, [r3, #20]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	1e5a      	subs	r2, r3, #1
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01e      	beq.n	8002b9e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	6a12      	ldr	r2, [r2, #32]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	69d2      	ldr	r2, [r2, #28]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	3318      	adds	r3, #24
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d103      	bne.n	8002b8e <xTaskIncrementTick+0x11e>
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	6a1a      	ldr	r2, [r3, #32]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2200      	movs	r2, #0
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	1e5a      	subs	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f002 fbf9 	bl	8005398 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	2201      	movs	r2, #1
 8002bac:	409a      	lsls	r2, r3
 8002bae:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <xTaskIncrementTick+0x220>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	4a36      	ldr	r2, [pc, #216]	; (8002c90 <xTaskIncrementTick+0x220>)
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	4935      	ldr	r1, [pc, #212]	; (8002c94 <xTaskIncrementTick+0x224>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3304      	adds	r3, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	60da      	str	r2, [r3, #12]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	3204      	adds	r2, #4
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	1d1a      	adds	r2, r3, #4
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <xTaskIncrementTick+0x224>)
 8002bfc:	441a      	add	r2, r3
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	615a      	str	r2, [r3, #20]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c06:	4923      	ldr	r1, [pc, #140]	; (8002c94 <xTaskIncrementTick+0x224>)
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c59      	adds	r1, r3, #1
 8002c16:	481f      	ldr	r0, [pc, #124]	; (8002c94 <xTaskIncrementTick+0x224>)
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4403      	add	r3, r0
 8002c22:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c28:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <xTaskIncrementTick+0x228>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	f67f af59 	bls.w	8002ae6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002c34:	2301      	movs	r3, #1
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c38:	e755      	b.n	8002ae6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <xTaskIncrementTick+0x228>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c40:	4914      	ldr	r1, [pc, #80]	; (8002c94 <xTaskIncrementTick+0x224>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d901      	bls.n	8002c56 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8002c52:	2301      	movs	r3, #1
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <xTaskIncrementTick+0x22c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
 8002c62:	e004      	b.n	8002c6e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002c64:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <xTaskIncrementTick+0x230>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <xTaskIncrementTick+0x230>)
 8002c6c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3728      	adds	r7, #40	; 0x28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	2000018c 	.word	0x2000018c
 8002c7c:	20000168 	.word	0x20000168
 8002c80:	2000011c 	.word	0x2000011c
 8002c84:	20000120 	.word	0x20000120
 8002c88:	2000017c 	.word	0x2000017c
 8002c8c:	20000184 	.word	0x20000184
 8002c90:	2000016c 	.word	0x2000016c
 8002c94:	20000090 	.word	0x20000090
 8002c98:	2000008c 	.word	0x2000008c
 8002c9c:	20000178 	.word	0x20000178
 8002ca0:	20000174 	.word	0x20000174

08002ca4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002caa:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <vTaskSwitchContext+0xbc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002cb2:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <vTaskSwitchContext+0xc0>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002cb8:	e04d      	b.n	8002d56 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002cba:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <vTaskSwitchContext+0xc0>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cc0:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <vTaskSwitchContext+0xc4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	fab3 f383 	clz	r3, r3
 8002ccc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002cce:	7afb      	ldrb	r3, [r7, #11]
 8002cd0:	f1c3 031f 	rsb	r3, r3, #31
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	4925      	ldr	r1, [pc, #148]	; (8002d6c <vTaskSwitchContext+0xc8>)
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10a      	bne.n	8002d00 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	607b      	str	r3, [r7, #4]
    }
 8002cfc:	bf00      	nop
 8002cfe:	e7fe      	b.n	8002cfe <vTaskSwitchContext+0x5a>
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <vTaskSwitchContext+0xc8>)
 8002d0c:	4413      	add	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	3308      	adds	r3, #8
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d104      	bne.n	8002d30 <vTaskSwitchContext+0x8c>
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	4a0e      	ldr	r2, [pc, #56]	; (8002d70 <vTaskSwitchContext+0xcc>)
 8002d38:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <vTaskSwitchContext+0xcc>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <vTaskSwitchContext+0xd0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d102      	bne.n	8002d4c <vTaskSwitchContext+0xa8>
 8002d46:	f002 fa87 	bl	8005258 <SEGGER_SYSVIEW_OnIdle>
}
 8002d4a:	e004      	b.n	8002d56 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <vTaskSwitchContext+0xcc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f002 fadf 	bl	8005314 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002d56:	bf00      	nop
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000018c 	.word	0x2000018c
 8002d64:	20000178 	.word	0x20000178
 8002d68:	2000016c 	.word	0x2000016c
 8002d6c:	20000090 	.word	0x20000090
 8002d70:	2000008c 	.word	0x2000008c
 8002d74:	20000188 	.word	0x20000188

08002d78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002d80:	f000 f852 	bl	8002e28 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <prvIdleTask+0x28>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d9f9      	bls.n	8002d80 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <prvIdleTask+0x2c>)
 8002d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002d9c:	e7f0      	b.n	8002d80 <prvIdleTask+0x8>
 8002d9e:	bf00      	nop
 8002da0:	20000090 	.word	0x20000090
 8002da4:	e000ed04 	.word	0xe000ed04

08002da8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	e00c      	b.n	8002dce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <prvInitialiseTaskLists+0x60>)
 8002dc0:	4413      	add	r3, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff faf8 	bl	80023b8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d9ef      	bls.n	8002db4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002dd4:	480d      	ldr	r0, [pc, #52]	; (8002e0c <prvInitialiseTaskLists+0x64>)
 8002dd6:	f7ff faef 	bl	80023b8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002dda:	480d      	ldr	r0, [pc, #52]	; (8002e10 <prvInitialiseTaskLists+0x68>)
 8002ddc:	f7ff faec 	bl	80023b8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002de0:	480c      	ldr	r0, [pc, #48]	; (8002e14 <prvInitialiseTaskLists+0x6c>)
 8002de2:	f7ff fae9 	bl	80023b8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002de6:	480c      	ldr	r0, [pc, #48]	; (8002e18 <prvInitialiseTaskLists+0x70>)
 8002de8:	f7ff fae6 	bl	80023b8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002dec:	480b      	ldr	r0, [pc, #44]	; (8002e1c <prvInitialiseTaskLists+0x74>)
 8002dee:	f7ff fae3 	bl	80023b8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <prvInitialiseTaskLists+0x78>)
 8002df4:	4a05      	ldr	r2, [pc, #20]	; (8002e0c <prvInitialiseTaskLists+0x64>)
 8002df6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <prvInitialiseTaskLists+0x7c>)
 8002dfa:	4a05      	ldr	r2, [pc, #20]	; (8002e10 <prvInitialiseTaskLists+0x68>)
 8002dfc:	601a      	str	r2, [r3, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000090 	.word	0x20000090
 8002e0c:	200000f4 	.word	0x200000f4
 8002e10:	20000108 	.word	0x20000108
 8002e14:	20000124 	.word	0x20000124
 8002e18:	20000138 	.word	0x20000138
 8002e1c:	20000150 	.word	0x20000150
 8002e20:	2000011c 	.word	0x2000011c
 8002e24:	20000120 	.word	0x20000120

08002e28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e2e:	e019      	b.n	8002e64 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002e30:	f000 fa00 	bl	8003234 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e34:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <prvCheckTasksWaitingTermination+0x50>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fae6 	bl	8002412 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <prvCheckTasksWaitingTermination+0x54>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <prvCheckTasksWaitingTermination+0x54>)
 8002e4e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <prvCheckTasksWaitingTermination+0x58>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <prvCheckTasksWaitingTermination+0x58>)
 8002e58:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002e5a:	f000 fa1b 	bl	8003294 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f810 	bl	8002e84 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <prvCheckTasksWaitingTermination+0x58>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e1      	bne.n	8002e30 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000138 	.word	0x20000138
 8002e7c:	20000164 	.word	0x20000164
 8002e80:	2000014c 	.word	0x2000014c

08002e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fbb5 	bl	8003600 <vPortFree>
            vPortFree( pxTCB );
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fbb2 	bl	8003600 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <prvResetNextTaskUnblockTime+0x30>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <prvResetNextTaskUnblockTime+0x34>)
 8002eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002eba:	e005      	b.n	8002ec8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <prvResetNextTaskUnblockTime+0x30>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <prvResetNextTaskUnblockTime+0x34>)
 8002ec6:	6013      	str	r3, [r2, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	2000011c 	.word	0x2000011c
 8002ed8:	20000184 	.word	0x20000184

08002edc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3b04      	subs	r3, #4
 8002eec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ef4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3b04      	subs	r3, #4
 8002efa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f023 0201 	bic.w	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3b04      	subs	r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f0c:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <pxPortInitialiseStack+0x64>)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3b14      	subs	r3, #20
 8002f16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3b04      	subs	r3, #4
 8002f22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f06f 0202 	mvn.w	r2, #2
 8002f2a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3b20      	subs	r3, #32
 8002f30:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002f32:	68fb      	ldr	r3, [r7, #12]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	08002f45 	.word	0x08002f45

08002f44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002f4e:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <prvTaskExitError+0x54>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f56:	d00a      	beq.n	8002f6e <prvTaskExitError+0x2a>
        __asm volatile
 8002f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	60fb      	str	r3, [r7, #12]
    }
 8002f6a:	bf00      	nop
 8002f6c:	e7fe      	b.n	8002f6c <prvTaskExitError+0x28>
        __asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	60bb      	str	r3, [r7, #8]
    }
 8002f80:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002f82:	bf00      	nop
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0fc      	beq.n	8002f84 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	20000010 	.word	0x20000010
 8002f9c:	00000000 	.word	0x00000000

08002fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <pxCurrentTCBConst2>)
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	6808      	ldr	r0, [r1, #0]
 8002fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002faa:	f380 8809 	msr	PSP, r0
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f04f 0000 	mov.w	r0, #0
 8002fb6:	f380 8811 	msr	BASEPRI, r0
 8002fba:	4770      	bx	lr
 8002fbc:	f3af 8000 	nop.w

08002fc0 <pxCurrentTCBConst2>:
 8002fc0:	2000008c 	.word	0x2000008c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop

08002fc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002fc8:	4808      	ldr	r0, [pc, #32]	; (8002fec <prvPortStartFirstTask+0x24>)
 8002fca:	6800      	ldr	r0, [r0, #0]
 8002fcc:	6800      	ldr	r0, [r0, #0]
 8002fce:	f380 8808 	msr	MSP, r0
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f380 8814 	msr	CONTROL, r0
 8002fda:	b662      	cpsie	i
 8002fdc:	b661      	cpsie	f
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	df00      	svc	0
 8002fe8:	bf00      	nop
 8002fea:	0000      	.short	0x0000
 8002fec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop

08002ff4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ffa:	4b46      	ldr	r3, [pc, #280]	; (8003114 <xPortStartScheduler+0x120>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a46      	ldr	r2, [pc, #280]	; (8003118 <xPortStartScheduler+0x124>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d10a      	bne.n	800301a <xPortStartScheduler+0x26>
        __asm volatile
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	613b      	str	r3, [r7, #16]
    }
 8003016:	bf00      	nop
 8003018:	e7fe      	b.n	8003018 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800301a:	4b3e      	ldr	r3, [pc, #248]	; (8003114 <xPortStartScheduler+0x120>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a3f      	ldr	r2, [pc, #252]	; (800311c <xPortStartScheduler+0x128>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10a      	bne.n	800303a <xPortStartScheduler+0x46>
        __asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	60fb      	str	r3, [r7, #12]
    }
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <xPortStartScheduler+0x12c>)
 800303c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	22ff      	movs	r2, #255	; 0xff
 800304a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800305c:	b2da      	uxtb	r2, r3
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <xPortStartScheduler+0x130>)
 8003060:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003062:	4b31      	ldr	r3, [pc, #196]	; (8003128 <xPortStartScheduler+0x134>)
 8003064:	2207      	movs	r2, #7
 8003066:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003068:	e009      	b.n	800307e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <xPortStartScheduler+0x134>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3b01      	subs	r3, #1
 8003070:	4a2d      	ldr	r2, [pc, #180]	; (8003128 <xPortStartScheduler+0x134>)
 8003072:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003086:	2b80      	cmp	r3, #128	; 0x80
 8003088:	d0ef      	beq.n	800306a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800308a:	4b27      	ldr	r3, [pc, #156]	; (8003128 <xPortStartScheduler+0x134>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	d00a      	beq.n	80030ac <xPortStartScheduler+0xb8>
        __asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	60bb      	str	r3, [r7, #8]
    }
 80030a8:	bf00      	nop
 80030aa:	e7fe      	b.n	80030aa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030ac:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <xPortStartScheduler+0x134>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <xPortStartScheduler+0x134>)
 80030b4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030b6:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <xPortStartScheduler+0x134>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030be:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <xPortStartScheduler+0x134>)
 80030c0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80030ca:	4b18      	ldr	r3, [pc, #96]	; (800312c <xPortStartScheduler+0x138>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a17      	ldr	r2, [pc, #92]	; (800312c <xPortStartScheduler+0x138>)
 80030d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80030d6:	4b15      	ldr	r3, [pc, #84]	; (800312c <xPortStartScheduler+0x138>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a14      	ldr	r2, [pc, #80]	; (800312c <xPortStartScheduler+0x138>)
 80030dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80030e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80030e2:	f000 f963 	bl	80033ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <xPortStartScheduler+0x13c>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80030ec:	f000 f982 	bl	80033f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <xPortStartScheduler+0x140>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0f      	ldr	r2, [pc, #60]	; (8003134 <xPortStartScheduler+0x140>)
 80030f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80030fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80030fc:	f7ff ff64 	bl	8002fc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003100:	f7ff fdd0 	bl	8002ca4 <vTaskSwitchContext>
    prvTaskExitError();
 8003104:	f7ff ff1e 	bl	8002f44 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	e000ed00 	.word	0xe000ed00
 8003118:	410fc271 	.word	0x410fc271
 800311c:	410fc270 	.word	0x410fc270
 8003120:	e000e400 	.word	0xe000e400
 8003124:	20000190 	.word	0x20000190
 8003128:	20000194 	.word	0x20000194
 800312c:	e000ed20 	.word	0xe000ed20
 8003130:	20000010 	.word	0x20000010
 8003134:	e000ef34 	.word	0xe000ef34

08003138 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <vInitPrioGroupValue+0xe4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a37      	ldr	r2, [pc, #220]	; (8003220 <vInitPrioGroupValue+0xe8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d10a      	bne.n	800315e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	613b      	str	r3, [r7, #16]
    }
 800315a:	bf00      	nop
 800315c:	e7fe      	b.n	800315c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800315e:	4b2f      	ldr	r3, [pc, #188]	; (800321c <vInitPrioGroupValue+0xe4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a30      	ldr	r2, [pc, #192]	; (8003224 <vInitPrioGroupValue+0xec>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d10a      	bne.n	800317e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	60fb      	str	r3, [r7, #12]
    }
 800317a:	bf00      	nop
 800317c:	e7fe      	b.n	800317c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800317e:	4b2a      	ldr	r3, [pc, #168]	; (8003228 <vInitPrioGroupValue+0xf0>)
 8003180:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	22ff      	movs	r2, #255	; 0xff
 800318e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b22      	ldr	r3, [pc, #136]	; (800322c <vInitPrioGroupValue+0xf4>)
 80031a4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031a8:	2207      	movs	r2, #7
 80031aa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031ac:	e009      	b.n	80031c2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	4a1e      	ldr	r2, [pc, #120]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031b6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b80      	cmp	r3, #128	; 0x80
 80031cc:	d0ef      	beq.n	80031ae <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031ce:	4b18      	ldr	r3, [pc, #96]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1c3 0307 	rsb	r3, r3, #7
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d00a      	beq.n	80031f0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	60bb      	str	r3, [r7, #8]
    }
 80031ec:	bf00      	nop
 80031ee:	e7fe      	b.n	80031ee <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	4a0e      	ldr	r2, [pc, #56]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031f8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <vInitPrioGroupValue+0xf8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <vInitPrioGroupValue+0xf8>)
 8003204:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000ed00 	.word	0xe000ed00
 8003220:	410fc271 	.word	0x410fc271
 8003224:	410fc270 	.word	0x410fc270
 8003228:	e000e400 	.word	0xe000e400
 800322c:	20000190 	.word	0x20000190
 8003230:	20000194 	.word	0x20000194

08003234 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
        __asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	607b      	str	r3, [r7, #4]
    }
 800324c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <vPortEnterCritical+0x58>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <vPortEnterCritical+0x58>)
 8003256:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <vPortEnterCritical+0x58>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d10f      	bne.n	8003280 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <vPortEnterCritical+0x5c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <vPortEnterCritical+0x4c>
        __asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	603b      	str	r3, [r7, #0]
    }
 800327c:	bf00      	nop
 800327e:	e7fe      	b.n	800327e <vPortEnterCritical+0x4a>
    }
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	20000010 	.word	0x20000010
 8003290:	e000ed04 	.word	0xe000ed04

08003294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <vPortExitCritical+0x50>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <vPortExitCritical+0x24>
        __asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	607b      	str	r3, [r7, #4]
    }
 80032b4:	bf00      	nop
 80032b6:	e7fe      	b.n	80032b6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <vPortExitCritical+0x50>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3b01      	subs	r3, #1
 80032be:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <vPortExitCritical+0x50>)
 80032c0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <vPortExitCritical+0x50>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d105      	bne.n	80032d6 <vPortExitCritical+0x42>
 80032ca:	2300      	movs	r3, #0
 80032cc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80032d4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20000010 	.word	0x20000010
	...

080032f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80032f0:	f3ef 8009 	mrs	r0, PSP
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	4b15      	ldr	r3, [pc, #84]	; (8003350 <pxCurrentTCBConst>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	f01e 0f10 	tst.w	lr, #16
 8003300:	bf08      	it	eq
 8003302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800330a:	6010      	str	r0, [r2, #0]
 800330c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003314:	f380 8811 	msr	BASEPRI, r0
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f7ff fcc0 	bl	8002ca4 <vTaskSwitchContext>
 8003324:	f04f 0000 	mov.w	r0, #0
 8003328:	f380 8811 	msr	BASEPRI, r0
 800332c:	bc09      	pop	{r0, r3}
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	6808      	ldr	r0, [r1, #0]
 8003332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003336:	f01e 0f10 	tst.w	lr, #16
 800333a:	bf08      	it	eq
 800333c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003340:	f380 8809 	msr	PSP, r0
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	f3af 8000 	nop.w

08003350 <pxCurrentTCBConst>:
 8003350:	2000008c 	.word	0x2000008c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop

08003358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
        __asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	607b      	str	r3, [r7, #4]
    }
 8003370:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003372:	f001 fef7 	bl	8005164 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003376:	f7ff fb7b 	bl	8002a70 <xTaskIncrementTick>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d006      	beq.n	800338e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003380:	f001 ff4e 	bl	8005220 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <SysTick_Handler+0x50>)
 8003386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e001      	b.n	8003392 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800338e:	f001 ff2b 	bl	80051e8 <SEGGER_SYSVIEW_RecordExitISR>
 8003392:	2300      	movs	r3, #0
 8003394:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f383 8811 	msr	BASEPRI, r3
    }
 800339c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	e000ed04 	.word	0xe000ed04

080033ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <vPortSetupTimerInterrupt+0x34>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <vPortSetupTimerInterrupt+0x38>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <vPortSetupTimerInterrupt+0x3c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <vPortSetupTimerInterrupt+0x40>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	099b      	lsrs	r3, r3, #6
 80033c8:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <vPortSetupTimerInterrupt+0x44>)
 80033ca:	3b01      	subs	r3, #1
 80033cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <vPortSetupTimerInterrupt+0x34>)
 80033d0:	2207      	movs	r2, #7
 80033d2:	601a      	str	r2, [r3, #0]
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000e010 	.word	0xe000e010
 80033e4:	e000e018 	.word	0xe000e018
 80033e8:	20000000 	.word	0x20000000
 80033ec:	10624dd3 	.word	0x10624dd3
 80033f0:	e000e014 	.word	0xe000e014

080033f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80033f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003404 <vPortEnableVFP+0x10>
 80033f8:	6801      	ldr	r1, [r0, #0]
 80033fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80033fe:	6001      	str	r1, [r0, #0]
 8003400:	4770      	bx	lr
 8003402:	0000      	.short	0x0000
 8003404:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop

0800340c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003412:	f3ef 8305 	mrs	r3, IPSR
 8003416:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	d914      	bls.n	8003448 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800341e:	4a17      	ldr	r2, [pc, #92]	; (800347c <vPortValidateInterruptPriority+0x70>)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003428:	4b15      	ldr	r3, [pc, #84]	; (8003480 <vPortValidateInterruptPriority+0x74>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	7afa      	ldrb	r2, [r7, #11]
 800342e:	429a      	cmp	r2, r3
 8003430:	d20a      	bcs.n	8003448 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	607b      	str	r3, [r7, #4]
    }
 8003444:	bf00      	nop
 8003446:	e7fe      	b.n	8003446 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <vPortValidateInterruptPriority+0x78>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <vPortValidateInterruptPriority+0x7c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d90a      	bls.n	800346e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	603b      	str	r3, [r7, #0]
    }
 800346a:	bf00      	nop
 800346c:	e7fe      	b.n	800346c <vPortValidateInterruptPriority+0x60>
    }
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000e3f0 	.word	0xe000e3f0
 8003480:	20000190 	.word	0x20000190
 8003484:	e000ed0c 	.word	0xe000ed0c
 8003488:	20000194 	.word	0x20000194

0800348c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003498:	f7ff f9ca 	bl	8002830 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800349c:	4b53      	ldr	r3, [pc, #332]	; (80035ec <pvPortMalloc+0x160>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80034a4:	f000 f908 	bl	80036b8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d012      	beq.n	80034d4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80034ae:	2208      	movs	r2, #8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	3308      	adds	r3, #8
 80034ba:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	43db      	mvns	r3, r3
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d804      	bhi.n	80034d0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	4413      	add	r3, r2
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	e001      	b.n	80034d4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	db70      	blt.n	80035bc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d06d      	beq.n	80035bc <pvPortMalloc+0x130>
 80034e0:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <pvPortMalloc+0x164>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d868      	bhi.n	80035bc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80034ea:	4b42      	ldr	r3, [pc, #264]	; (80035f4 <pvPortMalloc+0x168>)
 80034ec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80034ee:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <pvPortMalloc+0x168>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034f4:	e004      	b.n	8003500 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d903      	bls.n	8003512 <pvPortMalloc+0x86>
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f1      	bne.n	80034f6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003512:	4b36      	ldr	r3, [pc, #216]	; (80035ec <pvPortMalloc+0x160>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003518:	429a      	cmp	r2, r3
 800351a:	d04f      	beq.n	80035bc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2208      	movs	r2, #8
 8003522:	4413      	add	r3, r2
 8003524:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	1ad2      	subs	r2, r2, r3
 8003536:	2308      	movs	r3, #8
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	429a      	cmp	r2, r3
 800353c:	d91f      	bls.n	800357e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <pvPortMalloc+0xda>
        __asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	613b      	str	r3, [r7, #16]
    }
 8003562:	bf00      	nop
 8003564:	e7fe      	b.n	8003564 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	1ad2      	subs	r2, r2, r3
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003578:	6978      	ldr	r0, [r7, #20]
 800357a:	f000 f8f9 	bl	8003770 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800357e:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <pvPortMalloc+0x164>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <pvPortMalloc+0x164>)
 800358a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <pvPortMalloc+0x164>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <pvPortMalloc+0x16c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d203      	bcs.n	80035a0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003598:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <pvPortMalloc+0x164>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <pvPortMalloc+0x16c>)
 800359e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <pvPortMalloc+0x170>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3301      	adds	r3, #1
 80035b8:	4a10      	ldr	r2, [pc, #64]	; (80035fc <pvPortMalloc+0x170>)
 80035ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80035bc:	f7ff f946 	bl	800284c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <pvPortMalloc+0x154>
        __asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	60fb      	str	r3, [r7, #12]
    }
 80035dc:	bf00      	nop
 80035de:	e7fe      	b.n	80035de <pvPortMalloc+0x152>
    return pvReturn;
 80035e0:	69fb      	ldr	r3, [r7, #28]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3728      	adds	r7, #40	; 0x28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20012da0 	.word	0x20012da0
 80035f0:	20012da4 	.word	0x20012da4
 80035f4:	20012d98 	.word	0x20012d98
 80035f8:	20012da8 	.word	0x20012da8
 80035fc:	20012dac 	.word	0x20012dac

08003600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d049      	beq.n	80036a6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003612:	2308      	movs	r3, #8
 8003614:	425b      	negs	r3, r3
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4413      	add	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <vPortFree+0x3e>
        __asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	60fb      	str	r3, [r7, #12]
    }
 800363a:	bf00      	nop
 800363c:	e7fe      	b.n	800363c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <vPortFree+0x5c>
        __asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	60bb      	str	r3, [r7, #8]
    }
 8003658:	bf00      	nop
 800365a:	e7fe      	b.n	800365a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	0fdb      	lsrs	r3, r3, #31
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01c      	beq.n	80036a6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d118      	bne.n	80036a6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003680:	f7ff f8d6 	bl	8002830 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <vPortFree+0xb0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4413      	add	r3, r2
 800368e:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <vPortFree+0xb0>)
 8003690:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003692:	6938      	ldr	r0, [r7, #16]
 8003694:	f000 f86c 	bl	8003770 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <vPortFree+0xb4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3301      	adds	r3, #1
 800369e:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <vPortFree+0xb4>)
 80036a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80036a2:	f7ff f8d3 	bl	800284c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80036a6:	bf00      	nop
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20012da4 	.word	0x20012da4
 80036b4:	20012db0 	.word	0x20012db0

080036b8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036be:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80036c2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <prvHeapInit+0xa4>)
 80036c6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00c      	beq.n	80036ec <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3307      	adds	r3, #7
 80036d6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0307 	bic.w	r3, r3, #7
 80036de:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	4a1d      	ldr	r2, [pc, #116]	; (800375c <prvHeapInit+0xa4>)
 80036e8:	4413      	add	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036f0:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <prvHeapInit+0xa8>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <prvHeapInit+0xa8>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	4413      	add	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003704:	2208      	movs	r2, #8
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0307 	bic.w	r3, r3, #7
 8003712:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4a13      	ldr	r2, [pc, #76]	; (8003764 <prvHeapInit+0xac>)
 8003718:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <prvHeapInit+0xac>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <prvHeapInit+0xac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	1ad2      	subs	r2, r2, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <prvHeapInit+0xac>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a08      	ldr	r2, [pc, #32]	; (8003768 <prvHeapInit+0xb0>)
 8003746:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a07      	ldr	r2, [pc, #28]	; (800376c <prvHeapInit+0xb4>)
 800374e:	6013      	str	r3, [r2, #0]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	20000198 	.word	0x20000198
 8003760:	20012d98 	.word	0x20012d98
 8003764:	20012da0 	.word	0x20012da0
 8003768:	20012da8 	.word	0x20012da8
 800376c:	20012da4 	.word	0x20012da4

08003770 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003778:	4b28      	ldr	r3, [pc, #160]	; (800381c <prvInsertBlockIntoFreeList+0xac>)
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e002      	b.n	8003784 <prvInsertBlockIntoFreeList+0x14>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	d8f7      	bhi.n	800377e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	4413      	add	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	d108      	bne.n	80037b2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	441a      	add	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	441a      	add	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d118      	bne.n	80037f8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <prvInsertBlockIntoFreeList+0xb0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d00d      	beq.n	80037ee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	441a      	add	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e008      	b.n	8003800 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80037ee:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <prvInsertBlockIntoFreeList+0xb0>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e003      	b.n	8003800 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d002      	beq.n	800380e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20012d98 	.word	0x20012d98
 8003820:	20012da0 	.word	0x20012da0

08003824 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003828:	4803      	ldr	r0, [pc, #12]	; (8003838 <_cbSendSystemDesc+0x14>)
 800382a:	f001 fc45 	bl	80050b8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800382e:	4803      	ldr	r0, [pc, #12]	; (800383c <_cbSendSystemDesc+0x18>)
 8003830:	f001 fc42 	bl	80050b8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003834:	bf00      	nop
 8003836:	bd80      	pop	{r7, pc}
 8003838:	080057d4 	.word	0x080057d4
 800383c:	08005814 	.word	0x08005814

08003840 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <SEGGER_SYSVIEW_Conf+0x20>)
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <SEGGER_SYSVIEW_Conf+0x20>)
 800384a:	6819      	ldr	r1, [r3, #0]
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <SEGGER_SYSVIEW_Conf+0x24>)
 800384e:	4a06      	ldr	r2, [pc, #24]	; (8003868 <SEGGER_SYSVIEW_Conf+0x28>)
 8003850:	f001 f8b6 	bl	80049c0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003854:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003858:	f001 f8f6 	bl	8004a48 <SEGGER_SYSVIEW_SetRAMBase>
}
 800385c:	bf00      	nop
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000000 	.word	0x20000000
 8003864:	08003825 	.word	0x08003825
 8003868:	080058b0 	.word	0x080058b0

0800386c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800386c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386e:	b085      	sub	sp, #20
 8003870:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	e033      	b.n	80038e0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003878:	491e      	ldr	r1, [pc, #120]	; (80038f4 <_cbSendTaskList+0x88>)
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	491a      	ldr	r1, [pc, #104]	; (80038f4 <_cbSendTaskList+0x88>)
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	3304      	adds	r3, #4
 8003898:	6819      	ldr	r1, [r3, #0]
 800389a:	4c16      	ldr	r4, [pc, #88]	; (80038f4 <_cbSendTaskList+0x88>)
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4423      	add	r3, r4
 80038a8:	3308      	adds	r3, #8
 80038aa:	681c      	ldr	r4, [r3, #0]
 80038ac:	4d11      	ldr	r5, [pc, #68]	; (80038f4 <_cbSendTaskList+0x88>)
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	442b      	add	r3, r5
 80038ba:	330c      	adds	r3, #12
 80038bc:	681d      	ldr	r5, [r3, #0]
 80038be:	4e0d      	ldr	r6, [pc, #52]	; (80038f4 <_cbSendTaskList+0x88>)
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4433      	add	r3, r6
 80038cc:	3310      	adds	r3, #16
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	462b      	mov	r3, r5
 80038d4:	4622      	mov	r2, r4
 80038d6:	f000 f8bd 	bl	8003a54 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3301      	adds	r3, #1
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <_cbSendTaskList+0x8c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d3c6      	bcc.n	8003878 <_cbSendTaskList+0xc>
  }
}
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038f4:	20012db4 	.word	0x20012db4
 80038f8:	20012e54 	.word	0x20012e54

080038fc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80038fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003904:	f7ff f8a2 	bl	8002a4c <xTaskGetTickCountFromISR>
 8003908:	4603      	mov	r3, r0
 800390a:	2200      	movs	r2, #0
 800390c:	469a      	mov	sl, r3
 800390e:	4693      	mov	fp, r2
 8003910:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003914:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	f04f 0a00 	mov.w	sl, #0
 8003920:	f04f 0b00 	mov.w	fp, #0
 8003924:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003928:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800392c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003930:	4652      	mov	r2, sl
 8003932:	465b      	mov	r3, fp
 8003934:	1a14      	subs	r4, r2, r0
 8003936:	eb63 0501 	sbc.w	r5, r3, r1
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	00ab      	lsls	r3, r5, #2
 8003944:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003948:	00a2      	lsls	r2, r4, #2
 800394a:	4614      	mov	r4, r2
 800394c:	461d      	mov	r5, r3
 800394e:	eb14 0800 	adds.w	r8, r4, r0
 8003952:	eb45 0901 	adc.w	r9, r5, r1
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800396a:	4690      	mov	r8, r2
 800396c:	4699      	mov	r9, r3
 800396e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003972:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003984 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003992:	2205      	movs	r2, #5
 8003994:	492b      	ldr	r1, [pc, #172]	; (8003a44 <SYSVIEW_AddTask+0xc0>)
 8003996:	68b8      	ldr	r0, [r7, #8]
 8003998:	f001 feb0 	bl	80056fc <memcmp>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d04b      	beq.n	8003a3a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80039a2:	4b29      	ldr	r3, [pc, #164]	; (8003a48 <SYSVIEW_AddTask+0xc4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b07      	cmp	r3, #7
 80039a8:	d903      	bls.n	80039b2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80039aa:	4828      	ldr	r0, [pc, #160]	; (8003a4c <SYSVIEW_AddTask+0xc8>)
 80039ac:	f001 fe1c 	bl	80055e8 <SEGGER_SYSVIEW_Warn>
    return;
 80039b0:	e044      	b.n	8003a3c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80039b2:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <SYSVIEW_AddTask+0xc4>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4926      	ldr	r1, [pc, #152]	; (8003a50 <SYSVIEW_AddTask+0xcc>)
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <SYSVIEW_AddTask+0xc4>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4921      	ldr	r1, [pc, #132]	; (8003a50 <SYSVIEW_AddTask+0xcc>)
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	3304      	adds	r3, #4
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <SYSVIEW_AddTask+0xc4>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	491b      	ldr	r1, [pc, #108]	; (8003a50 <SYSVIEW_AddTask+0xcc>)
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3308      	adds	r3, #8
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <SYSVIEW_AddTask+0xc4>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4916      	ldr	r1, [pc, #88]	; (8003a50 <SYSVIEW_AddTask+0xcc>)
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	330c      	adds	r3, #12
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <SYSVIEW_AddTask+0xc4>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4910      	ldr	r1, [pc, #64]	; (8003a50 <SYSVIEW_AddTask+0xcc>)
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	3310      	adds	r3, #16
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <SYSVIEW_AddTask+0xc4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3301      	adds	r3, #1
 8003a24:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <SYSVIEW_AddTask+0xc4>)
 8003a26:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f80e 	bl	8003a54 <SYSVIEW_SendTaskInfo>
 8003a38:	e000      	b.n	8003a3c <SYSVIEW_AddTask+0xb8>
    return;
 8003a3a:	bf00      	nop

}
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	08005824 	.word	0x08005824
 8003a48:	20012e54 	.word	0x20012e54
 8003a4c:	0800582c 	.word	0x0800582c
 8003a50:	20012db4 	.word	0x20012db4

08003a54 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	; 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003a62:	f107 0314 	add.w	r3, r7, #20
 8003a66:	2214      	movs	r2, #20
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 fe56 	bl	800571c <memset>
  TaskInfo.TaskID     = TaskID;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003a84:	f107 0314 	add.w	r3, r7, #20
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f001 fa1d 	bl	8004ec8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003a8e:	bf00      	nop
 8003a90:	3728      	adds	r7, #40	; 0x28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <__NVIC_EnableIRQ>:
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	db0b      	blt.n	8003ac2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	f003 021f 	and.w	r2, r3, #31
 8003ab0:	4907      	ldr	r1, [pc, #28]	; (8003ad0 <__NVIC_EnableIRQ+0x38>)
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2001      	movs	r0, #1
 8003aba:	fa00 f202 	lsl.w	r2, r0, r2
 8003abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	e000e100 	.word	0xe000e100

08003ad4 <__NVIC_SetPriority>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	6039      	str	r1, [r7, #0]
 8003ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	db0a      	blt.n	8003afe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	490c      	ldr	r1, [pc, #48]	; (8003b20 <__NVIC_SetPriority+0x4c>)
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	0112      	lsls	r2, r2, #4
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	440b      	add	r3, r1
 8003af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003afc:	e00a      	b.n	8003b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	4908      	ldr	r1, [pc, #32]	; (8003b24 <__NVIC_SetPriority+0x50>)
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	3b04      	subs	r3, #4
 8003b0c:	0112      	lsls	r2, r2, #4
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	440b      	add	r3, r1
 8003b12:	761a      	strb	r2, [r3, #24]
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	e000e100 	.word	0xe000e100
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003b2e:	f001 fdb7 	bl	80056a0 <SEGGER_SYSVIEW_IsStarted>
 8003b32:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003b3a:	f001 f849 	bl	8004bd0 <SEGGER_SYSVIEW_Start>
  }
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003b52:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <_cbOnUARTRx+0x3c>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d806      	bhi.n	8003b68 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <_cbOnUARTRx+0x3c>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <_cbOnUARTRx+0x3c>)
 8003b64:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003b66:	e009      	b.n	8003b7c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003b68:	f7ff ffde 	bl	8003b28 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <_cbOnUARTRx+0x3c>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4618      	mov	r0, r3
 8003b72:	1dfb      	adds	r3, r7, #7
 8003b74:	2201      	movs	r2, #1
 8003b76:	4619      	mov	r1, r3
 8003b78:	f000 fb9e 	bl	80042b8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003b7c:	bf00      	nop
}
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000014 	.word	0x20000014

08003b88 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <_cbOnUARTTx+0x5c>)
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d80f      	bhi.n	8003bb8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <_cbOnUARTTx+0x5c>)
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <_cbOnUARTTx+0x60>)
 8003ba0:	5c9a      	ldrb	r2, [r3, r2]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <_cbOnUARTTx+0x5c>)
 8003ba8:	785b      	ldrb	r3, [r3, #1]
 8003baa:	3301      	adds	r3, #1
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <_cbOnUARTTx+0x5c>)
 8003bb0:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003bb6:	e00f      	b.n	8003bd8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <_cbOnUARTTx+0x5c>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fa1d 	bl	8004000 <SEGGER_RTT_ReadUpBufferNoLock>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	da02      	bge.n	8003bd6 <_cbOnUARTTx+0x4e>
    r = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	e000      	b.n	8003bd8 <_cbOnUARTTx+0x50>
  }
Done:
 8003bd6:	bf00      	nop
  return r;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000014 	.word	0x20000014
 8003be8:	080058b8 	.word	0x080058b8

08003bec <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003bf4:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <SEGGER_UART_init+0x1c>)
 8003bf6:	4905      	ldr	r1, [pc, #20]	; (8003c0c <SEGGER_UART_init+0x20>)
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f863 	bl	8003cc4 <HIF_UART_Init>
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	08003b49 	.word	0x08003b49
 8003c0c:	08003b89 	.word	0x08003b89

08003c10 <USART1_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART1_IRQHandler(void);
void USART1_IRQHandler(void) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003c16:	4b1e      	ldr	r3, [pc, #120]	; (8003c90 <USART1_IRQHandler+0x80>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d011      	beq.n	8003c4a <USART1_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003c26:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <USART1_IRQHandler+0x84>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f003 030b 	and.w	r3, r3, #11
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d108      	bne.n	8003c4a <USART1_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003c38:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <USART1_IRQHandler+0x88>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d004      	beq.n	8003c4a <USART1_IRQHandler+0x3a>
        _cbOnRx(v);
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <USART1_IRQHandler+0x88>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	79fa      	ldrb	r2, [r7, #7]
 8003c46:	4610      	mov	r0, r2
 8003c48:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01a      	beq.n	8003c8a <USART1_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <USART1_IRQHandler+0x8c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d015      	beq.n	8003c88 <USART1_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <USART1_IRQHandler+0x8c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	1dfa      	adds	r2, r7, #7
 8003c62:	4610      	mov	r0, r2
 8003c64:	4798      	blx	r3
 8003c66:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <USART1_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <USART1_IRQHandler+0x90>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a0b      	ldr	r2, [pc, #44]	; (8003ca0 <USART1_IRQHandler+0x90>)
 8003c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e006      	b.n	8003c8a <USART1_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <USART1_IRQHandler+0x80>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003c80:	79fa      	ldrb	r2, [r7, #7]
 8003c82:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <USART1_IRQHandler+0x84>)
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e000      	b.n	8003c8a <USART1_IRQHandler+0x7a>
      return;
 8003c88:	bf00      	nop
    }
  }
}
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40011000 	.word	0x40011000
 8003c94:	40011004 	.word	0x40011004
 8003c98:	20012e58 	.word	0x20012e58
 8003c9c:	20012e5c 	.word	0x20012e5c
 8003ca0:	4001100c 	.word	0x4001100c

08003ca4 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a04      	ldr	r2, [pc, #16]	; (8003cc0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb2:	6013      	str	r3, [r2, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	4001100c 	.word	0x4001100c

08003cc4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  //
  // Configure USART RX/TX pins for alternate function AF7
  //

  //RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
  RCC_APB2ENR |= (1 <<  4);        // Enable USART1 clock // PK: change for stm32f429 disc1
 8003cd0:	4b2e      	ldr	r3, [pc, #184]	; (8003d8c <HIF_UART_Init+0xc8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2d      	ldr	r2, [pc, #180]	; (8003d8c <HIF_UART_Init+0xc8>)
 8003cd6:	f043 0310 	orr.w	r3, r3, #16
 8003cda:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003cdc:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <HIF_UART_Init+0xcc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a2b      	ldr	r2, [pc, #172]	; (8003d90 <HIF_UART_Init+0xcc>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6013      	str	r3, [r2, #0]

  v  = GPIO_AFRH;	// v  = GPIO_AFRL;	// PK: Changed for stm32f429
 8003ce8:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <HIF_UART_Init+0xd0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	613b      	str	r3, [r7, #16]
  //v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
  //v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
  v &= ~((15UL << 4) | (15UL << 8));
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003cf4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << 4) | (7UL << 8));
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8003cfc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003cfe:	4a26      	ldr	r2, [pc, #152]	; (8003d98 <HIF_UART_Init+0xd4>)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003d04:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <HIF_UART_Init+0xd8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8003d10:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8003d18:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003d1a:	4a20      	ldr	r2, [pc, #128]	; (8003d9c <HIF_UART_Init+0xd8>)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003d20:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <HIF_UART_Init+0xdc>)
 8003d22:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003d26:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003d28:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <HIF_UART_Init+0xe0>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <HIF_UART_Init+0xe4>)
 8003d30:	2280      	movs	r2, #128	; 0x80
 8003d32:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003d3a:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <HIF_UART_Init+0xe8>)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d42:	3301      	adds	r3, #1
 8003d44:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d52:	d302      	bcc.n	8003d5a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003d54:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003d58:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	4a12      	ldr	r2, [pc, #72]	; (8003db0 <HIF_UART_Init+0xec>)
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003d6a:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <HIF_UART_Init+0xf0>)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003d70:	4a11      	ldr	r2, [pc, #68]	; (8003db8 <HIF_UART_Init+0xf4>)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003d76:	2106      	movs	r1, #6
 8003d78:	2025      	movs	r0, #37	; 0x25
 8003d7a:	f7ff feab 	bl	8003ad4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003d7e:	2025      	movs	r0, #37	; 0x25
 8003d80:	f7ff fe8a 	bl	8003a98 <__NVIC_EnableIRQ>
}
 8003d84:	bf00      	nop
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40023844 	.word	0x40023844
 8003d90:	40023830 	.word	0x40023830
 8003d94:	40020024 	.word	0x40020024
 8003d98:	40020020 	.word	0x40020020
 8003d9c:	40020000 	.word	0x40020000
 8003da0:	4001100c 	.word	0x4001100c
 8003da4:	40011010 	.word	0x40011010
 8003da8:	40011014 	.word	0x40011014
 8003dac:	0a037a00 	.word	0x0a037a00
 8003db0:	40011008 	.word	0x40011008
 8003db4:	20012e58 	.word	0x20012e58
 8003db8:	20012e5c 	.word	0x20012e5c

08003dbc <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003dc2:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <_DoInit+0xa0>)
 8003dc4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003dc6:	22a8      	movs	r2, #168	; 0xa8
 8003dc8:	2100      	movs	r1, #0
 8003dca:	6838      	ldr	r0, [r7, #0]
 8003dcc:	f001 fca6 	bl	800571c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2203      	movs	r2, #3
 8003dda:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4a20      	ldr	r2, [pc, #128]	; (8003e60 <_DoInit+0xa4>)
 8003de0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <_DoInit+0xa8>)
 8003de6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dee:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2200      	movs	r2, #0
 8003df4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	4a16      	ldr	r2, [pc, #88]	; (8003e60 <_DoInit+0xa4>)
 8003e06:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <_DoInit+0xac>)
 8003e0c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2210      	movs	r2, #16
 8003e12:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2200      	movs	r2, #0
 8003e18:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2200      	movs	r2, #0
 8003e24:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003e26:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	e00c      	b.n	8003e4a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1c3 030f 	rsb	r3, r3, #15
 8003e36:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <_DoInit+0xb0>)
 8003e38:	5cd1      	ldrb	r1, [r2, r3]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	460a      	mov	r2, r1
 8003e42:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3301      	adds	r3, #1
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b0f      	cmp	r3, #15
 8003e4e:	d9ef      	bls.n	8003e30 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003e50:	f3bf 8f5f 	dmb	sy
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20012e60 	.word	0x20012e60
 8003e60:	0800587c 	.word	0x0800587c
 8003e64:	20012f08 	.word	0x20012f08
 8003e68:	20013308 	.word	0x20013308
 8003e6c:	080058bc 	.word	0x080058bc

08003e70 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d905      	bls.n	8003ea0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	e007      	b.n	8003eb0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	69b9      	ldr	r1, [r7, #24]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	1acb      	subs	r3, r1, r3
 8003eaa:	4413      	add	r3, r2
 8003eac:	3b01      	subs	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	bf28      	it	cs
 8003ebe:	4613      	movcs	r3, r2
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	bf28      	it	cs
 8003eca:	4613      	movcs	r3, r2
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	6978      	ldr	r0, [r7, #20]
 8003ede:	f001 fc49 	bl	8005774 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003ee2:	6a3a      	ldr	r2, [r7, #32]
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	4413      	add	r3, r2
 8003ee8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	4413      	add	r3, r2
 8003ef0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	4413      	add	r3, r2
 8003f00:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d101      	bne.n	8003f10 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f10:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1b2      	bne.n	8003e86 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003f20:	6a3b      	ldr	r3, [r7, #32]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3728      	adds	r7, #40	; 0x28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b088      	sub	sp, #32
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d911      	bls.n	8003f72 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	6938      	ldr	r0, [r7, #16]
 8003f5e:	f001 fc09 	bl	8005774 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f62:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	441a      	add	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003f70:	e01f      	b.n	8003fb2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	6938      	ldr	r0, [r7, #16]
 8003f86:	f001 fbf5 	bl	8005774 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	6938      	ldr	r0, [r7, #16]
 8003fa4:	f001 fbe6 	bl	8005774 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fa8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	60da      	str	r2, [r3, #12]
}
 8003fb2:	bf00      	nop
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003fba:	b480      	push	{r7}
 8003fbc:	b087      	sub	sp, #28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d808      	bhi.n	8003fe8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1ad2      	subs	r2, r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e004      	b.n	8003ff2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003ff2:	697b      	ldr	r3, [r7, #20]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b08c      	sub	sp, #48	; 0x30
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800400c:	4b3e      	ldr	r3, [pc, #248]	; (8004108 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800400e:	623b      	str	r3, [r7, #32]
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b53      	cmp	r3, #83	; 0x53
 8004018:	d001      	beq.n	800401e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800401a:	f7ff fecf 	bl	8003dbc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	4613      	mov	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4a37      	ldr	r2, [pc, #220]	; (8004108 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800402c:	4413      	add	r3, r2
 800402e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004040:	2300      	movs	r3, #0
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	429a      	cmp	r2, r3
 800404a:	d92b      	bls.n	80040a4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4293      	cmp	r3, r2
 800405c:	bf28      	it	cs
 800405e:	4613      	movcs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	4413      	add	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	6939      	ldr	r1, [r7, #16]
 8004070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004072:	f001 fb7f 	bl	8005774 <memcpy>
    NumBytesRead += NumBytesRem;
 8004076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	4413      	add	r3, r2
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800407e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	4413      	add	r3, r2
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800408e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4413      	add	r3, r2
 8004094:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800409c:	429a      	cmp	r2, r3
 800409e:	d101      	bne.n	80040a4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80040a0:	2300      	movs	r3, #0
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4293      	cmp	r3, r2
 80040b2:	bf28      	it	cs
 80040b4:	4613      	movcs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d019      	beq.n	80040f2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	4413      	add	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	6939      	ldr	r1, [r7, #16]
 80040cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040ce:	f001 fb51 	bl	8005774 <memcpy>
    NumBytesRead += NumBytesRem;
 80040d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	4413      	add	r3, r2
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80040da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	4413      	add	r3, r2
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80040ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	4413      	add	r3, r2
 80040f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004100:	4618      	mov	r0, r3
 8004102:	3730      	adds	r7, #48	; 0x30
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20012e60 	.word	0x20012e60

0800410c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b08c      	sub	sp, #48	; 0x30
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004118:	4b3e      	ldr	r3, [pc, #248]	; (8004214 <SEGGER_RTT_ReadNoLock+0x108>)
 800411a:	623b      	str	r3, [r7, #32]
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b53      	cmp	r3, #83	; 0x53
 8004124:	d001      	beq.n	800412a <SEGGER_RTT_ReadNoLock+0x1e>
 8004126:	f7ff fe49 	bl	8003dbc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4613      	mov	r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4413      	add	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	3360      	adds	r3, #96	; 0x60
 8004136:	4a37      	ldr	r2, [pc, #220]	; (8004214 <SEGGER_RTT_ReadNoLock+0x108>)
 8004138:	4413      	add	r3, r2
 800413a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800414c:	2300      	movs	r3, #0
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	d92b      	bls.n	80041b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4293      	cmp	r3, r2
 8004168:	bf28      	it	cs
 800416a:	4613      	movcs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	4413      	add	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	6939      	ldr	r1, [r7, #16]
 800417c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800417e:	f001 faf9 	bl	8005774 <memcpy>
    NumBytesRead += NumBytesRem;
 8004182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	4413      	add	r3, r2
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800418a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	4413      	add	r3, r2
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800419a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	4413      	add	r3, r2
 80041a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d101      	bne.n	80041b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80041ac:	2300      	movs	r3, #0
 80041ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4293      	cmp	r3, r2
 80041be:	bf28      	it	cs
 80041c0:	4613      	movcs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d019      	beq.n	80041fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	4413      	add	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	6939      	ldr	r1, [r7, #16]
 80041d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041da:	f001 facb 	bl	8005774 <memcpy>
    NumBytesRead += NumBytesRem;
 80041de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	4413      	add	r3, r2
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80041e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	4413      	add	r3, r2
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80041f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4413      	add	r3, r2
 80041fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004208:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800420c:	4618      	mov	r0, r3
 800420e:	3730      	adds	r7, #48	; 0x30
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20012e60 	.word	0x20012e60

08004218 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4613      	mov	r3, r2
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	4413      	add	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	3360      	adds	r3, #96	; 0x60
 8004234:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004236:	4413      	add	r3, r2
 8004238:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d029      	beq.n	8004296 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004242:	2b02      	cmp	r3, #2
 8004244:	d82e      	bhi.n	80042a4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800424a:	2b01      	cmp	r3, #1
 800424c:	d013      	beq.n	8004276 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800424e:	e029      	b.n	80042a4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004250:	6978      	ldr	r0, [r7, #20]
 8004252:	f7ff feb2 	bl	8003fba <_GetAvailWriteSpace>
 8004256:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	d202      	bcs.n	8004266 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004264:	e021      	b.n	80042aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	69b9      	ldr	r1, [r7, #24]
 800426e:	6978      	ldr	r0, [r7, #20]
 8004270:	f7ff fe5b 	bl	8003f2a <_WriteNoCheck>
    break;
 8004274:	e019      	b.n	80042aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004276:	6978      	ldr	r0, [r7, #20]
 8004278:	f7ff fe9f 	bl	8003fba <_GetAvailWriteSpace>
 800427c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4293      	cmp	r3, r2
 8004284:	bf28      	it	cs
 8004286:	4613      	movcs	r3, r2
 8004288:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	69b9      	ldr	r1, [r7, #24]
 800428e:	6978      	ldr	r0, [r7, #20]
 8004290:	f7ff fe4b 	bl	8003f2a <_WriteNoCheck>
    break;
 8004294:	e009      	b.n	80042aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	69b9      	ldr	r1, [r7, #24]
 800429a:	6978      	ldr	r0, [r7, #20]
 800429c:	f7ff fde8 	bl	8003e70 <_WriteBlocking>
 80042a0:	61f8      	str	r0, [r7, #28]
    break;
 80042a2:	e002      	b.n	80042aa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61fb      	str	r3, [r7, #28]
    break;
 80042a8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80042aa:	69fb      	ldr	r3, [r7, #28]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3720      	adds	r7, #32
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20012e60 	.word	0x20012e60

080042b8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80042c4:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b53      	cmp	r3, #83	; 0x53
 80042d0:	d001      	beq.n	80042d6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80042d2:	f7ff fd73 	bl	8003dbc <_DoInit>
  SEGGER_RTT_LOCK();
 80042d6:	f3ef 8311 	mrs	r3, BASEPRI
 80042da:	f04f 0120 	mov.w	r1, #32
 80042de:	f381 8811 	msr	BASEPRI, r1
 80042e2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f7ff ff95 	bl	8004218 <SEGGER_RTT_WriteDownBufferNoLock>
 80042ee:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80042f6:	697b      	ldr	r3, [r7, #20]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20012e60 	.word	0x20012e60

08004304 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004312:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004314:	61bb      	str	r3, [r7, #24]
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b53      	cmp	r3, #83	; 0x53
 800431e:	d001      	beq.n	8004324 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004320:	f7ff fd4c 	bl	8003dbc <_DoInit>
  SEGGER_RTT_LOCK();
 8004324:	f3ef 8311 	mrs	r3, BASEPRI
 8004328:	f04f 0120 	mov.w	r1, #32
 800432c:	f381 8811 	msr	BASEPRI, r1
 8004330:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004332:	4b35      	ldr	r3, [pc, #212]	; (8004408 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004334:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800433a:	6939      	ldr	r1, [r7, #16]
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	4613      	mov	r3, r2
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4413      	add	r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	440b      	add	r3, r1
 800434a:	3304      	adds	r3, #4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3301      	adds	r3, #1
 8004356:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	429a      	cmp	r2, r3
 8004360:	dbeb      	blt.n	800433a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004362:	e000      	b.n	8004366 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004364:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	429a      	cmp	r2, r3
 800436e:	da3f      	bge.n	80043f0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004370:	6939      	ldr	r1, [r7, #16]
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	4613      	mov	r3, r2
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	4413      	add	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	440b      	add	r3, r1
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004384:	6939      	ldr	r1, [r7, #16]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	4613      	mov	r3, r2
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4413      	add	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	440b      	add	r3, r1
 8004394:	3304      	adds	r3, #4
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800439a:	6939      	ldr	r1, [r7, #16]
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	4613      	mov	r3, r2
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	4413      	add	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	440b      	add	r3, r1
 80043a8:	3320      	adds	r3, #32
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80043ae:	6939      	ldr	r1, [r7, #16]
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	4613      	mov	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	440b      	add	r3, r1
 80043bc:	3328      	adds	r3, #40	; 0x28
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80043c2:	6939      	ldr	r1, [r7, #16]
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	440b      	add	r3, r1
 80043d0:	3324      	adds	r3, #36	; 0x24
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80043d6:	6939      	ldr	r1, [r7, #16]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	4613      	mov	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	4413      	add	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	440b      	add	r3, r1
 80043e4:	332c      	adds	r3, #44	; 0x2c
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80043ea:	f3bf 8f5f 	dmb	sy
 80043ee:	e002      	b.n	80043f6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295
 80043f4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80043fc:	69fb      	ldr	r3, [r7, #28]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20012e60 	.word	0x20012e60

0800440c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800441a:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800441c:	623b      	str	r3, [r7, #32]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b53      	cmp	r3, #83	; 0x53
 8004426:	d001      	beq.n	800442c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004428:	f7ff fcc8 	bl	8003dbc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800442c:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800442e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d82c      	bhi.n	8004490 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004436:	f3ef 8311 	mrs	r3, BASEPRI
 800443a:	f04f 0120 	mov.w	r1, #32
 800443e:	f381 8811 	msr	BASEPRI, r1
 8004442:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4613      	mov	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	4413      	add	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	3360      	adds	r3, #96	; 0x60
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	4413      	add	r3, r2
 8004454:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00e      	beq.n	800447a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2200      	movs	r2, #0
 8004472:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2200      	movs	r2, #0
 8004478:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004480:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800448a:	2300      	movs	r3, #0
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
 800448e:	e002      	b.n	8004496 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004490:	f04f 33ff 	mov.w	r3, #4294967295
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004498:	4618      	mov	r0, r3
 800449a:	3728      	adds	r7, #40	; 0x28
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20012e60 	.word	0x20012e60

080044a4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	60fa      	str	r2, [r7, #12]
 80044ba:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b80      	cmp	r3, #128	; 0x80
 80044c0:	d90a      	bls.n	80044d8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80044c2:	2380      	movs	r3, #128	; 0x80
 80044c4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80044c6:	e007      	b.n	80044d8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	1c53      	adds	r3, r2, #1
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1c59      	adds	r1, r3, #1
 80044d2:	60f9      	str	r1, [r7, #12]
 80044d4:	7812      	ldrb	r2, [r2, #0]
 80044d6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	1e5a      	subs	r2, r3, #1
 80044dc:	607a      	str	r2, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <_EncodeStr+0x46>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1ee      	bne.n	80044c8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80044f6:	68fb      	ldr	r3, [r7, #12]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3307      	adds	r3, #7
}
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004522:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <_HandleIncomingPacket+0xd8>)
 8004524:	7e1b      	ldrb	r3, [r3, #24]
 8004526:	4618      	mov	r0, r3
 8004528:	1cfb      	adds	r3, r7, #3
 800452a:	2201      	movs	r2, #1
 800452c:	4619      	mov	r1, r3
 800452e:	f7ff fded 	bl	800410c <SEGGER_RTT_ReadNoLock>
 8004532:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d057      	beq.n	80045ea <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800453a:	78fb      	ldrb	r3, [r7, #3]
 800453c:	2b80      	cmp	r3, #128	; 0x80
 800453e:	d031      	beq.n	80045a4 <_HandleIncomingPacket+0x88>
 8004540:	2b80      	cmp	r3, #128	; 0x80
 8004542:	dc40      	bgt.n	80045c6 <_HandleIncomingPacket+0xaa>
 8004544:	2b07      	cmp	r3, #7
 8004546:	dc15      	bgt.n	8004574 <_HandleIncomingPacket+0x58>
 8004548:	2b00      	cmp	r3, #0
 800454a:	dd3c      	ble.n	80045c6 <_HandleIncomingPacket+0xaa>
 800454c:	3b01      	subs	r3, #1
 800454e:	2b06      	cmp	r3, #6
 8004550:	d839      	bhi.n	80045c6 <_HandleIncomingPacket+0xaa>
 8004552:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <_HandleIncomingPacket+0x3c>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	0800457b 	.word	0x0800457b
 800455c:	08004581 	.word	0x08004581
 8004560:	08004587 	.word	0x08004587
 8004564:	0800458d 	.word	0x0800458d
 8004568:	08004593 	.word	0x08004593
 800456c:	08004599 	.word	0x08004599
 8004570:	0800459f 	.word	0x0800459f
 8004574:	2b7f      	cmp	r3, #127	; 0x7f
 8004576:	d033      	beq.n	80045e0 <_HandleIncomingPacket+0xc4>
 8004578:	e025      	b.n	80045c6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800457a:	f000 fb29 	bl	8004bd0 <SEGGER_SYSVIEW_Start>
      break;
 800457e:	e034      	b.n	80045ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004580:	f000 fbe2 	bl	8004d48 <SEGGER_SYSVIEW_Stop>
      break;
 8004584:	e031      	b.n	80045ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004586:	f000 fdbb 	bl	8005100 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800458a:	e02e      	b.n	80045ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800458c:	f000 fd80 	bl	8005090 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004590:	e02b      	b.n	80045ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004592:	f000 fbff 	bl	8004d94 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004596:	e028      	b.n	80045ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004598:	f000 ffe8 	bl	800556c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800459c:	e025      	b.n	80045ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800459e:	f000 ffc7 	bl	8005530 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80045a2:	e022      	b.n	80045ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80045a4:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <_HandleIncomingPacket+0xd8>)
 80045a6:	7e1b      	ldrb	r3, [r3, #24]
 80045a8:	4618      	mov	r0, r3
 80045aa:	1cfb      	adds	r3, r7, #3
 80045ac:	2201      	movs	r2, #1
 80045ae:	4619      	mov	r1, r3
 80045b0:	f7ff fdac 	bl	800410c <SEGGER_RTT_ReadNoLock>
 80045b4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d013      	beq.n	80045e4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 ff2c 	bl	800541c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80045c4:	e00e      	b.n	80045e4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	b25b      	sxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	da0c      	bge.n	80045e8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80045ce:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <_HandleIncomingPacket+0xd8>)
 80045d0:	7e1b      	ldrb	r3, [r3, #24]
 80045d2:	4618      	mov	r0, r3
 80045d4:	1cfb      	adds	r3, r7, #3
 80045d6:	2201      	movs	r2, #1
 80045d8:	4619      	mov	r1, r3
 80045da:	f7ff fd97 	bl	800410c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80045de:	e003      	b.n	80045e8 <_HandleIncomingPacket+0xcc>
      break;
 80045e0:	bf00      	nop
 80045e2:	e002      	b.n	80045ea <_HandleIncomingPacket+0xce>
      break;
 80045e4:	bf00      	nop
 80045e6:	e000      	b.n	80045ea <_HandleIncomingPacket+0xce>
      break;
 80045e8:	bf00      	nop
    }
  }
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20014320 	.word	0x20014320

080045f8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08c      	sub	sp, #48	; 0x30
 80045fc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80045fe:	2301      	movs	r3, #1
 8004600:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004602:	1d3b      	adds	r3, r7, #4
 8004604:	3301      	adds	r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800460c:	4b32      	ldr	r3, [pc, #200]	; (80046d8 <_TrySendOverflowPacket+0xe0>)
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
 8004612:	e00b      	b.n	800462c <_TrySendOverflowPacket+0x34>
 8004614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004616:	b2da      	uxtb	r2, r3
 8004618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461a:	1c59      	adds	r1, r3, #1
 800461c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800461e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	09db      	lsrs	r3, r3, #7
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	2b7f      	cmp	r3, #127	; 0x7f
 8004630:	d8f0      	bhi.n	8004614 <_TrySendOverflowPacket+0x1c>
 8004632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <_TrySendOverflowPacket+0xe4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004648:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <_TrySendOverflowPacket+0xe0>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	623b      	str	r3, [r7, #32]
 800465a:	e00b      	b.n	8004674 <_TrySendOverflowPacket+0x7c>
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	1c59      	adds	r1, r3, #1
 8004664:	6279      	str	r1, [r7, #36]	; 0x24
 8004666:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	09db      	lsrs	r3, r3, #7
 8004672:	623b      	str	r3, [r7, #32]
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	2b7f      	cmp	r3, #127	; 0x7f
 8004678:	d8f0      	bhi.n	800465c <_TrySendOverflowPacket+0x64>
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	627a      	str	r2, [r7, #36]	; 0x24
 8004680:	6a3a      	ldr	r2, [r7, #32]
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <_TrySendOverflowPacket+0xe0>)
 800468c:	785b      	ldrb	r3, [r3, #1]
 800468e:	4618      	mov	r0, r3
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	461a      	mov	r2, r3
 8004698:	1d3b      	adds	r3, r7, #4
 800469a:	4619      	mov	r1, r3
 800469c:	f7fb fda8 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80046a0:	4603      	mov	r3, r0
 80046a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80046a4:	f7ff fafe 	bl	8003ca4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80046ae:	4a0a      	ldr	r2, [pc, #40]	; (80046d8 <_TrySendOverflowPacket+0xe0>)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80046b4:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <_TrySendOverflowPacket+0xe0>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <_TrySendOverflowPacket+0xe0>)
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	e004      	b.n	80046cc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80046c2:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <_TrySendOverflowPacket+0xe0>)
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	3301      	adds	r3, #1
 80046c8:	4a03      	ldr	r2, [pc, #12]	; (80046d8 <_TrySendOverflowPacket+0xe0>)
 80046ca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80046cc:	693b      	ldr	r3, [r7, #16]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3730      	adds	r7, #48	; 0x30
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20014320 	.word	0x20014320
 80046dc:	e0001004 	.word	0xe0001004

080046e0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80046ec:	4b96      	ldr	r3, [pc, #600]	; (8004948 <_SendPacket+0x268>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d010      	beq.n	8004716 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80046f4:	4b94      	ldr	r3, [pc, #592]	; (8004948 <_SendPacket+0x268>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8130 	beq.w	800495e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80046fe:	4b92      	ldr	r3, [pc, #584]	; (8004948 <_SendPacket+0x268>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d109      	bne.n	800471a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004706:	f7ff ff77 	bl	80045f8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800470a:	4b8f      	ldr	r3, [pc, #572]	; (8004948 <_SendPacket+0x268>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b01      	cmp	r3, #1
 8004710:	f040 8127 	bne.w	8004962 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004714:	e001      	b.n	800471a <_SendPacket+0x3a>
    goto Send;
 8004716:	bf00      	nop
 8004718:	e000      	b.n	800471c <_SendPacket+0x3c>
Send:
 800471a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b1f      	cmp	r3, #31
 8004720:	d809      	bhi.n	8004736 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004722:	4b89      	ldr	r3, [pc, #548]	; (8004948 <_SendPacket+0x268>)
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	f040 8118 	bne.w	8004966 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b17      	cmp	r3, #23
 800473a:	d807      	bhi.n	800474c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3b01      	subs	r3, #1
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e0c4      	b.n	80048d6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	2b7f      	cmp	r3, #127	; 0x7f
 8004758:	d912      	bls.n	8004780 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	09da      	lsrs	r2, r3, #7
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3b01      	subs	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	3a01      	subs	r2, #1
 8004772:	60fa      	str	r2, [r7, #12]
 8004774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	e006      	b.n	800478e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3b01      	subs	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	b2da      	uxtb	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b7e      	cmp	r3, #126	; 0x7e
 8004792:	d807      	bhi.n	80047a4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3b01      	subs	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	e098      	b.n	80048d6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047aa:	d212      	bcs.n	80047d2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	09da      	lsrs	r2, r3, #7
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	3a01      	subs	r2, #1
 80047c4:	60fa      	str	r2, [r7, #12]
 80047c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e081      	b.n	80048d6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047d8:	d21d      	bcs.n	8004816 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	0b9a      	lsrs	r2, r3, #14
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	09db      	lsrs	r3, r3, #7
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	3a01      	subs	r2, #1
 80047f4:	60fa      	str	r2, [r7, #12]
 80047f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	3a01      	subs	r2, #1
 8004808:	60fa      	str	r2, [r7, #12]
 800480a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800480e:	b2da      	uxtb	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e05f      	b.n	80048d6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800481c:	d228      	bcs.n	8004870 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0d5a      	lsrs	r2, r3, #21
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3b01      	subs	r3, #1
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0b9b      	lsrs	r3, r3, #14
 8004832:	b2db      	uxtb	r3, r3
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	3a01      	subs	r2, #1
 8004838:	60fa      	str	r2, [r7, #12]
 800483a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800483e:	b2da      	uxtb	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	09db      	lsrs	r3, r3, #7
 8004848:	b2db      	uxtb	r3, r3
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	3a01      	subs	r2, #1
 800484e:	60fa      	str	r2, [r7, #12]
 8004850:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004854:	b2da      	uxtb	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	3a01      	subs	r2, #1
 8004862:	60fa      	str	r2, [r7, #12]
 8004864:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004868:	b2da      	uxtb	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	e032      	b.n	80048d6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	0f1a      	lsrs	r2, r3, #28
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3b01      	subs	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	0d5b      	lsrs	r3, r3, #21
 8004884:	b2db      	uxtb	r3, r3
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	3a01      	subs	r2, #1
 800488a:	60fa      	str	r2, [r7, #12]
 800488c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004890:	b2da      	uxtb	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	0b9b      	lsrs	r3, r3, #14
 800489a:	b2db      	uxtb	r3, r3
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	3a01      	subs	r2, #1
 80048a0:	60fa      	str	r2, [r7, #12]
 80048a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	09db      	lsrs	r3, r3, #7
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	3a01      	subs	r2, #1
 80048b6:	60fa      	str	r2, [r7, #12]
 80048b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	3a01      	subs	r2, #1
 80048ca:	60fa      	str	r2, [r7, #12]
 80048cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80048d6:	4b1d      	ldr	r3, [pc, #116]	; (800494c <_SendPacket+0x26c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <_SendPacket+0x268>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	623b      	str	r3, [r7, #32]
 80048ee:	e00b      	b.n	8004908 <_SendPacket+0x228>
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	1c59      	adds	r1, r3, #1
 80048f8:	6279      	str	r1, [r7, #36]	; 0x24
 80048fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	09db      	lsrs	r3, r3, #7
 8004906:	623b      	str	r3, [r7, #32]
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	2b7f      	cmp	r3, #127	; 0x7f
 800490c:	d8f0      	bhi.n	80048f0 <_SendPacket+0x210>
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	627a      	str	r2, [r7, #36]	; 0x24
 8004914:	6a3a      	ldr	r2, [r7, #32]
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <_SendPacket+0x268>)
 8004920:	785b      	ldrb	r3, [r3, #1]
 8004922:	4618      	mov	r0, r3
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	461a      	mov	r2, r3
 800492c:	68f9      	ldr	r1, [r7, #12]
 800492e:	f7fb fc5f 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004932:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004934:	f7ff f9b6 	bl	8003ca4 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800493e:	4a02      	ldr	r2, [pc, #8]	; (8004948 <_SendPacket+0x268>)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	60d3      	str	r3, [r2, #12]
 8004944:	e010      	b.n	8004968 <_SendPacket+0x288>
 8004946:	bf00      	nop
 8004948:	20014320 	.word	0x20014320
 800494c:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004950:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <_SendPacket+0x2d8>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	3301      	adds	r3, #1
 8004956:	b2da      	uxtb	r2, r3
 8004958:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <_SendPacket+0x2d8>)
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	e004      	b.n	8004968 <_SendPacket+0x288>
    goto SendDone;
 800495e:	bf00      	nop
 8004960:	e002      	b.n	8004968 <_SendPacket+0x288>
      goto SendDone;
 8004962:	bf00      	nop
 8004964:	e000      	b.n	8004968 <_SendPacket+0x288>
      goto SendDone;
 8004966:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004968:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <_SendPacket+0x2d8>)
 800496a:	7e1b      	ldrb	r3, [r3, #24]
 800496c:	4619      	mov	r1, r3
 800496e:	4a13      	ldr	r2, [pc, #76]	; (80049bc <_SendPacket+0x2dc>)
 8004970:	460b      	mov	r3, r1
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	440b      	add	r3, r1
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	4413      	add	r3, r2
 800497a:	336c      	adds	r3, #108	; 0x6c
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4b0e      	ldr	r3, [pc, #56]	; (80049b8 <_SendPacket+0x2d8>)
 8004980:	7e1b      	ldrb	r3, [r3, #24]
 8004982:	4618      	mov	r0, r3
 8004984:	490d      	ldr	r1, [pc, #52]	; (80049bc <_SendPacket+0x2dc>)
 8004986:	4603      	mov	r3, r0
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	4403      	add	r3, r0
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	440b      	add	r3, r1
 8004990:	3370      	adds	r3, #112	; 0x70
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d00b      	beq.n	80049b0 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <_SendPacket+0x2d8>)
 800499a:	789b      	ldrb	r3, [r3, #2]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d107      	bne.n	80049b0 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <_SendPacket+0x2d8>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80049a6:	f7ff fdb9 	bl	800451c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80049aa:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <_SendPacket+0x2d8>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80049b0:	bf00      	nop
 80049b2:	3728      	adds	r7, #40	; 0x28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20014320 	.word	0x20014320
 80049bc:	20012e60 	.word	0x20012e60

080049c0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80049ce:	2300      	movs	r3, #0
 80049d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049d4:	4917      	ldr	r1, [pc, #92]	; (8004a34 <SEGGER_SYSVIEW_Init+0x74>)
 80049d6:	4818      	ldr	r0, [pc, #96]	; (8004a38 <SEGGER_SYSVIEW_Init+0x78>)
 80049d8:	f7ff fc94 	bl	8004304 <SEGGER_RTT_AllocUpBuffer>
 80049dc:	4603      	mov	r3, r0
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	4b16      	ldr	r3, [pc, #88]	; (8004a3c <SEGGER_SYSVIEW_Init+0x7c>)
 80049e2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80049e4:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <SEGGER_SYSVIEW_Init+0x7c>)
 80049e6:	785a      	ldrb	r2, [r3, #1]
 80049e8:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <SEGGER_SYSVIEW_Init+0x7c>)
 80049ea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80049ec:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <SEGGER_SYSVIEW_Init+0x7c>)
 80049ee:	7e1b      	ldrb	r3, [r3, #24]
 80049f0:	4618      	mov	r0, r3
 80049f2:	2300      	movs	r3, #0
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	2308      	movs	r3, #8
 80049f8:	4a11      	ldr	r2, [pc, #68]	; (8004a40 <SEGGER_SYSVIEW_Init+0x80>)
 80049fa:	490f      	ldr	r1, [pc, #60]	; (8004a38 <SEGGER_SYSVIEW_Init+0x78>)
 80049fc:	f7ff fd06 	bl	800440c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004a00:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <SEGGER_SYSVIEW_Init+0x7c>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a06:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <SEGGER_SYSVIEW_Init+0x84>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a0c      	ldr	r2, [pc, #48]	; (8004a3c <SEGGER_SYSVIEW_Init+0x7c>)
 8004a0c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004a0e:	4a0b      	ldr	r2, [pc, #44]	; (8004a3c <SEGGER_SYSVIEW_Init+0x7c>)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004a14:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <SEGGER_SYSVIEW_Init+0x7c>)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004a1a:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <SEGGER_SYSVIEW_Init+0x7c>)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004a20:	4a06      	ldr	r2, [pc, #24]	; (8004a3c <SEGGER_SYSVIEW_Init+0x7c>)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <SEGGER_SYSVIEW_Init+0x7c>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20013318 	.word	0x20013318
 8004a38:	08005890 	.word	0x08005890
 8004a3c:	20014320 	.word	0x20014320
 8004a40:	20014318 	.word	0x20014318
 8004a44:	e0001004 	.word	0xe0001004

08004a48 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004a50:	4a04      	ldr	r2, [pc, #16]	; (8004a64 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6113      	str	r3, [r2, #16]
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20014320 	.word	0x20014320

08004a68 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a70:	f3ef 8311 	mrs	r3, BASEPRI
 8004a74:	f04f 0120 	mov.w	r1, #32
 8004a78:	f381 8811 	msr	BASEPRI, r1
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	4808      	ldr	r0, [pc, #32]	; (8004aa0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004a80:	f7ff fd40 	bl	8004504 <_PreparePacket>
 8004a84:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	68b8      	ldr	r0, [r7, #8]
 8004a8c:	f7ff fe28 	bl	80046e0 <_SendPacket>
  RECORD_END();
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f383 8811 	msr	BASEPRI, r3
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20014350 	.word	0x20014350

08004aa4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004aae:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab2:	f04f 0120 	mov.w	r1, #32
 8004ab6:	f381 8811 	msr	BASEPRI, r1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	4816      	ldr	r0, [pc, #88]	; (8004b18 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004abe:	f7ff fd21 	bl	8004504 <_PreparePacket>
 8004ac2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	e00b      	b.n	8004aea <SEGGER_SYSVIEW_RecordU32+0x46>
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	1c59      	adds	r1, r3, #1
 8004ada:	61f9      	str	r1, [r7, #28]
 8004adc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	09db      	lsrs	r3, r3, #7
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b7f      	cmp	r3, #127	; 0x7f
 8004aee:	d8f0      	bhi.n	8004ad2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	61fa      	str	r2, [r7, #28]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	68f9      	ldr	r1, [r7, #12]
 8004b04:	6938      	ldr	r0, [r7, #16]
 8004b06:	f7ff fdeb 	bl	80046e0 <_SendPacket>
  RECORD_END();
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f383 8811 	msr	BASEPRI, r3
}
 8004b10:	bf00      	nop
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20014350 	.word	0x20014350

08004b1c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08c      	sub	sp, #48	; 0x30
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b28:	f3ef 8311 	mrs	r3, BASEPRI
 8004b2c:	f04f 0120 	mov.w	r1, #32
 8004b30:	f381 8811 	msr	BASEPRI, r1
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	4825      	ldr	r0, [pc, #148]	; (8004bcc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004b38:	f7ff fce4 	bl	8004504 <_PreparePacket>
 8004b3c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b4a:	e00b      	b.n	8004b64 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	1c59      	adds	r1, r3, #1
 8004b54:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	09db      	lsrs	r3, r3, #7
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	2b7f      	cmp	r3, #127	; 0x7f
 8004b68:	d8f0      	bhi.n	8004b4c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	623b      	str	r3, [r7, #32]
 8004b82:	e00b      	b.n	8004b9c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	1c59      	adds	r1, r3, #1
 8004b8c:	6279      	str	r1, [r7, #36]	; 0x24
 8004b8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	09db      	lsrs	r3, r3, #7
 8004b9a:	623b      	str	r3, [r7, #32]
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004ba0:	d8f0      	bhi.n	8004b84 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	627a      	str	r2, [r7, #36]	; 0x24
 8004ba8:	6a3a      	ldr	r2, [r7, #32]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	6979      	ldr	r1, [r7, #20]
 8004bb6:	69b8      	ldr	r0, [r7, #24]
 8004bb8:	f7ff fd92 	bl	80046e0 <_SendPacket>
  RECORD_END();
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f383 8811 	msr	BASEPRI, r3
}
 8004bc2:	bf00      	nop
 8004bc4:	3730      	adds	r7, #48	; 0x30
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20014350 	.word	0x20014350

08004bd0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08c      	sub	sp, #48	; 0x30
 8004bd4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004bd6:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8004bd8:	2201      	movs	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8004be0:	f04f 0120 	mov.w	r1, #32
 8004be4:	f381 8811 	msr	BASEPRI, r1
 8004be8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004bea:	4b54      	ldr	r3, [pc, #336]	; (8004d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8004bec:	785b      	ldrb	r3, [r3, #1]
 8004bee:	220a      	movs	r2, #10
 8004bf0:	4953      	ldr	r1, [pc, #332]	; (8004d40 <SEGGER_SYSVIEW_Start+0x170>)
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fb fafc 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004bfe:	f7ff f851 	bl	8003ca4 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004c02:	200a      	movs	r0, #10
 8004c04:	f7ff ff30 	bl	8004a68 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c08:	f3ef 8311 	mrs	r3, BASEPRI
 8004c0c:	f04f 0120 	mov.w	r1, #32
 8004c10:	f381 8811 	msr	BASEPRI, r1
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	484b      	ldr	r0, [pc, #300]	; (8004d44 <SEGGER_SYSVIEW_Start+0x174>)
 8004c18:	f7ff fc74 	bl	8004504 <_PreparePacket>
 8004c1c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c26:	4b45      	ldr	r3, [pc, #276]	; (8004d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c2c:	e00b      	b.n	8004c46 <SEGGER_SYSVIEW_Start+0x76>
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	1c59      	adds	r1, r3, #1
 8004c36:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	09db      	lsrs	r3, r3, #7
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	2b7f      	cmp	r3, #127	; 0x7f
 8004c4a:	d8f0      	bhi.n	8004c2e <SEGGER_SYSVIEW_Start+0x5e>
 8004c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c60:	4b36      	ldr	r3, [pc, #216]	; (8004d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	623b      	str	r3, [r7, #32]
 8004c66:	e00b      	b.n	8004c80 <SEGGER_SYSVIEW_Start+0xb0>
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	1c59      	adds	r1, r3, #1
 8004c70:	6279      	str	r1, [r7, #36]	; 0x24
 8004c72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	09db      	lsrs	r3, r3, #7
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	2b7f      	cmp	r3, #127	; 0x7f
 8004c84:	d8f0      	bhi.n	8004c68 <SEGGER_SYSVIEW_Start+0x98>
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c8c:	6a3a      	ldr	r2, [r7, #32]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	4b28      	ldr	r3, [pc, #160]	; (8004d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	e00b      	b.n	8004cba <SEGGER_SYSVIEW_Start+0xea>
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	1c59      	adds	r1, r3, #1
 8004caa:	61f9      	str	r1, [r7, #28]
 8004cac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	701a      	strb	r2, [r3, #0]
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	09db      	lsrs	r3, r3, #7
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8004cbe:	d8f0      	bhi.n	8004ca2 <SEGGER_SYSVIEW_Start+0xd2>
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	61fa      	str	r2, [r7, #28]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	e00b      	b.n	8004cf2 <SEGGER_SYSVIEW_Start+0x122>
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	1c59      	adds	r1, r3, #1
 8004ce2:	6179      	str	r1, [r7, #20]
 8004ce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	09db      	lsrs	r3, r3, #7
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8004cf6:	d8f0      	bhi.n	8004cda <SEGGER_SYSVIEW_Start+0x10a>
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	617a      	str	r2, [r7, #20]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004d08:	2218      	movs	r2, #24
 8004d0a:	6839      	ldr	r1, [r7, #0]
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fce7 	bl	80046e0 <_SendPacket>
      RECORD_END();
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004d18:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <SEGGER_SYSVIEW_Start+0x16c>)
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004d26:	f000 f9eb 	bl	8005100 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004d2a:	f000 f9b1 	bl	8005090 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004d2e:	f000 fc1d 	bl	800556c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004d32:	bf00      	nop
 8004d34:	3730      	adds	r7, #48	; 0x30
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20014320 	.word	0x20014320
 8004d40:	080058d0 	.word	0x080058d0
 8004d44:	20014350 	.word	0x20014350

08004d48 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d52:	f04f 0120 	mov.w	r1, #32
 8004d56:	f381 8811 	msr	BASEPRI, r1
 8004d5a:	607b      	str	r3, [r7, #4]
 8004d5c:	480b      	ldr	r0, [pc, #44]	; (8004d8c <SEGGER_SYSVIEW_Stop+0x44>)
 8004d5e:	f7ff fbd1 	bl	8004504 <_PreparePacket>
 8004d62:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004d64:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <SEGGER_SYSVIEW_Stop+0x48>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004d6c:	220b      	movs	r2, #11
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	6838      	ldr	r0, [r7, #0]
 8004d72:	f7ff fcb5 	bl	80046e0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <SEGGER_SYSVIEW_Stop+0x48>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f383 8811 	msr	BASEPRI, r3
}
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20014350 	.word	0x20014350
 8004d90:	20014320 	.word	0x20014320

08004d94 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08c      	sub	sp, #48	; 0x30
 8004d98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d9e:	f04f 0120 	mov.w	r1, #32
 8004da2:	f381 8811 	msr	BASEPRI, r1
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	4845      	ldr	r0, [pc, #276]	; (8004ec0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004daa:	f7ff fbab 	bl	8004504 <_PreparePacket>
 8004dae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db8:	4b42      	ldr	r3, [pc, #264]	; (8004ec4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dbe:	e00b      	b.n	8004dd8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	1c59      	adds	r1, r3, #1
 8004dc8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	09db      	lsrs	r3, r3, #7
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	2b7f      	cmp	r3, #127	; 0x7f
 8004ddc:	d8f0      	bhi.n	8004dc0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
 8004df2:	4b34      	ldr	r3, [pc, #208]	; (8004ec4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	623b      	str	r3, [r7, #32]
 8004df8:	e00b      	b.n	8004e12 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	1c59      	adds	r1, r3, #1
 8004e02:	6279      	str	r1, [r7, #36]	; 0x24
 8004e04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	09db      	lsrs	r3, r3, #7
 8004e10:	623b      	str	r3, [r7, #32]
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	2b7f      	cmp	r3, #127	; 0x7f
 8004e16:	d8f0      	bhi.n	8004dfa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	627a      	str	r2, [r7, #36]	; 0x24
 8004e1e:	6a3a      	ldr	r2, [r7, #32]
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	e00b      	b.n	8004e4c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	1c59      	adds	r1, r3, #1
 8004e3c:	61f9      	str	r1, [r7, #28]
 8004e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	09db      	lsrs	r3, r3, #7
 8004e4a:	61bb      	str	r3, [r7, #24]
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e50:	d8f0      	bhi.n	8004e34 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	61fa      	str	r2, [r7, #28]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	e00b      	b.n	8004e84 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	1c59      	adds	r1, r3, #1
 8004e74:	6179      	str	r1, [r7, #20]
 8004e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	09db      	lsrs	r3, r3, #7
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b7f      	cmp	r3, #127	; 0x7f
 8004e88:	d8f0      	bhi.n	8004e6c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	617a      	str	r2, [r7, #20]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004e9a:	2218      	movs	r2, #24
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	68b8      	ldr	r0, [r7, #8]
 8004ea0:	f7ff fc1e 	bl	80046e0 <_SendPacket>
  RECORD_END();
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004eaa:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004eb2:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	4798      	blx	r3
  }
}
 8004eb8:	bf00      	nop
 8004eba:	3730      	adds	r7, #48	; 0x30
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20014350 	.word	0x20014350
 8004ec4:	20014320 	.word	0x20014320

08004ec8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b092      	sub	sp, #72	; 0x48
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004ed0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ed4:	f04f 0120 	mov.w	r1, #32
 8004ed8:	f381 8811 	msr	BASEPRI, r1
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	486a      	ldr	r0, [pc, #424]	; (8005088 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004ee0:	f7ff fb10 	bl	8004504 <_PreparePacket>
 8004ee4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	647b      	str	r3, [r7, #68]	; 0x44
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	4b66      	ldr	r3, [pc, #408]	; (800508c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8004efa:	e00b      	b.n	8004f14 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f02:	1c59      	adds	r1, r3, #1
 8004f04:	6479      	str	r1, [r7, #68]	; 0x44
 8004f06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f10:	09db      	lsrs	r3, r3, #7
 8004f12:	643b      	str	r3, [r7, #64]	; 0x40
 8004f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f16:	2b7f      	cmp	r3, #127	; 0x7f
 8004f18:	d8f0      	bhi.n	8004efc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	647a      	str	r2, [r7, #68]	; 0x44
 8004f20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f34:	e00b      	b.n	8004f4e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3c:	1c59      	adds	r1, r3, #1
 8004f3e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004f40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	09db      	lsrs	r3, r3, #7
 8004f4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	2b7f      	cmp	r3, #127	; 0x7f
 8004f52:	d8f0      	bhi.n	8004f36 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f62:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7ff fa99 	bl	80044a4 <_EncodeStr>
 8004f72:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004f74:	2209      	movs	r2, #9
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	6938      	ldr	r0, [r7, #16]
 8004f7a:	f7ff fbb1 	bl	80046e0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	637b      	str	r3, [r7, #52]	; 0x34
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	4b40      	ldr	r3, [pc, #256]	; (800508c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	633b      	str	r3, [r7, #48]	; 0x30
 8004f92:	e00b      	b.n	8004fac <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9a:	1c59      	adds	r1, r3, #1
 8004f9c:	6379      	str	r1, [r7, #52]	; 0x34
 8004f9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	09db      	lsrs	r3, r3, #7
 8004faa:	633b      	str	r3, [r7, #48]	; 0x30
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	2b7f      	cmp	r3, #127	; 0x7f
 8004fb0:	d8f0      	bhi.n	8004f94 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	637a      	str	r2, [r7, #52]	; 0x34
 8004fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fcc:	e00b      	b.n	8004fe6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	1c59      	adds	r1, r3, #1
 8004fd6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	09db      	lsrs	r3, r3, #7
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8004fea:	d8f0      	bhi.n	8004fce <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	623b      	str	r3, [r7, #32]
 8005006:	e00b      	b.n	8005020 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	b2da      	uxtb	r2, r3
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	1c59      	adds	r1, r3, #1
 8005010:	6279      	str	r1, [r7, #36]	; 0x24
 8005012:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	09db      	lsrs	r3, r3, #7
 800501e:	623b      	str	r3, [r7, #32]
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	2b7f      	cmp	r3, #127	; 0x7f
 8005024:	d8f0      	bhi.n	8005008 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	627a      	str	r2, [r7, #36]	; 0x24
 800502c:	6a3a      	ldr	r2, [r7, #32]
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	e00b      	b.n	8005058 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	b2da      	uxtb	r2, r3
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	1c59      	adds	r1, r3, #1
 8005048:	61f9      	str	r1, [r7, #28]
 800504a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	09db      	lsrs	r3, r3, #7
 8005056:	61bb      	str	r3, [r7, #24]
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	2b7f      	cmp	r3, #127	; 0x7f
 800505c:	d8f0      	bhi.n	8005040 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	61fa      	str	r2, [r7, #28]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800506e:	2215      	movs	r2, #21
 8005070:	68f9      	ldr	r1, [r7, #12]
 8005072:	6938      	ldr	r0, [r7, #16]
 8005074:	f7ff fb34 	bl	80046e0 <_SendPacket>
  RECORD_END();
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f383 8811 	msr	BASEPRI, r3
}
 800507e:	bf00      	nop
 8005080:	3748      	adds	r7, #72	; 0x48
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20014350 	.word	0x20014350
 800508c:	20014320 	.word	0x20014320

08005090 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005094:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80050a6:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	4798      	blx	r3
  }
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20014320 	.word	0x20014320

080050b8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050c0:	f3ef 8311 	mrs	r3, BASEPRI
 80050c4:	f04f 0120 	mov.w	r1, #32
 80050c8:	f381 8811 	msr	BASEPRI, r1
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	480b      	ldr	r0, [pc, #44]	; (80050fc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80050d0:	f7ff fa18 	bl	8004504 <_PreparePacket>
 80050d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050d6:	2280      	movs	r2, #128	; 0x80
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	6938      	ldr	r0, [r7, #16]
 80050dc:	f7ff f9e2 	bl	80044a4 <_EncodeStr>
 80050e0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80050e2:	220e      	movs	r2, #14
 80050e4:	68f9      	ldr	r1, [r7, #12]
 80050e6:	6938      	ldr	r0, [r7, #16]
 80050e8:	f7ff fafa 	bl	80046e0 <_SendPacket>
  RECORD_END();
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f383 8811 	msr	BASEPRI, r3
}
 80050f2:	bf00      	nop
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20014350 	.word	0x20014350

08005100 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005100:	b590      	push	{r4, r7, lr}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005106:	4b15      	ldr	r3, [pc, #84]	; (800515c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d01a      	beq.n	8005144 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d015      	beq.n	8005144 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005118:	4b10      	ldr	r3, [pc, #64]	; (800515c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4798      	blx	r3
 8005120:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005124:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005126:	e9d7 0100 	ldrd	r0, r1, [r7]
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	000a      	movs	r2, r1
 8005134:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005136:	4613      	mov	r3, r2
 8005138:	461a      	mov	r2, r3
 800513a:	4621      	mov	r1, r4
 800513c:	200d      	movs	r0, #13
 800513e:	f7ff fced 	bl	8004b1c <SEGGER_SYSVIEW_RecordU32x2>
 8005142:	e006      	b.n	8005152 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4619      	mov	r1, r3
 800514a:	200c      	movs	r0, #12
 800514c:	f7ff fcaa 	bl	8004aa4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	bd90      	pop	{r4, r7, pc}
 800515a:	bf00      	nop
 800515c:	20014320 	.word	0x20014320
 8005160:	e0001004 	.word	0xe0001004

08005164 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800516a:	f3ef 8311 	mrs	r3, BASEPRI
 800516e:	f04f 0120 	mov.w	r1, #32
 8005172:	f381 8811 	msr	BASEPRI, r1
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	4819      	ldr	r0, [pc, #100]	; (80051e0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800517a:	f7ff f9c3 	bl	8004504 <_PreparePacket>
 800517e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005184:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	e00b      	b.n	80051b0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	b2da      	uxtb	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	1c59      	adds	r1, r3, #1
 80051a0:	6179      	str	r1, [r7, #20]
 80051a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	09db      	lsrs	r3, r3, #7
 80051ae:	613b      	str	r3, [r7, #16]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2b7f      	cmp	r3, #127	; 0x7f
 80051b4:	d8f0      	bhi.n	8005198 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	617a      	str	r2, [r7, #20]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80051c6:	2202      	movs	r2, #2
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	68b8      	ldr	r0, [r7, #8]
 80051cc:	f7ff fa88 	bl	80046e0 <_SendPacket>
  RECORD_END();
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f383 8811 	msr	BASEPRI, r3
}
 80051d6:	bf00      	nop
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20014350 	.word	0x20014350
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80051ee:	f3ef 8311 	mrs	r3, BASEPRI
 80051f2:	f04f 0120 	mov.w	r1, #32
 80051f6:	f381 8811 	msr	BASEPRI, r1
 80051fa:	607b      	str	r3, [r7, #4]
 80051fc:	4807      	ldr	r0, [pc, #28]	; (800521c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80051fe:	f7ff f981 	bl	8004504 <_PreparePacket>
 8005202:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005204:	2203      	movs	r2, #3
 8005206:	6839      	ldr	r1, [r7, #0]
 8005208:	6838      	ldr	r0, [r7, #0]
 800520a:	f7ff fa69 	bl	80046e0 <_SendPacket>
  RECORD_END();
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f383 8811 	msr	BASEPRI, r3
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	20014350 	.word	0x20014350

08005220 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005226:	f3ef 8311 	mrs	r3, BASEPRI
 800522a:	f04f 0120 	mov.w	r1, #32
 800522e:	f381 8811 	msr	BASEPRI, r1
 8005232:	607b      	str	r3, [r7, #4]
 8005234:	4807      	ldr	r0, [pc, #28]	; (8005254 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005236:	f7ff f965 	bl	8004504 <_PreparePacket>
 800523a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800523c:	2212      	movs	r2, #18
 800523e:	6839      	ldr	r1, [r7, #0]
 8005240:	6838      	ldr	r0, [r7, #0]
 8005242:	f7ff fa4d 	bl	80046e0 <_SendPacket>
  RECORD_END();
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f383 8811 	msr	BASEPRI, r3
}
 800524c:	bf00      	nop
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20014350 	.word	0x20014350

08005258 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800525e:	f3ef 8311 	mrs	r3, BASEPRI
 8005262:	f04f 0120 	mov.w	r1, #32
 8005266:	f381 8811 	msr	BASEPRI, r1
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	4807      	ldr	r0, [pc, #28]	; (800528c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800526e:	f7ff f949 	bl	8004504 <_PreparePacket>
 8005272:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005274:	2211      	movs	r2, #17
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	6838      	ldr	r0, [r7, #0]
 800527a:	f7ff fa31 	bl	80046e0 <_SendPacket>
  RECORD_END();
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f383 8811 	msr	BASEPRI, r3
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20014350 	.word	0x20014350

08005290 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005298:	f3ef 8311 	mrs	r3, BASEPRI
 800529c:	f04f 0120 	mov.w	r1, #32
 80052a0:	f381 8811 	msr	BASEPRI, r1
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	4819      	ldr	r0, [pc, #100]	; (800530c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80052a8:	f7ff f92c 	bl	8004504 <_PreparePacket>
 80052ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80052b2:	4b17      	ldr	r3, [pc, #92]	; (8005310 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	e00b      	b.n	80052de <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	1c59      	adds	r1, r3, #1
 80052ce:	61f9      	str	r1, [r7, #28]
 80052d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	09db      	lsrs	r3, r3, #7
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b7f      	cmp	r3, #127	; 0x7f
 80052e2:	d8f0      	bhi.n	80052c6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	61fa      	str	r2, [r7, #28]
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80052f4:	2208      	movs	r2, #8
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	6938      	ldr	r0, [r7, #16]
 80052fa:	f7ff f9f1 	bl	80046e0 <_SendPacket>
  RECORD_END();
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f383 8811 	msr	BASEPRI, r3
}
 8005304:	bf00      	nop
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20014350 	.word	0x20014350
 8005310:	20014320 	.word	0x20014320

08005314 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800531c:	f3ef 8311 	mrs	r3, BASEPRI
 8005320:	f04f 0120 	mov.w	r1, #32
 8005324:	f381 8811 	msr	BASEPRI, r1
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	4819      	ldr	r0, [pc, #100]	; (8005390 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800532c:	f7ff f8ea 	bl	8004504 <_PreparePacket>
 8005330:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005336:	4b17      	ldr	r3, [pc, #92]	; (8005394 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	e00b      	b.n	8005362 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	1c59      	adds	r1, r3, #1
 8005352:	61f9      	str	r1, [r7, #28]
 8005354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	09db      	lsrs	r3, r3, #7
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b7f      	cmp	r3, #127	; 0x7f
 8005366:	d8f0      	bhi.n	800534a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	61fa      	str	r2, [r7, #28]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005378:	2204      	movs	r2, #4
 800537a:	68f9      	ldr	r1, [r7, #12]
 800537c:	6938      	ldr	r0, [r7, #16]
 800537e:	f7ff f9af 	bl	80046e0 <_SendPacket>
  RECORD_END();
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f383 8811 	msr	BASEPRI, r3
}
 8005388:	bf00      	nop
 800538a:	3720      	adds	r7, #32
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20014350 	.word	0x20014350
 8005394:	20014320 	.word	0x20014320

08005398 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053a0:	f3ef 8311 	mrs	r3, BASEPRI
 80053a4:	f04f 0120 	mov.w	r1, #32
 80053a8:	f381 8811 	msr	BASEPRI, r1
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	4819      	ldr	r0, [pc, #100]	; (8005414 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80053b0:	f7ff f8a8 	bl	8004504 <_PreparePacket>
 80053b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80053ba:	4b17      	ldr	r3, [pc, #92]	; (8005418 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	61bb      	str	r3, [r7, #24]
 80053cc:	e00b      	b.n	80053e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	1c59      	adds	r1, r3, #1
 80053d6:	61f9      	str	r1, [r7, #28]
 80053d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	09db      	lsrs	r3, r3, #7
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b7f      	cmp	r3, #127	; 0x7f
 80053ea:	d8f0      	bhi.n	80053ce <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	61fa      	str	r2, [r7, #28]
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80053fc:	2206      	movs	r2, #6
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	6938      	ldr	r0, [r7, #16]
 8005402:	f7ff f96d 	bl	80046e0 <_SendPacket>
  RECORD_END();
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f383 8811 	msr	BASEPRI, r3
}
 800540c:	bf00      	nop
 800540e:	3720      	adds	r7, #32
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20014350 	.word	0x20014350
 8005418:	20014320 	.word	0x20014320

0800541c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b08c      	sub	sp, #48	; 0x30
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005426:	4b40      	ldr	r3, [pc, #256]	; (8005528 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d077      	beq.n	800551e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800542e:	4b3e      	ldr	r3, [pc, #248]	; (8005528 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005434:	2300      	movs	r3, #0
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
 8005438:	e008      	b.n	800544c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	3301      	adds	r3, #1
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005450:	429a      	cmp	r2, r3
 8005452:	d3f2      	bcc.n	800543a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005454:	e000      	b.n	8005458 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005456:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d055      	beq.n	800550a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800545e:	f3ef 8311 	mrs	r3, BASEPRI
 8005462:	f04f 0120 	mov.w	r1, #32
 8005466:	f381 8811 	msr	BASEPRI, r1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	482f      	ldr	r0, [pc, #188]	; (800552c <SEGGER_SYSVIEW_SendModule+0x110>)
 800546e:	f7ff f849 	bl	8004504 <_PreparePacket>
 8005472:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	623b      	str	r3, [r7, #32]
 8005480:	e00b      	b.n	800549a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	b2da      	uxtb	r2, r3
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	1c59      	adds	r1, r3, #1
 800548a:	6279      	str	r1, [r7, #36]	; 0x24
 800548c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	09db      	lsrs	r3, r3, #7
 8005498:	623b      	str	r3, [r7, #32]
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	2b7f      	cmp	r3, #127	; 0x7f
 800549e:	d8f0      	bhi.n	8005482 <SEGGER_SYSVIEW_SendModule+0x66>
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	627a      	str	r2, [r7, #36]	; 0x24
 80054a6:	6a3a      	ldr	r2, [r7, #32]
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	e00b      	b.n	80054d4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	1c59      	adds	r1, r3, #1
 80054c4:	61f9      	str	r1, [r7, #28]
 80054c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	09db      	lsrs	r3, r3, #7
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b7f      	cmp	r3, #127	; 0x7f
 80054d8:	d8f0      	bhi.n	80054bc <SEGGER_SYSVIEW_SendModule+0xa0>
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	61fa      	str	r2, [r7, #28]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2280      	movs	r2, #128	; 0x80
 80054f0:	4619      	mov	r1, r3
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f7fe ffd6 	bl	80044a4 <_EncodeStr>
 80054f8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80054fa:	2216      	movs	r2, #22
 80054fc:	68f9      	ldr	r1, [r7, #12]
 80054fe:	6938      	ldr	r0, [r7, #16]
 8005500:	f7ff f8ee 	bl	80046e0 <_SendPacket>
      RECORD_END();
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d006      	beq.n	800551e <SEGGER_SYSVIEW_SendModule+0x102>
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4798      	blx	r3
    }
  }
}
 800551e:	bf00      	nop
 8005520:	3730      	adds	r7, #48	; 0x30
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20014348 	.word	0x20014348
 800552c:	20014350 	.word	0x20014350

08005530 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00f      	beq.n	800555e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800553e:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f2      	bne.n	8005544 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20014348 	.word	0x20014348

0800556c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005572:	f3ef 8311 	mrs	r3, BASEPRI
 8005576:	f04f 0120 	mov.w	r1, #32
 800557a:	f381 8811 	msr	BASEPRI, r1
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	4817      	ldr	r0, [pc, #92]	; (80055e0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005582:	f7fe ffbf 	bl	8004504 <_PreparePacket>
 8005586:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	e00b      	b.n	80055b0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	b2da      	uxtb	r2, r3
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	1c59      	adds	r1, r3, #1
 80055a0:	6179      	str	r1, [r7, #20]
 80055a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	09db      	lsrs	r3, r3, #7
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b7f      	cmp	r3, #127	; 0x7f
 80055b4:	d8f0      	bhi.n	8005598 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	617a      	str	r2, [r7, #20]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80055c6:	221b      	movs	r2, #27
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	68b8      	ldr	r0, [r7, #8]
 80055cc:	f7ff f888 	bl	80046e0 <_SendPacket>
  RECORD_END();
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f383 8811 	msr	BASEPRI, r3
}
 80055d6:	bf00      	nop
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20014350 	.word	0x20014350
 80055e4:	2001434c 	.word	0x2001434c

080055e8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	; 0x28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055f0:	f3ef 8311 	mrs	r3, BASEPRI
 80055f4:	f04f 0120 	mov.w	r1, #32
 80055f8:	f381 8811 	msr	BASEPRI, r1
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	4827      	ldr	r0, [pc, #156]	; (800569c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005600:	f7fe ff80 	bl	8004504 <_PreparePacket>
 8005604:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005606:	2280      	movs	r2, #128	; 0x80
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	6938      	ldr	r0, [r7, #16]
 800560c:	f7fe ff4a 	bl	80044a4 <_EncodeStr>
 8005610:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
 8005616:	2301      	movs	r3, #1
 8005618:	623b      	str	r3, [r7, #32]
 800561a:	e00b      	b.n	8005634 <SEGGER_SYSVIEW_Warn+0x4c>
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	b2da      	uxtb	r2, r3
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	1c59      	adds	r1, r3, #1
 8005624:	6279      	str	r1, [r7, #36]	; 0x24
 8005626:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	09db      	lsrs	r3, r3, #7
 8005632:	623b      	str	r3, [r7, #32]
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	2b7f      	cmp	r3, #127	; 0x7f
 8005638:	d8f0      	bhi.n	800561c <SEGGER_SYSVIEW_Warn+0x34>
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	627a      	str	r2, [r7, #36]	; 0x24
 8005640:	6a3a      	ldr	r2, [r7, #32]
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	2300      	movs	r3, #0
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	e00b      	b.n	800566c <SEGGER_SYSVIEW_Warn+0x84>
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	b2da      	uxtb	r2, r3
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	1c59      	adds	r1, r3, #1
 800565c:	61f9      	str	r1, [r7, #28]
 800565e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	09db      	lsrs	r3, r3, #7
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b7f      	cmp	r3, #127	; 0x7f
 8005670:	d8f0      	bhi.n	8005654 <SEGGER_SYSVIEW_Warn+0x6c>
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	61fa      	str	r2, [r7, #28]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005682:	221a      	movs	r2, #26
 8005684:	68f9      	ldr	r1, [r7, #12]
 8005686:	6938      	ldr	r0, [r7, #16]
 8005688:	f7ff f82a 	bl	80046e0 <_SendPacket>
  RECORD_END();
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f383 8811 	msr	BASEPRI, r3
}
 8005692:	bf00      	nop
 8005694:	3728      	adds	r7, #40	; 0x28
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20014350 	.word	0x20014350

080056a0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80056a4:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056a6:	7e1b      	ldrb	r3, [r3, #24]
 80056a8:	4619      	mov	r1, r3
 80056aa:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80056ac:	460b      	mov	r3, r1
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	440b      	add	r3, r1
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	4413      	add	r3, r2
 80056b6:	336c      	adds	r3, #108	; 0x6c
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056bc:	7e1b      	ldrb	r3, [r3, #24]
 80056be:	4618      	mov	r0, r3
 80056c0:	490d      	ldr	r1, [pc, #52]	; (80056f8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80056c2:	4603      	mov	r3, r0
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	4403      	add	r3, r0
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	440b      	add	r3, r1
 80056cc:	3370      	adds	r3, #112	; 0x70
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d00b      	beq.n	80056ec <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80056d4:	4b07      	ldr	r3, [pc, #28]	; (80056f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056d6:	789b      	ldrb	r3, [r3, #2]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d107      	bne.n	80056ec <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80056dc:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056de:	2201      	movs	r2, #1
 80056e0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80056e2:	f7fe ff1b 	bl	800451c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80056e6:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80056ec:	4b01      	ldr	r3, [pc, #4]	; (80056f4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20014320 	.word	0x20014320
 80056f8:	20012e60 	.word	0x20012e60

080056fc <memcmp>:
 80056fc:	b510      	push	{r4, lr}
 80056fe:	3901      	subs	r1, #1
 8005700:	4402      	add	r2, r0
 8005702:	4290      	cmp	r0, r2
 8005704:	d101      	bne.n	800570a <memcmp+0xe>
 8005706:	2000      	movs	r0, #0
 8005708:	e005      	b.n	8005716 <memcmp+0x1a>
 800570a:	7803      	ldrb	r3, [r0, #0]
 800570c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005710:	42a3      	cmp	r3, r4
 8005712:	d001      	beq.n	8005718 <memcmp+0x1c>
 8005714:	1b18      	subs	r0, r3, r4
 8005716:	bd10      	pop	{r4, pc}
 8005718:	3001      	adds	r0, #1
 800571a:	e7f2      	b.n	8005702 <memcmp+0x6>

0800571c <memset>:
 800571c:	4402      	add	r2, r0
 800571e:	4603      	mov	r3, r0
 8005720:	4293      	cmp	r3, r2
 8005722:	d100      	bne.n	8005726 <memset+0xa>
 8005724:	4770      	bx	lr
 8005726:	f803 1b01 	strb.w	r1, [r3], #1
 800572a:	e7f9      	b.n	8005720 <memset+0x4>

0800572c <__libc_init_array>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	4d0d      	ldr	r5, [pc, #52]	; (8005764 <__libc_init_array+0x38>)
 8005730:	4c0d      	ldr	r4, [pc, #52]	; (8005768 <__libc_init_array+0x3c>)
 8005732:	1b64      	subs	r4, r4, r5
 8005734:	10a4      	asrs	r4, r4, #2
 8005736:	2600      	movs	r6, #0
 8005738:	42a6      	cmp	r6, r4
 800573a:	d109      	bne.n	8005750 <__libc_init_array+0x24>
 800573c:	4d0b      	ldr	r5, [pc, #44]	; (800576c <__libc_init_array+0x40>)
 800573e:	4c0c      	ldr	r4, [pc, #48]	; (8005770 <__libc_init_array+0x44>)
 8005740:	f000 f826 	bl	8005790 <_init>
 8005744:	1b64      	subs	r4, r4, r5
 8005746:	10a4      	asrs	r4, r4, #2
 8005748:	2600      	movs	r6, #0
 800574a:	42a6      	cmp	r6, r4
 800574c:	d105      	bne.n	800575a <__libc_init_array+0x2e>
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	f855 3b04 	ldr.w	r3, [r5], #4
 8005754:	4798      	blx	r3
 8005756:	3601      	adds	r6, #1
 8005758:	e7ee      	b.n	8005738 <__libc_init_array+0xc>
 800575a:	f855 3b04 	ldr.w	r3, [r5], #4
 800575e:	4798      	blx	r3
 8005760:	3601      	adds	r6, #1
 8005762:	e7f2      	b.n	800574a <__libc_init_array+0x1e>
 8005764:	080058e4 	.word	0x080058e4
 8005768:	080058e4 	.word	0x080058e4
 800576c:	080058e4 	.word	0x080058e4
 8005770:	080058e8 	.word	0x080058e8

08005774 <memcpy>:
 8005774:	440a      	add	r2, r1
 8005776:	4291      	cmp	r1, r2
 8005778:	f100 33ff 	add.w	r3, r0, #4294967295
 800577c:	d100      	bne.n	8005780 <memcpy+0xc>
 800577e:	4770      	bx	lr
 8005780:	b510      	push	{r4, lr}
 8005782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800578a:	4291      	cmp	r1, r2
 800578c:	d1f9      	bne.n	8005782 <memcpy+0xe>
 800578e:	bd10      	pop	{r4, pc}

08005790 <_init>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr

0800579c <_fini>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr
