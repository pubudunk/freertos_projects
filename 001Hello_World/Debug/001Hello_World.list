
001Hello_World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006650  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006800  08006800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006998  08006998  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006998  08006998  00016998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069a0  080069a0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069a0  080069a0  000169a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069a4  080069a4  000169a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080069a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          0001455c  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200145c8  200145c8  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001216d  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b59  00000000  00000000  0003224c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011a8  00000000  00000000  00034da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d91  00000000  00000000  00035f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025fbf  00000000  00000000  00036ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014a42  00000000  00000000  0005cca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6bd0  00000000  00000000  000716e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e94  00000000  00000000  001582b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c4  00000000  00000000  0015d148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080067e8 	.word	0x080067e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	080067e8 	.word	0x080067e8

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012ea8 	.word	0x20012ea8
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b970 	b.w	8000628 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	460f      	mov	r7, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4694      	mov	ip, r2
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0xe2>
 8000376:	fab2 f382 	clz	r3, r2
 800037a:	b143      	cbz	r3, 800038e <__udivmoddi4+0x2e>
 800037c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000380:	f1c3 0220 	rsb	r2, r3, #32
 8000384:	409f      	lsls	r7, r3
 8000386:	fa20 f202 	lsr.w	r2, r0, r2
 800038a:	4317      	orrs	r7, r2
 800038c:	409c      	lsls	r4, r3
 800038e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000392:	fa1f f58c 	uxth.w	r5, ip
 8000396:	fbb7 f1fe 	udiv	r1, r7, lr
 800039a:	0c22      	lsrs	r2, r4, #16
 800039c:	fb0e 7711 	mls	r7, lr, r1, r7
 80003a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003a4:	fb01 f005 	mul.w	r0, r1, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003b4:	f080 811c 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f240 8119 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003be:	3902      	subs	r1, #2
 80003c0:	4462      	add	r2, ip
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d2:	fb00 f505 	mul.w	r5, r0, r5
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x90>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e2:	f080 8107 	bcs.w	80005f4 <__udivmoddi4+0x294>
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	f240 8104 	bls.w	80005f4 <__udivmoddi4+0x294>
 80003ec:	4464      	add	r4, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11e      	cbz	r6, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40dc      	lsrs	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0xbc>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80ed 	beq.w	80005ea <__udivmoddi4+0x28a>
 8000410:	2100      	movs	r1, #0
 8000412:	e9c6 0500 	strd	r0, r5, [r6]
 8000416:	4608      	mov	r0, r1
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	fab3 f183 	clz	r1, r3
 8000420:	2900      	cmp	r1, #0
 8000422:	d149      	bne.n	80004b8 <__udivmoddi4+0x158>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d302      	bcc.n	800042e <__udivmoddi4+0xce>
 8000428:	4282      	cmp	r2, r0
 800042a:	f200 80f8 	bhi.w	800061e <__udivmoddi4+0x2be>
 800042e:	1a84      	subs	r4, r0, r2
 8000430:	eb65 0203 	sbc.w	r2, r5, r3
 8000434:	2001      	movs	r0, #1
 8000436:	4617      	mov	r7, r2
 8000438:	2e00      	cmp	r6, #0
 800043a:	d0e2      	beq.n	8000402 <__udivmoddi4+0xa2>
 800043c:	e9c6 4700 	strd	r4, r7, [r6]
 8000440:	e7df      	b.n	8000402 <__udivmoddi4+0xa2>
 8000442:	b902      	cbnz	r2, 8000446 <__udivmoddi4+0xe6>
 8000444:	deff      	udf	#255	; 0xff
 8000446:	fab2 f382 	clz	r3, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	f040 8090 	bne.w	8000570 <__udivmoddi4+0x210>
 8000450:	1a8a      	subs	r2, r1, r2
 8000452:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	2101      	movs	r1, #1
 800045c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000460:	fb07 2015 	mls	r0, r7, r5, r2
 8000464:	0c22      	lsrs	r2, r4, #16
 8000466:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800046a:	fb0e f005 	mul.w	r0, lr, r5
 800046e:	4290      	cmp	r0, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x124>
 8000472:	eb1c 0202 	adds.w	r2, ip, r2
 8000476:	f105 38ff 	add.w	r8, r5, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4290      	cmp	r0, r2
 800047e:	f200 80cb 	bhi.w	8000618 <__udivmoddi4+0x2b8>
 8000482:	4645      	mov	r5, r8
 8000484:	1a12      	subs	r2, r2, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb2 f0f7 	udiv	r0, r2, r7
 800048c:	fb07 2210 	mls	r2, r7, r0, r2
 8000490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000494:	fb0e fe00 	mul.w	lr, lr, r0
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x14e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x14c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f200 80bb 	bhi.w	8000622 <__udivmoddi4+0x2c2>
 80004ac:	4610      	mov	r0, r2
 80004ae:	eba4 040e 	sub.w	r4, r4, lr
 80004b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004b6:	e79f      	b.n	80003f8 <__udivmoddi4+0x98>
 80004b8:	f1c1 0720 	rsb	r7, r1, #32
 80004bc:	408b      	lsls	r3, r1
 80004be:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ca:	fa20 f307 	lsr.w	r3, r0, r7
 80004ce:	40fd      	lsrs	r5, r7
 80004d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004d4:	4323      	orrs	r3, r4
 80004d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004da:	fa1f fe8c 	uxth.w	lr, ip
 80004de:	fb09 5518 	mls	r5, r9, r8, r5
 80004e2:	0c1c      	lsrs	r4, r3, #16
 80004e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004e8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	fa02 f201 	lsl.w	r2, r2, r1
 80004f2:	fa00 f001 	lsl.w	r0, r0, r1
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000500:	f080 8088 	bcs.w	8000614 <__udivmoddi4+0x2b4>
 8000504:	42a5      	cmp	r5, r4
 8000506:	f240 8085 	bls.w	8000614 <__udivmoddi4+0x2b4>
 800050a:	f1a8 0802 	sub.w	r8, r8, #2
 800050e:	4464      	add	r4, ip
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	b29d      	uxth	r5, r3
 8000514:	fbb4 f3f9 	udiv	r3, r4, r9
 8000518:	fb09 4413 	mls	r4, r9, r3, r4
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	fb03 fe0e 	mul.w	lr, r3, lr
 8000524:	45a6      	cmp	lr, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000530:	d26c      	bcs.n	800060c <__udivmoddi4+0x2ac>
 8000532:	45a6      	cmp	lr, r4
 8000534:	d96a      	bls.n	800060c <__udivmoddi4+0x2ac>
 8000536:	3b02      	subs	r3, #2
 8000538:	4464      	add	r4, ip
 800053a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800053e:	fba3 9502 	umull	r9, r5, r3, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	42ac      	cmp	r4, r5
 8000548:	46c8      	mov	r8, r9
 800054a:	46ae      	mov	lr, r5
 800054c:	d356      	bcc.n	80005fc <__udivmoddi4+0x29c>
 800054e:	d053      	beq.n	80005f8 <__udivmoddi4+0x298>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x208>
 8000552:	ebb0 0208 	subs.w	r2, r0, r8
 8000556:	eb64 040e 	sbc.w	r4, r4, lr
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40ca      	lsrs	r2, r1
 8000560:	40cc      	lsrs	r4, r1
 8000562:	4317      	orrs	r7, r2
 8000564:	e9c6 7400 	strd	r7, r4, [r6]
 8000568:	4618      	mov	r0, r3
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	f1c3 0120 	rsb	r1, r3, #32
 8000574:	fa02 fc03 	lsl.w	ip, r2, r3
 8000578:	fa20 f201 	lsr.w	r2, r0, r1
 800057c:	fa25 f101 	lsr.w	r1, r5, r1
 8000580:	409d      	lsls	r5, r3
 8000582:	432a      	orrs	r2, r5
 8000584:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000588:	fa1f fe8c 	uxth.w	lr, ip
 800058c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000590:	fb07 1510 	mls	r5, r7, r0, r1
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800059a:	fb00 f50e 	mul.w	r5, r0, lr
 800059e:	428d      	cmp	r5, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x258>
 80005a6:	eb1c 0101 	adds.w	r1, ip, r1
 80005aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ae:	d22f      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005b0:	428d      	cmp	r5, r1
 80005b2:	d92d      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005b4:	3802      	subs	r0, #2
 80005b6:	4461      	add	r1, ip
 80005b8:	1b49      	subs	r1, r1, r5
 80005ba:	b292      	uxth	r2, r2
 80005bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005c0:	fb07 1115 	mls	r1, r7, r5, r1
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	fb05 f10e 	mul.w	r1, r5, lr
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x282>
 80005d0:	eb1c 0202 	adds.w	r2, ip, r2
 80005d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005d8:	d216      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 80005da:	4291      	cmp	r1, r2
 80005dc:	d914      	bls.n	8000608 <__udivmoddi4+0x2a8>
 80005de:	3d02      	subs	r5, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a52      	subs	r2, r2, r1
 80005e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005e8:	e738      	b.n	800045c <__udivmoddi4+0xfc>
 80005ea:	4631      	mov	r1, r6
 80005ec:	4630      	mov	r0, r6
 80005ee:	e708      	b.n	8000402 <__udivmoddi4+0xa2>
 80005f0:	4639      	mov	r1, r7
 80005f2:	e6e6      	b.n	80003c2 <__udivmoddi4+0x62>
 80005f4:	4610      	mov	r0, r2
 80005f6:	e6fb      	b.n	80003f0 <__udivmoddi4+0x90>
 80005f8:	4548      	cmp	r0, r9
 80005fa:	d2a9      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000600:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000604:	3b01      	subs	r3, #1
 8000606:	e7a3      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000608:	4645      	mov	r5, r8
 800060a:	e7ea      	b.n	80005e2 <__udivmoddi4+0x282>
 800060c:	462b      	mov	r3, r5
 800060e:	e794      	b.n	800053a <__udivmoddi4+0x1da>
 8000610:	4640      	mov	r0, r8
 8000612:	e7d1      	b.n	80005b8 <__udivmoddi4+0x258>
 8000614:	46d0      	mov	r8, sl
 8000616:	e77b      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000618:	3d02      	subs	r5, #2
 800061a:	4462      	add	r2, ip
 800061c:	e732      	b.n	8000484 <__udivmoddi4+0x124>
 800061e:	4608      	mov	r0, r1
 8000620:	e70a      	b.n	8000438 <__udivmoddi4+0xd8>
 8000622:	4464      	add	r4, ip
 8000624:	3802      	subs	r0, #2
 8000626:	e742      	b.n	80004ae <__udivmoddi4+0x14e>

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	BaseType_t xReturned = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
	TaskHandle_t xTask1Handle = NULL, xTask2Handle = NULL;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fc8b 	bl	8000f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f853 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f8bb 	bl	80007c0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // enable the CYCCNT counter
  *DWT_CTRL |= (1 << 0);
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <main+0xa0>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1f      	ldr	r2, [pc, #124]	; (80006cc <main+0xa0>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6013      	str	r3, [r2, #0]

  // enable usart
  SEGGER_UART_init(500000);
 8000656:	481e      	ldr	r0, [pc, #120]	; (80006d0 <main+0xa4>)
 8000658:	f003 fa98 	bl	8003b8c <SEGGER_UART_init>

  // start segger recording
  SEGGER_SYSVIEW_Conf();
 800065c:	f003 f8c0 	bl	80037e0 <SEGGER_SYSVIEW_Conf>
  //SEGGER_SYSVIEW_Start(); // not required when using usart recording

  xReturned = xTaskCreate(Task1_Handler, "Task-1", 200, "Hello world from Task-1", 2, &xTask1Handle);
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <main+0xa8>)
 800066c:	22c8      	movs	r2, #200	; 0xc8
 800066e:	491a      	ldr	r1, [pc, #104]	; (80006d8 <main+0xac>)
 8000670:	481a      	ldr	r0, [pc, #104]	; (80006dc <main+0xb0>)
 8000672:	f001 ff0a 	bl	800248a <xTaskCreate>
 8000676:	6178      	str	r0, [r7, #20]
  configASSERT(pdPASS == xReturned);
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00a      	beq.n	8000694 <main+0x68>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	f3bf 8f6f 	isb	sy
 800068a:	f3bf 8f4f 	dsb	sy
 800068e:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000690:	bf00      	nop
 8000692:	e7fe      	b.n	8000692 <main+0x66>

  xReturned = xTaskCreate(Task2_Handler, "Task-2", 200, "Hello world from Task-2", 2, &xTask2Handle);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	2302      	movs	r3, #2
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <main+0xb4>)
 800069e:	22c8      	movs	r2, #200	; 0xc8
 80006a0:	4910      	ldr	r1, [pc, #64]	; (80006e4 <main+0xb8>)
 80006a2:	4811      	ldr	r0, [pc, #68]	; (80006e8 <main+0xbc>)
 80006a4:	f001 fef1 	bl	800248a <xTaskCreate>
 80006a8:	6178      	str	r0, [r7, #20]
  configASSERT(pdPASS == xReturned);
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d00a      	beq.n	80006c6 <main+0x9a>
        __asm volatile
 80006b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b4:	f383 8811 	msr	BASEPRI, r3
 80006b8:	f3bf 8f6f 	isb	sy
 80006bc:	f3bf 8f4f 	dsb	sy
 80006c0:	60fb      	str	r3, [r7, #12]
    }
 80006c2:	bf00      	nop
 80006c4:	e7fe      	b.n	80006c4 <main+0x98>

  // start the schedular
  vTaskStartScheduler();
 80006c6:	f002 f85b 	bl	8002780 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <main+0x9e>
 80006cc:	e0001000 	.word	0xe0001000
 80006d0:	0007a120 	.word	0x0007a120
 80006d4:	08006800 	.word	0x08006800
 80006d8:	08006818 	.word	0x08006818
 80006dc:	08000c99 	.word	0x08000c99
 80006e0:	08006820 	.word	0x08006820
 80006e4:	08006838 	.word	0x08006838
 80006e8:	08000ce1 	.word	0x08000ce1

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	; 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	; 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 fbe8 	bl	8005ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <SystemClock_Config+0xcc>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a27      	ldr	r2, [pc, #156]	; (80007b8 <SystemClock_Config+0xcc>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	; 0x40
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <SystemClock_Config+0xcc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <SystemClock_Config+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <SystemClock_Config+0xd0>)
 8000736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <SystemClock_Config+0xd0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800075c:	2308      	movs	r3, #8
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000760:	23a8      	movs	r3, #168	; 0xa8
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000768:	2307      	movs	r3, #7
 800076a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fedb 	bl	800152c <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800077c:	f000 fae6 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2302      	movs	r3, #2
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2105      	movs	r1, #5
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 f93c 	bl	8001a1c <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007aa:	f000 facf 	bl	8000d4c <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	; 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08e      	sub	sp, #56	; 0x38
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
 80007da:	4bb2      	ldr	r3, [pc, #712]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4ab1      	ldr	r2, [pc, #708]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4baf      	ldr	r3, [pc, #700]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	623b      	str	r3, [r7, #32]
 80007f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	4bab      	ldr	r3, [pc, #684]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4aaa      	ldr	r2, [pc, #680]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 80007fc:	f043 0320 	orr.w	r3, r3, #32
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4ba8      	ldr	r3, [pc, #672]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0320 	and.w	r3, r3, #32
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	4ba4      	ldr	r3, [pc, #656]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4aa3      	ldr	r2, [pc, #652]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4ba1      	ldr	r3, [pc, #644]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	4b9d      	ldr	r3, [pc, #628]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a9c      	ldr	r2, [pc, #624]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b9a      	ldr	r3, [pc, #616]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b96      	ldr	r3, [pc, #600]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a95      	ldr	r2, [pc, #596]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b93      	ldr	r3, [pc, #588]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b8f      	ldr	r3, [pc, #572]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a8e      	ldr	r2, [pc, #568]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b8c      	ldr	r3, [pc, #560]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b88      	ldr	r3, [pc, #544]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a87      	ldr	r2, [pc, #540]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b85      	ldr	r3, [pc, #532]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b81      	ldr	r3, [pc, #516]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a80      	ldr	r2, [pc, #512]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b7e      	ldr	r3, [pc, #504]	; (8000aa4 <MX_GPIO_Init+0x2e4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2116      	movs	r1, #22
 80008ba:	487b      	ldr	r0, [pc, #492]	; (8000aa8 <MX_GPIO_Init+0x2e8>)
 80008bc:	f000 fe1c 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	4879      	ldr	r0, [pc, #484]	; (8000aac <MX_GPIO_Init+0x2ec>)
 80008c6:	f000 fe17 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80008d0:	4877      	ldr	r0, [pc, #476]	; (8000ab0 <MX_GPIO_Init+0x2f0>)
 80008d2:	f000 fe11 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80008dc:	4875      	ldr	r0, [pc, #468]	; (8000ab4 <MX_GPIO_Init+0x2f4>)
 80008de:	f000 fe0b 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80008e2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008f4:	230c      	movs	r3, #12
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	486e      	ldr	r0, [pc, #440]	; (8000ab8 <MX_GPIO_Init+0x2f8>)
 8000900:	f000 fc4e 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000904:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000916:	2305      	movs	r3, #5
 8000918:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	4619      	mov	r1, r3
 8000920:	4865      	ldr	r0, [pc, #404]	; (8000ab8 <MX_GPIO_Init+0x2f8>)
 8000922:	f000 fc3d 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000938:	230e      	movs	r3, #14
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	485d      	ldr	r0, [pc, #372]	; (8000ab8 <MX_GPIO_Init+0x2f8>)
 8000944:	f000 fc2c 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000948:	2301      	movs	r3, #1
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000958:	230c      	movs	r3, #12
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	4619      	mov	r1, r3
 8000962:	4851      	ldr	r0, [pc, #324]	; (8000aa8 <MX_GPIO_Init+0x2e8>)
 8000964:	f000 fc1c 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000968:	2316      	movs	r3, #22
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	484a      	ldr	r0, [pc, #296]	; (8000aa8 <MX_GPIO_Init+0x2e8>)
 8000980:	f000 fc0e 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000984:	f248 0307 	movw	r3, #32775	; 0x8007
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800098a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000998:	4619      	mov	r1, r3
 800099a:	4844      	ldr	r0, [pc, #272]	; (8000aac <MX_GPIO_Init+0x2ec>)
 800099c:	f000 fc00 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80009a0:	f641 0358 	movw	r3, #6232	; 0x1858
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009b2:	230e      	movs	r3, #14
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	4619      	mov	r1, r3
 80009bc:	483b      	ldr	r0, [pc, #236]	; (8000aac <MX_GPIO_Init+0x2ec>)
 80009be:	f000 fbef 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	4834      	ldr	r0, [pc, #208]	; (8000aac <MX_GPIO_Init+0x2ec>)
 80009da:	f000 fbe1 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009de:	2320      	movs	r3, #32
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f0:	4619      	mov	r1, r3
 80009f2:	482d      	ldr	r0, [pc, #180]	; (8000aa8 <MX_GPIO_Init+0x2e8>)
 80009f4:	f000 fbd4 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80009f8:	2303      	movs	r3, #3
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a08:	2309      	movs	r3, #9
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	482a      	ldr	r0, [pc, #168]	; (8000abc <MX_GPIO_Init+0x2fc>)
 8000a14:	f000 fbc4 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4824      	ldr	r0, [pc, #144]	; (8000abc <MX_GPIO_Init+0x2fc>)
 8000a2c:	f000 fbb8 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a30:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a42:	230c      	movs	r3, #12
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <MX_GPIO_Init+0x2f4>)
 8000a4e:	f000 fba7 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a52:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a64:	230c      	movs	r3, #12
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <MX_GPIO_Init+0x300>)
 8000a70:	f000 fb96 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a74:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a86:	230e      	movs	r3, #14
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480a      	ldr	r0, [pc, #40]	; (8000abc <MX_GPIO_Init+0x2fc>)
 8000a92:	f000 fb85 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a96:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aa0:	e010      	b.n	8000ac4 <MX_GPIO_Init+0x304>
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40021800 	.word	0x40021800
 8000ab8:	40021400 	.word	0x40021400
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000acc:	230c      	movs	r3, #12
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	486b      	ldr	r0, [pc, #428]	; (8000c84 <MX_GPIO_Init+0x4c4>)
 8000ad8:	f000 fb62 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4864      	ldr	r0, [pc, #400]	; (8000c84 <MX_GPIO_Init+0x4c4>)
 8000af2:	f000 fb55 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000af6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	485d      	ldr	r0, [pc, #372]	; (8000c88 <MX_GPIO_Init+0x4c8>)
 8000b14:	f000 fb44 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4856      	ldr	r0, [pc, #344]	; (8000c88 <MX_GPIO_Init+0x4c8>)
 8000b2e:	f000 fb37 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b32:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	484f      	ldr	r0, [pc, #316]	; (8000c88 <MX_GPIO_Init+0x4c8>)
 8000b4c:	f000 fb28 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b50:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b62:	230e      	movs	r3, #14
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4847      	ldr	r0, [pc, #284]	; (8000c8c <MX_GPIO_Init+0x4cc>)
 8000b6e:	f000 fb17 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b72:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b84:	230e      	movs	r3, #14
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4840      	ldr	r0, [pc, #256]	; (8000c90 <MX_GPIO_Init+0x4d0>)
 8000b90:	f000 fb06 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9a:	2312      	movs	r3, #18
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4837      	ldr	r0, [pc, #220]	; (8000c90 <MX_GPIO_Init+0x4d0>)
 8000bb2:	f000 faf5 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbc:	2312      	movs	r3, #18
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4830      	ldr	r0, [pc, #192]	; (8000c94 <MX_GPIO_Init+0x4d4>)
 8000bd4:	f000 fae4 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bd8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bea:	2307      	movs	r3, #7
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4827      	ldr	r0, [pc, #156]	; (8000c94 <MX_GPIO_Init+0x4d4>)
 8000bf6:	f000 fad3 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000bfa:	2348      	movs	r3, #72	; 0x48
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c0a:	230e      	movs	r3, #14
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	481c      	ldr	r0, [pc, #112]	; (8000c88 <MX_GPIO_Init+0x4c8>)
 8000c16:	f000 fac3 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c2c:	2309      	movs	r3, #9
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	4815      	ldr	r0, [pc, #84]	; (8000c8c <MX_GPIO_Init+0x4cc>)
 8000c38:	f000 fab2 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c3c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_GPIO_Init+0x4cc>)
 8000c56:	f000 faa3 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c5a:	2360      	movs	r3, #96	; 0x60
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <MX_GPIO_Init+0x4c4>)
 8000c76:	f000 fa93 	bl	80011a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3738      	adds	r7, #56	; 0x38
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020400 	.word	0x40020400
 8000c88:	40020c00 	.word	0x40020c00
 8000c8c:	40021800 	.word	0x40021800
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020000 	.word	0x40020000

08000c98 <Task1_Handler>:

/* USER CODE BEGIN 4 */

static void Task1_Handler(void *pvParam)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b09c      	sub	sp, #112	; 0x70
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	char msg[100];
	memset(msg, 0, sizeof(msg));
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2264      	movs	r2, #100	; 0x64
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f005 f911 	bl	8005ed0 <memset>

	while(1) {
		//printf("%s\n", (char *)pvParam);

		snprintf(msg, sizeof(msg), "%s\n", (char *)pvParam);
 8000cae:	f107 000c 	add.w	r0, r7, #12
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <Task1_Handler+0x40>)
 8000cb6:	2164      	movs	r1, #100	; 0x64
 8000cb8:	f005 f8c6 	bl	8005e48 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f005 f823 	bl	8005d0c <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <Task1_Handler+0x44>)
 8000cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	f3bf 8f4f 	dsb	sy
 8000cd2:	f3bf 8f6f 	isb	sy
		snprintf(msg, sizeof(msg), "%s\n", (char *)pvParam);
 8000cd6:	e7ea      	b.n	8000cae <Task1_Handler+0x16>
 8000cd8:	08006840 	.word	0x08006840
 8000cdc:	e000ed04 	.word	0xe000ed04

08000ce0 <Task2_Handler>:

	vTaskDelete(NULL);
}

static void Task2_Handler(void *pvParam)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b09c      	sub	sp, #112	; 0x70
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	char msg[100];
	memset(msg, 0, sizeof(msg));
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2264      	movs	r2, #100	; 0x64
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f005 f8ed 	bl	8005ed0 <memset>

	while(1) {
		//printf("%s\n", (char *)pvParam);

		snprintf(msg, sizeof(msg), "%s\n", (char *)pvParam);
 8000cf6:	f107 000c 	add.w	r0, r7, #12
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <Task2_Handler+0x40>)
 8000cfe:	2164      	movs	r1, #100	; 0x64
 8000d00:	f005 f8a2 	bl	8005e48 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f004 ffff 	bl	8005d0c <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <Task2_Handler+0x44>)
 8000d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	f3bf 8f4f 	dsb	sy
 8000d1a:	f3bf 8f6f 	isb	sy
		snprintf(msg, sizeof(msg), "%s\n", (char *)pvParam);
 8000d1e:	e7ea      	b.n	8000cf6 <Task2_Handler+0x16>
 8000d20:	08006840 	.word	0x08006840
 8000d24:	e000ed04 	.word	0xe000ed04

08000d28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d3a:	f000 f92f 	bl	8000f9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40001000 	.word	0x40001000

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000d96:	f002 f99f 	bl	80030d8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08e      	sub	sp, #56	; 0x38
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <HAL_InitTick+0xe4>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a32      	ldr	r2, [pc, #200]	; (8000e8c <HAL_InitTick+0xe4>)
 8000dc2:	f043 0310 	orr.w	r3, r3, #16
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <HAL_InitTick+0xe4>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f003 0310 	and.w	r3, r3, #16
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dd4:	f107 0210 	add.w	r2, r7, #16
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 f828 	bl	8001e34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d103      	bne.n	8000df6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dee:	f001 f80d 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8000df2:	6378      	str	r0, [r7, #52]	; 0x34
 8000df4:	e004      	b.n	8000e00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000df6:	f001 f809 	bl	8001e0c <HAL_RCC_GetPCLK1Freq>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e02:	4a23      	ldr	r2, [pc, #140]	; (8000e90 <HAL_InitTick+0xe8>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	0c9b      	lsrs	r3, r3, #18
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <HAL_InitTick+0xec>)
 8000e10:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <HAL_InitTick+0xf0>)
 8000e12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_InitTick+0xec>)
 8000e16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <HAL_InitTick+0xec>)
 8000e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_InitTick+0xec>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <HAL_InitTick+0xec>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_InitTick+0xec>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e34:	4817      	ldr	r0, [pc, #92]	; (8000e94 <HAL_InitTick+0xec>)
 8000e36:	f001 f82f 	bl	8001e98 <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d11b      	bne.n	8000e80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e48:	4812      	ldr	r0, [pc, #72]	; (8000e94 <HAL_InitTick+0xec>)
 8000e4a:	f001 f87f 	bl	8001f4c <HAL_TIM_Base_Start_IT>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d111      	bne.n	8000e80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e5c:	2036      	movs	r0, #54	; 0x36
 8000e5e:	f000 f991 	bl	8001184 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d808      	bhi.n	8000e7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	2036      	movs	r0, #54	; 0x36
 8000e6e:	f000 f96d 	bl	800114c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_InitTick+0xf4>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	e002      	b.n	8000e80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3738      	adds	r7, #56	; 0x38
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	431bde83 	.word	0x431bde83
 8000e94:	20000088 	.word	0x20000088
 8000e98:	40001000 	.word	0x40001000
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <TIM6_DAC_IRQHandler+0x10>)
 8000ed2:	f001 f8ab 	bl	800202c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000088 	.word	0x20000088

08000ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <SystemInit+0x20>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <SystemInit+0x20>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f08:	f7ff ffea 	bl	8000ee0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f0e:	490d      	ldr	r1, [pc, #52]	; (8000f44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f24:	4c0a      	ldr	r4, [pc, #40]	; (8000f50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f32:	f004 ffd5 	bl	8005ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f36:	f7ff fb79 	bl	800062c <main>
  bx  lr    
 8000f3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f3c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f48:	080069a8 	.word	0x080069a8
  ldr r2, =_sbss
 8000f4c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f50:	200145c8 	.word	0x200145c8

08000f54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC_IRQHandler>
	...

08000f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <HAL_Init+0x40>)
 8000f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_Init+0x40>)
 8000f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_Init+0x40>)
 8000f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f8d8 	bl	8001136 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	200f      	movs	r0, #15
 8000f88:	f7ff ff0e 	bl	8000da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f7ff fee4 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023c00 	.word	0x40023c00

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	200000d0 	.word	0x200000d0

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	200000d0 	.word	0x200000d0

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ff4c 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800115e:	f7ff ff61 	bl	8001024 <__NVIC_GetPriorityGrouping>
 8001162:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	68b9      	ldr	r1, [r7, #8]
 8001168:	6978      	ldr	r0, [r7, #20]
 800116a:	f7ff ffb1 	bl	80010d0 <NVIC_EncodePriority>
 800116e:	4602      	mov	r2, r0
 8001170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff80 	bl	800107c <__NVIC_SetPriority>
}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff54 	bl	8001040 <__NVIC_EnableIRQ>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	e177      	b.n	80014ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011bc:	2201      	movs	r2, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f040 8166 	bne.w	80014a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d005      	beq.n	80011f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d130      	bne.n	8001254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 0201 	and.w	r2, r3, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b03      	cmp	r3, #3
 800125e:	d017      	beq.n	8001290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d123      	bne.n	80012e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	08da      	lsrs	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3208      	adds	r2, #8
 80012a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	220f      	movs	r2, #15
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	08da      	lsrs	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3208      	adds	r2, #8
 80012de:	69b9      	ldr	r1, [r7, #24]
 80012e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0203 	and.w	r2, r3, #3
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 80c0 	beq.w	80014a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b66      	ldr	r3, [pc, #408]	; (80014c4 <HAL_GPIO_Init+0x324>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a65      	ldr	r2, [pc, #404]	; (80014c4 <HAL_GPIO_Init+0x324>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b63      	ldr	r3, [pc, #396]	; (80014c4 <HAL_GPIO_Init+0x324>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001342:	4a61      	ldr	r2, [pc, #388]	; (80014c8 <HAL_GPIO_Init+0x328>)
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a58      	ldr	r2, [pc, #352]	; (80014cc <HAL_GPIO_Init+0x32c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d037      	beq.n	80013de <HAL_GPIO_Init+0x23e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a57      	ldr	r2, [pc, #348]	; (80014d0 <HAL_GPIO_Init+0x330>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d031      	beq.n	80013da <HAL_GPIO_Init+0x23a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a56      	ldr	r2, [pc, #344]	; (80014d4 <HAL_GPIO_Init+0x334>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d02b      	beq.n	80013d6 <HAL_GPIO_Init+0x236>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a55      	ldr	r2, [pc, #340]	; (80014d8 <HAL_GPIO_Init+0x338>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d025      	beq.n	80013d2 <HAL_GPIO_Init+0x232>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a54      	ldr	r2, [pc, #336]	; (80014dc <HAL_GPIO_Init+0x33c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d01f      	beq.n	80013ce <HAL_GPIO_Init+0x22e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a53      	ldr	r2, [pc, #332]	; (80014e0 <HAL_GPIO_Init+0x340>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d019      	beq.n	80013ca <HAL_GPIO_Init+0x22a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a52      	ldr	r2, [pc, #328]	; (80014e4 <HAL_GPIO_Init+0x344>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_GPIO_Init+0x226>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a51      	ldr	r2, [pc, #324]	; (80014e8 <HAL_GPIO_Init+0x348>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00d      	beq.n	80013c2 <HAL_GPIO_Init+0x222>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a50      	ldr	r2, [pc, #320]	; (80014ec <HAL_GPIO_Init+0x34c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d007      	beq.n	80013be <HAL_GPIO_Init+0x21e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4f      	ldr	r2, [pc, #316]	; (80014f0 <HAL_GPIO_Init+0x350>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d101      	bne.n	80013ba <HAL_GPIO_Init+0x21a>
 80013b6:	2309      	movs	r3, #9
 80013b8:	e012      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013ba:	230a      	movs	r3, #10
 80013bc:	e010      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013be:	2308      	movs	r3, #8
 80013c0:	e00e      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013c2:	2307      	movs	r3, #7
 80013c4:	e00c      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013c6:	2306      	movs	r3, #6
 80013c8:	e00a      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013ca:	2305      	movs	r3, #5
 80013cc:	e008      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013ce:	2304      	movs	r3, #4
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013d2:	2303      	movs	r3, #3
 80013d4:	e004      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_GPIO_Init+0x240>
 80013de:	2300      	movs	r3, #0
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	f002 0203 	and.w	r2, r2, #3
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	4093      	lsls	r3, r2
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f0:	4935      	ldr	r1, [pc, #212]	; (80014c8 <HAL_GPIO_Init+0x328>)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fe:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <HAL_GPIO_Init+0x354>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001422:	4a34      	ldr	r2, [pc, #208]	; (80014f4 <HAL_GPIO_Init+0x354>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001428:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <HAL_GPIO_Init+0x354>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800144c:	4a29      	ldr	r2, [pc, #164]	; (80014f4 <HAL_GPIO_Init+0x354>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001452:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <HAL_GPIO_Init+0x354>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001476:	4a1f      	ldr	r2, [pc, #124]	; (80014f4 <HAL_GPIO_Init+0x354>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800147c:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <HAL_GPIO_Init+0x354>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a0:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <HAL_GPIO_Init+0x354>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3301      	adds	r3, #1
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	f67f ae84 	bls.w	80011bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40013800 	.word	0x40013800
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020400 	.word	0x40020400
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40020c00 	.word	0x40020c00
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40021400 	.word	0x40021400
 80014e4:	40021800 	.word	0x40021800
 80014e8:	40021c00 	.word	0x40021c00
 80014ec:	40022000 	.word	0x40022000
 80014f0:	40022400 	.word	0x40022400
 80014f4:	40013c00 	.word	0x40013c00

080014f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001514:	e003      	b.n	800151e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001516:	887b      	ldrh	r3, [r7, #2]
 8001518:	041a      	lsls	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	619a      	str	r2, [r3, #24]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e267      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d075      	beq.n	8001636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154a:	4b88      	ldr	r3, [pc, #544]	; (800176c <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b04      	cmp	r3, #4
 8001554:	d00c      	beq.n	8001570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001556:	4b85      	ldr	r3, [pc, #532]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800155e:	2b08      	cmp	r3, #8
 8001560:	d112      	bne.n	8001588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001562:	4b82      	ldr	r3, [pc, #520]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800156e:	d10b      	bne.n	8001588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	4b7e      	ldr	r3, [pc, #504]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d05b      	beq.n	8001634 <HAL_RCC_OscConfig+0x108>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d157      	bne.n	8001634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e242      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001590:	d106      	bne.n	80015a0 <HAL_RCC_OscConfig+0x74>
 8001592:	4b76      	ldr	r3, [pc, #472]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a75      	ldr	r2, [pc, #468]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e01d      	b.n	80015dc <HAL_RCC_OscConfig+0xb0>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x98>
 80015aa:	4b70      	ldr	r3, [pc, #448]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6f      	ldr	r2, [pc, #444]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b6d      	ldr	r3, [pc, #436]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6c      	ldr	r2, [pc, #432]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0xb0>
 80015c4:	4b69      	ldr	r3, [pc, #420]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a68      	ldr	r2, [pc, #416]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b66      	ldr	r3, [pc, #408]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a65      	ldr	r2, [pc, #404]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d013      	beq.n	800160c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fcee 	bl	8000fc4 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fcea 	bl	8000fc4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e207      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b5b      	ldr	r3, [pc, #364]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0xc0>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fcda 	bl	8000fc4 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fcd6 	bl	8000fc4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1f3      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	4b51      	ldr	r3, [pc, #324]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0xe8>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d063      	beq.n	800170a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001642:	4b4a      	ldr	r3, [pc, #296]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001656:	2b08      	cmp	r3, #8
 8001658:	d11c      	bne.n	8001694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165a:	4b44      	ldr	r3, [pc, #272]	; (800176c <HAL_RCC_OscConfig+0x240>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d116      	bne.n	8001694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	4b41      	ldr	r3, [pc, #260]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_RCC_OscConfig+0x152>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e1c7      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4937      	ldr	r1, [pc, #220]	; (800176c <HAL_RCC_OscConfig+0x240>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	e03a      	b.n	800170a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d020      	beq.n	80016de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169c:	4b34      	ldr	r3, [pc, #208]	; (8001770 <HAL_RCC_OscConfig+0x244>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff fc8f 	bl	8000fc4 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fc8b 	bl	8000fc4 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e1a8      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	4b2b      	ldr	r3, [pc, #172]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4925      	ldr	r1, [pc, #148]	; (800176c <HAL_RCC_OscConfig+0x240>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016de:	4b24      	ldr	r3, [pc, #144]	; (8001770 <HAL_RCC_OscConfig+0x244>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fc6e 	bl	8000fc4 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff fc6a 	bl	8000fc4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e187      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d036      	beq.n	8001784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d016      	beq.n	800174c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_RCC_OscConfig+0x248>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7ff fc4e 	bl	8000fc4 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff fc4a 	bl	8000fc4 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e167      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_OscConfig+0x240>)
 8001740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x200>
 800174a:	e01b      	b.n	8001784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_RCC_OscConfig+0x248>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff fc37 	bl	8000fc4 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001758:	e00e      	b.n	8001778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175a:	f7ff fc33 	bl	8000fc4 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d907      	bls.n	8001778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e150      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
 800176c:	40023800 	.word	0x40023800
 8001770:	42470000 	.word	0x42470000
 8001774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	4b88      	ldr	r3, [pc, #544]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800177a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1ea      	bne.n	800175a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 8097 	beq.w	80018c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001796:	4b81      	ldr	r3, [pc, #516]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10f      	bne.n	80017c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	4b7d      	ldr	r3, [pc, #500]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a7c      	ldr	r2, [pc, #496]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b7a      	ldr	r3, [pc, #488]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017be:	2301      	movs	r3, #1
 80017c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	4b77      	ldr	r3, [pc, #476]	; (80019a0 <HAL_RCC_OscConfig+0x474>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ce:	4b74      	ldr	r3, [pc, #464]	; (80019a0 <HAL_RCC_OscConfig+0x474>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a73      	ldr	r2, [pc, #460]	; (80019a0 <HAL_RCC_OscConfig+0x474>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017da:	f7ff fbf3 	bl	8000fc4 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e2:	f7ff fbef 	bl	8000fc4 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e10c      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <HAL_RCC_OscConfig+0x474>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x2ea>
 8001808:	4b64      	ldr	r3, [pc, #400]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800180a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180c:	4a63      	ldr	r2, [pc, #396]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6713      	str	r3, [r2, #112]	; 0x70
 8001814:	e01c      	b.n	8001850 <HAL_RCC_OscConfig+0x324>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b05      	cmp	r3, #5
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x30c>
 800181e:	4b5f      	ldr	r3, [pc, #380]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001822:	4a5e      	ldr	r2, [pc, #376]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	6713      	str	r3, [r2, #112]	; 0x70
 800182a:	4b5c      	ldr	r3, [pc, #368]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	4a5b      	ldr	r2, [pc, #364]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6713      	str	r3, [r2, #112]	; 0x70
 8001836:	e00b      	b.n	8001850 <HAL_RCC_OscConfig+0x324>
 8001838:	4b58      	ldr	r3, [pc, #352]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183c:	4a57      	ldr	r2, [pc, #348]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	6713      	str	r3, [r2, #112]	; 0x70
 8001844:	4b55      	ldr	r3, [pc, #340]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001848:	4a54      	ldr	r2, [pc, #336]	; (800199c <HAL_RCC_OscConfig+0x470>)
 800184a:	f023 0304 	bic.w	r3, r3, #4
 800184e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d015      	beq.n	8001884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f7ff fbb4 	bl	8000fc4 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185e:	e00a      	b.n	8001876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001860:	f7ff fbb0 	bl	8000fc4 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0cb      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001876:	4b49      	ldr	r3, [pc, #292]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0ee      	beq.n	8001860 <HAL_RCC_OscConfig+0x334>
 8001882:	e014      	b.n	80018ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001884:	f7ff fb9e 	bl	8000fc4 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188c:	f7ff fb9a 	bl	8000fc4 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e0b5      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a2:	4b3e      	ldr	r3, [pc, #248]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1ee      	bne.n	800188c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d105      	bne.n	80018c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b4:	4b39      	ldr	r3, [pc, #228]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	4a38      	ldr	r2, [pc, #224]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80018ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80a1 	beq.w	8001a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ca:	4b34      	ldr	r3, [pc, #208]	; (800199c <HAL_RCC_OscConfig+0x470>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d05c      	beq.n	8001990 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d141      	bne.n	8001962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <HAL_RCC_OscConfig+0x478>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fb6e 	bl	8000fc4 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff fb6a 	bl	8000fc4 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e087      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69da      	ldr	r2, [r3, #28]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	019b      	lsls	r3, r3, #6
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	085b      	lsrs	r3, r3, #1
 8001922:	3b01      	subs	r3, #1
 8001924:	041b      	lsls	r3, r3, #16
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	491b      	ldr	r1, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_RCC_OscConfig+0x478>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fb43 	bl	8000fc4 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff fb3f 	bl	8000fc4 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e05c      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x416>
 8001960:	e054      	b.n	8001a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_RCC_OscConfig+0x478>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fb2c 	bl	8000fc4 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff fb28 	bl	8000fc4 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e045      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_RCC_OscConfig+0x470>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x444>
 800198e:	e03d      	b.n	8001a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e038      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
 800199c:	40023800 	.word	0x40023800
 80019a0:	40007000 	.word	0x40007000
 80019a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_RCC_OscConfig+0x4ec>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d028      	beq.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d121      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d11a      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019d8:	4013      	ands	r3, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d111      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	085b      	lsrs	r3, r3, #1
 80019f0:	3b01      	subs	r3, #1
 80019f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d107      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0cc      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a30:	4b68      	ldr	r3, [pc, #416]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d90c      	bls.n	8001a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b65      	ldr	r3, [pc, #404]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b63      	ldr	r3, [pc, #396]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0b8      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d020      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a70:	4b59      	ldr	r3, [pc, #356]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4a58      	ldr	r2, [pc, #352]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a88:	4b53      	ldr	r3, [pc, #332]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4a52      	ldr	r2, [pc, #328]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a94:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	494d      	ldr	r1, [pc, #308]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d044      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	4b47      	ldr	r3, [pc, #284]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d119      	bne.n	8001afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e07f      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d003      	beq.n	8001ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ada:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d109      	bne.n	8001afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e06f      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e067      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afa:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f023 0203 	bic.w	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4934      	ldr	r1, [pc, #208]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b0c:	f7ff fa5a 	bl	8000fc4 <HAL_GetTick>
 8001b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b14:	f7ff fa56 	bl	8000fc4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e04f      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 020c 	and.w	r2, r3, #12
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d1eb      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d20c      	bcs.n	8001b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e032      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4916      	ldr	r1, [pc, #88]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ba2:	f000 f821 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	490a      	ldr	r1, [pc, #40]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	5ccb      	ldrb	r3, [r1, r3]
 8001bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f8f0 	bl	8000da8 <HAL_InitTick>

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023c00 	.word	0x40023c00
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	08006910 	.word	0x08006910
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bec:	b094      	sub	sp, #80	; 0x50
 8001bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c00:	4b79      	ldr	r3, [pc, #484]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d00d      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x40>
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	f200 80e1 	bhi.w	8001dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x34>
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c1a:	e0db      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b73      	ldr	r3, [pc, #460]	; (8001dec <HAL_RCC_GetSysClockFreq+0x204>)
 8001c1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c20:	e0db      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c22:	4b73      	ldr	r3, [pc, #460]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c26:	e0d8      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c28:	4b6f      	ldr	r3, [pc, #444]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c32:	4b6d      	ldr	r3, [pc, #436]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d063      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3e:	4b6a      	ldr	r3, [pc, #424]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	099b      	lsrs	r3, r3, #6
 8001c44:	2200      	movs	r2, #0
 8001c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
 8001c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	f04f 0000 	mov.w	r0, #0
 8001c62:	f04f 0100 	mov.w	r1, #0
 8001c66:	0159      	lsls	r1, r3, #5
 8001c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c6c:	0150      	lsls	r0, r2, #5
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4621      	mov	r1, r4
 8001c74:	1a51      	subs	r1, r2, r1
 8001c76:	6139      	str	r1, [r7, #16]
 8001c78:	4629      	mov	r1, r5
 8001c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c8c:	4659      	mov	r1, fp
 8001c8e:	018b      	lsls	r3, r1, #6
 8001c90:	4651      	mov	r1, sl
 8001c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c96:	4651      	mov	r1, sl
 8001c98:	018a      	lsls	r2, r1, #6
 8001c9a:	4651      	mov	r1, sl
 8001c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8001ca0:	4659      	mov	r1, fp
 8001ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cba:	4690      	mov	r8, r2
 8001cbc:	4699      	mov	r9, r3
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	eb18 0303 	adds.w	r3, r8, r3
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	462b      	mov	r3, r5
 8001cc8:	eb49 0303 	adc.w	r3, r9, r3
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cda:	4629      	mov	r1, r5
 8001cdc:	024b      	lsls	r3, r1, #9
 8001cde:	4621      	mov	r1, r4
 8001ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	024a      	lsls	r2, r1, #9
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cee:	2200      	movs	r2, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cf8:	f7fe fb1a 	bl	8000330 <__aeabi_uldivmod>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4613      	mov	r3, r2
 8001d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d04:	e058      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d06:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	4611      	mov	r1, r2
 8001d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d16:	623b      	str	r3, [r7, #32]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d20:	4642      	mov	r2, r8
 8001d22:	464b      	mov	r3, r9
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	0159      	lsls	r1, r3, #5
 8001d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d32:	0150      	lsls	r0, r2, #5
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4641      	mov	r1, r8
 8001d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d3e:	4649      	mov	r1, r9
 8001d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d58:	ebb2 040a 	subs.w	r4, r2, sl
 8001d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	00eb      	lsls	r3, r5, #3
 8001d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d6e:	00e2      	lsls	r2, r4, #3
 8001d70:	4614      	mov	r4, r2
 8001d72:	461d      	mov	r5, r3
 8001d74:	4643      	mov	r3, r8
 8001d76:	18e3      	adds	r3, r4, r3
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	eb45 0303 	adc.w	r3, r5, r3
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d8e:	4629      	mov	r1, r5
 8001d90:	028b      	lsls	r3, r1, #10
 8001d92:	4621      	mov	r1, r4
 8001d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d98:	4621      	mov	r1, r4
 8001d9a:	028a      	lsls	r2, r1, #10
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001da2:	2200      	movs	r2, #0
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	61fa      	str	r2, [r7, #28]
 8001da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dac:	f7fe fac0 	bl	8000330 <__aeabi_uldivmod>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4613      	mov	r3, r2
 8001db6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dd2:	e002      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_RCC_GetSysClockFreq+0x204>)
 8001dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3750      	adds	r7, #80	; 0x50
 8001de0:	46bd      	mov	sp, r7
 8001de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	00f42400 	.word	0x00f42400
 8001df0:	007a1200 	.word	0x007a1200

08001df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000

08001e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e10:	f7ff fff0 	bl	8001df4 <HAL_RCC_GetHCLKFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	0a9b      	lsrs	r3, r3, #10
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	4903      	ldr	r1, [pc, #12]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	08006920 	.word	0x08006920

08001e34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	220f      	movs	r2, #15
 8001e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_RCC_GetClockConfig+0x5c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0203 	and.w	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_RCC_GetClockConfig+0x5c>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_GetClockConfig+0x5c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	08db      	lsrs	r3, r3, #3
 8001e6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <HAL_RCC_GetClockConfig+0x60>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 020f 	and.w	r2, r3, #15
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	601a      	str	r2, [r3, #0]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40023c00 	.word	0x40023c00

08001e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e041      	b.n	8001f2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f839 	bl	8001f36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f000 f9c0 	bl	800225c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d001      	beq.n	8001f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e04e      	b.n	8002002 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a23      	ldr	r2, [pc, #140]	; (8002010 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d022      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8e:	d01d      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d018      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	; (8002018 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1c      	ldr	r2, [pc, #112]	; (800201c <HAL_TIM_Base_Start_IT+0xd0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00e      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1b      	ldr	r2, [pc, #108]	; (8002020 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a19      	ldr	r2, [pc, #100]	; (8002024 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d004      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x80>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a18      	ldr	r2, [pc, #96]	; (8002028 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d111      	bne.n	8001ff0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d010      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fee:	e007      	b.n	8002000 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40010000 	.word	0x40010000
 8002014:	40000400 	.word	0x40000400
 8002018:	40000800 	.word	0x40000800
 800201c:	40000c00 	.word	0x40000c00
 8002020:	40010400 	.word	0x40010400
 8002024:	40014000 	.word	0x40014000
 8002028:	40001800 	.word	0x40001800

0800202c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d020      	beq.n	8002090 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01b      	beq.n	8002090 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0202 	mvn.w	r2, #2
 8002060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8d2 	bl	8002220 <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8c4 	bl	800220c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f8d5 	bl	8002234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d020      	beq.n	80020dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01b      	beq.n	80020dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0204 	mvn.w	r2, #4
 80020ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2202      	movs	r2, #2
 80020b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8ac 	bl	8002220 <HAL_TIM_IC_CaptureCallback>
 80020c8:	e005      	b.n	80020d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f89e 	bl	800220c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f8af 	bl	8002234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d020      	beq.n	8002128 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01b      	beq.n	8002128 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0208 	mvn.w	r2, #8
 80020f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2204      	movs	r2, #4
 80020fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f886 	bl	8002220 <HAL_TIM_IC_CaptureCallback>
 8002114:	e005      	b.n	8002122 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f878 	bl	800220c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f889 	bl	8002234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b00      	cmp	r3, #0
 8002130:	d020      	beq.n	8002174 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01b      	beq.n	8002174 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0210 	mvn.w	r2, #16
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2208      	movs	r2, #8
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f860 	bl	8002220 <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f852 	bl	800220c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f863 	bl	8002234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00c      	beq.n	8002198 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0201 	mvn.w	r2, #1
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fdc8 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f906 	bl	80023c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00c      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f834 	bl	8002248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00c      	beq.n	8002204 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d007      	beq.n	8002204 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0220 	mvn.w	r2, #32
 80021fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f8d8 	bl	80023b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a46      	ldr	r2, [pc, #280]	; (8002388 <TIM_Base_SetConfig+0x12c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d013      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227a:	d00f      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a43      	ldr	r2, [pc, #268]	; (800238c <TIM_Base_SetConfig+0x130>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00b      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a42      	ldr	r2, [pc, #264]	; (8002390 <TIM_Base_SetConfig+0x134>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d007      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a41      	ldr	r2, [pc, #260]	; (8002394 <TIM_Base_SetConfig+0x138>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d003      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a40      	ldr	r2, [pc, #256]	; (8002398 <TIM_Base_SetConfig+0x13c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d108      	bne.n	80022ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a35      	ldr	r2, [pc, #212]	; (8002388 <TIM_Base_SetConfig+0x12c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d02b      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022bc:	d027      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a32      	ldr	r2, [pc, #200]	; (800238c <TIM_Base_SetConfig+0x130>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d023      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a31      	ldr	r2, [pc, #196]	; (8002390 <TIM_Base_SetConfig+0x134>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01f      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a30      	ldr	r2, [pc, #192]	; (8002394 <TIM_Base_SetConfig+0x138>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01b      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a2f      	ldr	r2, [pc, #188]	; (8002398 <TIM_Base_SetConfig+0x13c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d017      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a2e      	ldr	r2, [pc, #184]	; (800239c <TIM_Base_SetConfig+0x140>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a2d      	ldr	r2, [pc, #180]	; (80023a0 <TIM_Base_SetConfig+0x144>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00f      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <TIM_Base_SetConfig+0x148>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00b      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a2b      	ldr	r2, [pc, #172]	; (80023a8 <TIM_Base_SetConfig+0x14c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d007      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a2a      	ldr	r2, [pc, #168]	; (80023ac <TIM_Base_SetConfig+0x150>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d003      	beq.n	800230e <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a29      	ldr	r2, [pc, #164]	; (80023b0 <TIM_Base_SetConfig+0x154>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d108      	bne.n	8002320 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <TIM_Base_SetConfig+0x12c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d003      	beq.n	8002354 <TIM_Base_SetConfig+0xf8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <TIM_Base_SetConfig+0x13c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d103      	bne.n	800235c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b01      	cmp	r3, #1
 800236c:	d105      	bne.n	800237a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f023 0201 	bic.w	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	611a      	str	r2, [r3, #16]
  }
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40010000 	.word	0x40010000
 800238c:	40000400 	.word	0x40000400
 8002390:	40000800 	.word	0x40000800
 8002394:	40000c00 	.word	0x40000c00
 8002398:	40010400 	.word	0x40010400
 800239c:	40014000 	.word	0x40014000
 80023a0:	40014400 	.word	0x40014400
 80023a4:	40014800 	.word	0x40014800
 80023a8:	40001800 	.word	0x40001800
 80023ac:	40001c00 	.word	0x40001c00
 80023b0:	40002000 	.word	0x40002000

080023b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f103 0208 	add.w	r2, r3, #8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f04f 32ff 	mov.w	r2, #4294967295
 80023f4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f103 0208 	add.w	r2, r3, #8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f103 0208 	add.w	r2, r3, #8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6892      	ldr	r2, [r2, #8]
 800244c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6852      	ldr	r2, [r2, #4]
 8002456:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	429a      	cmp	r2, r3
 8002460:	d103      	bne.n	800246a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800248a:	b580      	push	{r7, lr}
 800248c:	b08c      	sub	sp, #48	; 0x30
 800248e:	af04      	add	r7, sp, #16
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	4613      	mov	r3, r2
 8002498:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 ffc4 	bl	800342c <pvPortMalloc>
 80024a4:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80024ac:	2058      	movs	r0, #88	; 0x58
 80024ae:	f000 ffbd 	bl	800342c <pvPortMalloc>
 80024b2:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80024ba:	2258      	movs	r2, #88	; 0x58
 80024bc:	2100      	movs	r1, #0
 80024be:	69f8      	ldr	r0, [r7, #28]
 80024c0:	f003 fd06 	bl	8005ed0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
 80024ca:	e005      	b.n	80024d8 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80024cc:	6978      	ldr	r0, [r7, #20]
 80024ce:	f001 f867 	bl	80035a0 <vPortFree>
 80024d2:	e001      	b.n	80024d8 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d013      	beq.n	8002506 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024de:	88fa      	ldrh	r2, [r7, #6]
 80024e0:	2300      	movs	r3, #0
 80024e2:	9303      	str	r3, [sp, #12]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	9302      	str	r3, [sp, #8]
 80024e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68b9      	ldr	r1, [r7, #8]
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f80e 	bl	8002516 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80024fa:	69f8      	ldr	r0, [r7, #28]
 80024fc:	f000 f89a 	bl	8002634 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002500:	2301      	movs	r3, #1
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	e002      	b.n	800250c <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800250c:	69bb      	ldr	r3, [r7, #24]
    }
 800250e:	4618      	mov	r0, r3
 8002510:	3720      	adds	r7, #32
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b088      	sub	sp, #32
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	461a      	mov	r2, r3
 800252e:	21a5      	movs	r1, #165	; 0xa5
 8002530:	f003 fcce 	bl	8005ed0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800253e:	3b01      	subs	r3, #1
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f023 0307 	bic.w	r3, r3, #7
 800254c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	617b      	str	r3, [r7, #20]
    }
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01e      	beq.n	80025b2 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
 8002578:	e012      	b.n	80025a0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	4413      	add	r3, r2
 8002580:	7819      	ldrb	r1, [r3, #0]
 8002582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	4413      	add	r3, r2
 8002588:	3334      	adds	r3, #52	; 0x34
 800258a:	460a      	mov	r2, r1
 800258c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	4413      	add	r3, r2
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d006      	beq.n	80025a8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b09      	cmp	r3, #9
 80025a4:	d9e9      	bls.n	800257a <prvInitialiseNewTask+0x64>
 80025a6:	e000      	b.n	80025aa <prvInitialiseNewTask+0x94>
            {
                break;
 80025a8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d90a      	bls.n	80025ce <prvInitialiseNewTask+0xb8>
        __asm volatile
 80025b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	613b      	str	r3, [r7, #16]
    }
 80025ca:	bf00      	nop
 80025cc:	e7fe      	b.n	80025cc <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d901      	bls.n	80025d8 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025d4:	2304      	movs	r3, #4
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e2:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	3304      	adds	r3, #4
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff17 	bl	800241c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	3318      	adds	r3, #24
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff12 	bl	800241c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025fc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	f1c3 0205 	rsb	r2, r3, #5
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800260c:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	68f9      	ldr	r1, [r7, #12]
 8002612:	69b8      	ldr	r0, [r7, #24]
 8002614:	f000 fc30 	bl	8002e78 <pxPortInitialiseStack>
 8002618:	4602      	mov	r2, r0
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002628:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800262a:	bf00      	nop
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002634:	b5b0      	push	{r4, r5, r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af02      	add	r7, sp, #8
 800263a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800263c:	f000 fdca 	bl	80031d4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002640:	4b49      	ldr	r3, [pc, #292]	; (8002768 <prvAddNewTaskToReadyList+0x134>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	4a48      	ldr	r2, [pc, #288]	; (8002768 <prvAddNewTaskToReadyList+0x134>)
 8002648:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800264a:	4b48      	ldr	r3, [pc, #288]	; (800276c <prvAddNewTaskToReadyList+0x138>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002652:	4a46      	ldr	r2, [pc, #280]	; (800276c <prvAddNewTaskToReadyList+0x138>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002658:	4b43      	ldr	r3, [pc, #268]	; (8002768 <prvAddNewTaskToReadyList+0x134>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d110      	bne.n	8002682 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002660:	f000 fb70 	bl	8002d44 <prvInitialiseTaskLists>
 8002664:	e00d      	b.n	8002682 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002666:	4b42      	ldr	r3, [pc, #264]	; (8002770 <prvAddNewTaskToReadyList+0x13c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800266e:	4b3f      	ldr	r3, [pc, #252]	; (800276c <prvAddNewTaskToReadyList+0x138>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	429a      	cmp	r2, r3
 800267a:	d802      	bhi.n	8002682 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800267c:	4a3b      	ldr	r2, [pc, #236]	; (800276c <prvAddNewTaskToReadyList+0x138>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002682:	4b3c      	ldr	r3, [pc, #240]	; (8002774 <prvAddNewTaskToReadyList+0x140>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <prvAddNewTaskToReadyList+0x140>)
 800268a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800268c:	4b39      	ldr	r3, [pc, #228]	; (8002774 <prvAddNewTaskToReadyList+0x140>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <prvAddNewTaskToReadyList+0x94>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4618      	mov	r0, r3
 800269e:	f003 f989 	bl	80059b4 <SEGGER_SYSVIEW_OnTaskCreate>
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	461d      	mov	r5, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461c      	mov	r4, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	1ae3      	subs	r3, r4, r3
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	462b      	mov	r3, r5
 80026c4:	f001 f92e 	bl	8003924 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 f9f6 	bl	8005abc <SEGGER_SYSVIEW_OnTaskStartReady>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	2201      	movs	r2, #1
 80026d6:	409a      	lsls	r2, r3
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <prvAddNewTaskToReadyList+0x144>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4313      	orrs	r3, r2
 80026de:	4a26      	ldr	r2, [pc, #152]	; (8002778 <prvAddNewTaskToReadyList+0x144>)
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e6:	4925      	ldr	r1, [pc, #148]	; (800277c <prvAddNewTaskToReadyList+0x148>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	3304      	adds	r3, #4
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	3204      	adds	r2, #4
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	1d1a      	adds	r2, r3, #4
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4a15      	ldr	r2, [pc, #84]	; (800277c <prvAddNewTaskToReadyList+0x148>)
 8002726:	441a      	add	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	615a      	str	r2, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002730:	4912      	ldr	r1, [pc, #72]	; (800277c <prvAddNewTaskToReadyList+0x148>)
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	1c59      	adds	r1, r3, #1
 8002740:	480e      	ldr	r0, [pc, #56]	; (800277c <prvAddNewTaskToReadyList+0x148>)
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4403      	add	r3, r0
 800274c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800274e:	f000 fd71 	bl	8003234 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <prvAddNewTaskToReadyList+0x13c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <prvAddNewTaskToReadyList+0x138>)
 800275c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bdb0      	pop	{r4, r5, r7, pc}
 8002766:	bf00      	nop
 8002768:	200001ac 	.word	0x200001ac
 800276c:	200000d4 	.word	0x200000d4
 8002770:	200001b8 	.word	0x200001b8
 8002774:	200001c8 	.word	0x200001c8
 8002778:	200001b4 	.word	0x200001b4
 800277c:	200000d8 	.word	0x200000d8

08002780 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <vTaskStartScheduler+0x98>)
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	2300      	movs	r3, #0
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	2300      	movs	r3, #0
 8002790:	2282      	movs	r2, #130	; 0x82
 8002792:	4922      	ldr	r1, [pc, #136]	; (800281c <vTaskStartScheduler+0x9c>)
 8002794:	4822      	ldr	r0, [pc, #136]	; (8002820 <vTaskStartScheduler+0xa0>)
 8002796:	f7ff fe78 	bl	800248a <xTaskCreate>
 800279a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d124      	bne.n	80027ec <vTaskStartScheduler+0x6c>
        __asm volatile
 80027a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	60bb      	str	r3, [r7, #8]
    }
 80027b4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <vTaskStartScheduler+0xa4>)
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <vTaskStartScheduler+0xa8>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <vTaskStartScheduler+0xac>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <vTaskStartScheduler+0xb0>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <vTaskStartScheduler+0x98>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d102      	bne.n	80027dc <vTaskStartScheduler+0x5c>
 80027d6:	f003 f8d1 	bl	800597c <SEGGER_SYSVIEW_OnIdle>
 80027da:	e004      	b.n	80027e6 <vTaskStartScheduler+0x66>
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <vTaskStartScheduler+0xb0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 f929 	bl	8005a38 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80027e6:	f000 fbd5 	bl	8002f94 <xPortStartScheduler>
 80027ea:	e00e      	b.n	800280a <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f2:	d10a      	bne.n	800280a <vTaskStartScheduler+0x8a>
        __asm volatile
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	607b      	str	r3, [r7, #4]
    }
 8002806:	bf00      	nop
 8002808:	e7fe      	b.n	8002808 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <vTaskStartScheduler+0xb4>)
 800280c:	681b      	ldr	r3, [r3, #0]
}
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200001d0 	.word	0x200001d0
 800281c:	08006844 	.word	0x08006844
 8002820:	08002d21 	.word	0x08002d21
 8002824:	200001cc 	.word	0x200001cc
 8002828:	200001b8 	.word	0x200001b8
 800282c:	200001b0 	.word	0x200001b0
 8002830:	200000d4 	.word	0x200000d4
 8002834:	2000000c 	.word	0x2000000c

08002838 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <vTaskSuspendAll+0x18>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3301      	adds	r3, #1
 8002842:	4a03      	ldr	r2, [pc, #12]	; (8002850 <vTaskSuspendAll+0x18>)
 8002844:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	200001d4 	.word	0x200001d4

08002854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002862:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <xTaskResumeAll+0x1c4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <xTaskResumeAll+0x2c>
        __asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	607b      	str	r3, [r7, #4]
    }
 800287c:	bf00      	nop
 800287e:	e7fe      	b.n	800287e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002880:	f000 fca8 	bl	80031d4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002884:	4b64      	ldr	r3, [pc, #400]	; (8002a18 <xTaskResumeAll+0x1c4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3b01      	subs	r3, #1
 800288a:	4a63      	ldr	r2, [pc, #396]	; (8002a18 <xTaskResumeAll+0x1c4>)
 800288c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800288e:	4b62      	ldr	r3, [pc, #392]	; (8002a18 <xTaskResumeAll+0x1c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 80b8 	bne.w	8002a08 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002898:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <xTaskResumeAll+0x1c8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80b3 	beq.w	8002a08 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028a2:	e08e      	b.n	80029c2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028a4:	4b5e      	ldr	r3, [pc, #376]	; (8002a20 <xTaskResumeAll+0x1cc>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	6a12      	ldr	r2, [r2, #32]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	69d2      	ldr	r2, [r2, #28]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3318      	adds	r3, #24
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d103      	bne.n	80028da <xTaskResumeAll+0x86>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	6a1a      	ldr	r2, [r3, #32]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	2200      	movs	r2, #0
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	1e5a      	subs	r2, r3, #1
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	68d2      	ldr	r2, [r2, #12]
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	6892      	ldr	r2, [r2, #8]
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	3304      	adds	r3, #4
 800290c:	429a      	cmp	r2, r3
 800290e:	d103      	bne.n	8002918 <xTaskResumeAll+0xc4>
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	2200      	movs	r2, #0
 800291c:	615a      	str	r2, [r3, #20]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	1e5a      	subs	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4618      	mov	r0, r3
 800292c:	f003 f8c6 	bl	8005abc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	2201      	movs	r2, #1
 8002936:	409a      	lsls	r2, r3
 8002938:	4b3a      	ldr	r3, [pc, #232]	; (8002a24 <xTaskResumeAll+0x1d0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4313      	orrs	r3, r2
 800293e:	4a39      	ldr	r2, [pc, #228]	; (8002a24 <xTaskResumeAll+0x1d0>)
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002946:	4938      	ldr	r1, [pc, #224]	; (8002a28 <xTaskResumeAll+0x1d4>)
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3304      	adds	r3, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	3204      	adds	r2, #4
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	1d1a      	adds	r2, r3, #4
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4a28      	ldr	r2, [pc, #160]	; (8002a28 <xTaskResumeAll+0x1d4>)
 8002986:	441a      	add	r2, r3
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	615a      	str	r2, [r3, #20]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002990:	4925      	ldr	r1, [pc, #148]	; (8002a28 <xTaskResumeAll+0x1d4>)
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	1c59      	adds	r1, r3, #1
 80029a0:	4821      	ldr	r0, [pc, #132]	; (8002a28 <xTaskResumeAll+0x1d4>)
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4403      	add	r3, r0
 80029ac:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <xTaskResumeAll+0x1d8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d302      	bcc.n	80029c2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <xTaskResumeAll+0x1dc>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029c2:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <xTaskResumeAll+0x1cc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f47f af6c 	bne.w	80028a4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80029d2:	f000 fa35 	bl	8002e40 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029d6:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <xTaskResumeAll+0x1e0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d010      	beq.n	8002a04 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80029e2:	f000 f83b 	bl	8002a5c <xTaskIncrementTick>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80029ec:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <xTaskResumeAll+0x1dc>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f1      	bne.n	80029e2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <xTaskResumeAll+0x1e0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <xTaskResumeAll+0x1dc>)
 8002a06:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002a08:	f000 fc14 	bl	8003234 <vPortExitCritical>

    return xAlreadyYielded;
 8002a0c:	697b      	ldr	r3, [r7, #20]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	200001d4 	.word	0x200001d4
 8002a1c:	200001ac 	.word	0x200001ac
 8002a20:	2000016c 	.word	0x2000016c
 8002a24:	200001b4 	.word	0x200001b4
 8002a28:	200000d8 	.word	0x200000d8
 8002a2c:	200000d4 	.word	0x200000d4
 8002a30:	200001c0 	.word	0x200001c0
 8002a34:	200001bc 	.word	0x200001bc

08002a38 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a3e:	f000 fcb5 	bl	80033ac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <xTaskGetTickCountFromISR+0x20>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a4c:	683b      	ldr	r3, [r7, #0]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200001b0 	.word	0x200001b0

08002a5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	; 0x28
 8002a60:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a66:	4b70      	ldr	r3, [pc, #448]	; (8002c28 <xTaskIncrementTick+0x1cc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f040 80d1 	bne.w	8002c12 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a70:	4b6e      	ldr	r3, [pc, #440]	; (8002c2c <xTaskIncrementTick+0x1d0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a78:	4a6c      	ldr	r2, [pc, #432]	; (8002c2c <xTaskIncrementTick+0x1d0>)
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d120      	bne.n	8002ac6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a84:	4b6a      	ldr	r3, [pc, #424]	; (8002c30 <xTaskIncrementTick+0x1d4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <xTaskIncrementTick+0x48>
        __asm volatile
 8002a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a92:	f383 8811 	msr	BASEPRI, r3
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	607b      	str	r3, [r7, #4]
    }
 8002aa0:	bf00      	nop
 8002aa2:	e7fe      	b.n	8002aa2 <xTaskIncrementTick+0x46>
 8002aa4:	4b62      	ldr	r3, [pc, #392]	; (8002c30 <xTaskIncrementTick+0x1d4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	4b62      	ldr	r3, [pc, #392]	; (8002c34 <xTaskIncrementTick+0x1d8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a60      	ldr	r2, [pc, #384]	; (8002c30 <xTaskIncrementTick+0x1d4>)
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4a60      	ldr	r2, [pc, #384]	; (8002c34 <xTaskIncrementTick+0x1d8>)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <xTaskIncrementTick+0x1dc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	4a5e      	ldr	r2, [pc, #376]	; (8002c38 <xTaskIncrementTick+0x1dc>)
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	f000 f9bd 	bl	8002e40 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ac6:	4b5d      	ldr	r3, [pc, #372]	; (8002c3c <xTaskIncrementTick+0x1e0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6a3a      	ldr	r2, [r7, #32]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	f0c0 80a5 	bcc.w	8002c1c <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ad2:	4b57      	ldr	r3, [pc, #348]	; (8002c30 <xTaskIncrementTick+0x1d4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002adc:	4b57      	ldr	r3, [pc, #348]	; (8002c3c <xTaskIncrementTick+0x1e0>)
 8002ade:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae2:	601a      	str	r2, [r3, #0]
                    break;
 8002ae4:	e09a      	b.n	8002c1c <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ae6:	4b52      	ldr	r3, [pc, #328]	; (8002c30 <xTaskIncrementTick+0x1d4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002af6:	6a3a      	ldr	r2, [r7, #32]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d203      	bcs.n	8002b06 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002afe:	4a4f      	ldr	r2, [pc, #316]	; (8002c3c <xTaskIncrementTick+0x1e0>)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002b04:	e08a      	b.n	8002c1c <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	68d2      	ldr	r2, [r2, #12]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	6892      	ldr	r2, [r2, #8]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	3304      	adds	r3, #4
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d103      	bne.n	8002b34 <xTaskIncrementTick+0xd8>
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2200      	movs	r2, #0
 8002b38:	615a      	str	r2, [r3, #20]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	1e5a      	subs	r2, r3, #1
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01e      	beq.n	8002b8a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	6a12      	ldr	r2, [r2, #32]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	69d2      	ldr	r2, [r2, #28]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	3318      	adds	r3, #24
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d103      	bne.n	8002b7a <xTaskIncrementTick+0x11e>
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	6a1a      	ldr	r2, [r3, #32]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	1e5a      	subs	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f002 ff95 	bl	8005abc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	2201      	movs	r2, #1
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <xTaskIncrementTick+0x1e4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <xTaskIncrementTick+0x1e4>)
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba8:	4926      	ldr	r1, [pc, #152]	; (8002c44 <xTaskIncrementTick+0x1e8>)
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	60da      	str	r2, [r3, #12]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	3204      	adds	r2, #4
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1d1a      	adds	r2, r3, #4
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <xTaskIncrementTick+0x1e8>)
 8002be8:	441a      	add	r2, r3
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	615a      	str	r2, [r3, #20]
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf2:	4914      	ldr	r1, [pc, #80]	; (8002c44 <xTaskIncrementTick+0x1e8>)
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	1c59      	adds	r1, r3, #1
 8002c02:	4810      	ldr	r0, [pc, #64]	; (8002c44 <xTaskIncrementTick+0x1e8>)
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4403      	add	r3, r0
 8002c0e:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c10:	e75f      	b.n	8002ad2 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <xTaskIncrementTick+0x1ec>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <xTaskIncrementTick+0x1ec>)
 8002c1a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3728      	adds	r7, #40	; 0x28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200001d4 	.word	0x200001d4
 8002c2c:	200001b0 	.word	0x200001b0
 8002c30:	20000164 	.word	0x20000164
 8002c34:	20000168 	.word	0x20000168
 8002c38:	200001c4 	.word	0x200001c4
 8002c3c:	200001cc 	.word	0x200001cc
 8002c40:	200001b4 	.word	0x200001b4
 8002c44:	200000d8 	.word	0x200000d8
 8002c48:	200001bc 	.word	0x200001bc

08002c4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c52:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <vTaskSwitchContext+0xbc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002c5a:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <vTaskSwitchContext+0xc0>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002c60:	e04d      	b.n	8002cfe <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002c62:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <vTaskSwitchContext+0xc0>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c68:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <vTaskSwitchContext+0xc4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002c76:	7afb      	ldrb	r3, [r7, #11]
 8002c78:	f1c3 031f 	rsb	r3, r3, #31
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	4925      	ldr	r1, [pc, #148]	; (8002d14 <vTaskSwitchContext+0xc8>)
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10a      	bne.n	8002ca8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c96:	f383 8811 	msr	BASEPRI, r3
 8002c9a:	f3bf 8f6f 	isb	sy
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	607b      	str	r3, [r7, #4]
    }
 8002ca4:	bf00      	nop
 8002ca6:	e7fe      	b.n	8002ca6 <vTaskSwitchContext+0x5a>
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <vTaskSwitchContext+0xc8>)
 8002cb4:	4413      	add	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	3308      	adds	r3, #8
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d104      	bne.n	8002cd8 <vTaskSwitchContext+0x8c>
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <vTaskSwitchContext+0xcc>)
 8002ce0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <vTaskSwitchContext+0xcc>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <vTaskSwitchContext+0xd0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d102      	bne.n	8002cf4 <vTaskSwitchContext+0xa8>
 8002cee:	f002 fe45 	bl	800597c <SEGGER_SYSVIEW_OnIdle>
}
 8002cf2:	e004      	b.n	8002cfe <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <vTaskSwitchContext+0xcc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f002 fe9d 	bl	8005a38 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002cfe:	bf00      	nop
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200001d4 	.word	0x200001d4
 8002d0c:	200001c0 	.word	0x200001c0
 8002d10:	200001b4 	.word	0x200001b4
 8002d14:	200000d8 	.word	0x200000d8
 8002d18:	200000d4 	.word	0x200000d4
 8002d1c:	200001d0 	.word	0x200001d0

08002d20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002d28:	f000 f84c 	bl	8002dc4 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <prvIdleTask+0x20>)
 8002d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002d3c:	e7f4      	b.n	8002d28 <prvIdleTask+0x8>
 8002d3e:	bf00      	nop
 8002d40:	e000ed04 	.word	0xe000ed04

08002d44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	e00c      	b.n	8002d6a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <prvInitialiseTaskLists+0x60>)
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fb3c 	bl	80023dc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3301      	adds	r3, #1
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d9ef      	bls.n	8002d50 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002d70:	480d      	ldr	r0, [pc, #52]	; (8002da8 <prvInitialiseTaskLists+0x64>)
 8002d72:	f7ff fb33 	bl	80023dc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d76:	480d      	ldr	r0, [pc, #52]	; (8002dac <prvInitialiseTaskLists+0x68>)
 8002d78:	f7ff fb30 	bl	80023dc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d7c:	480c      	ldr	r0, [pc, #48]	; (8002db0 <prvInitialiseTaskLists+0x6c>)
 8002d7e:	f7ff fb2d 	bl	80023dc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002d82:	480c      	ldr	r0, [pc, #48]	; (8002db4 <prvInitialiseTaskLists+0x70>)
 8002d84:	f7ff fb2a 	bl	80023dc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002d88:	480b      	ldr	r0, [pc, #44]	; (8002db8 <prvInitialiseTaskLists+0x74>)
 8002d8a:	f7ff fb27 	bl	80023dc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <prvInitialiseTaskLists+0x78>)
 8002d90:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <prvInitialiseTaskLists+0x64>)
 8002d92:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <prvInitialiseTaskLists+0x7c>)
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <prvInitialiseTaskLists+0x68>)
 8002d98:	601a      	str	r2, [r3, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200000d8 	.word	0x200000d8
 8002da8:	2000013c 	.word	0x2000013c
 8002dac:	20000150 	.word	0x20000150
 8002db0:	2000016c 	.word	0x2000016c
 8002db4:	20000180 	.word	0x20000180
 8002db8:	20000198 	.word	0x20000198
 8002dbc:	20000164 	.word	0x20000164
 8002dc0:	20000168 	.word	0x20000168

08002dc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002dca:	e019      	b.n	8002e00 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002dcc:	f000 fa02 	bl	80031d4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dd0:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <prvCheckTasksWaitingTermination+0x50>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fb2a 	bl	8002436 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <prvCheckTasksWaitingTermination+0x54>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <prvCheckTasksWaitingTermination+0x54>)
 8002dea:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <prvCheckTasksWaitingTermination+0x58>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <prvCheckTasksWaitingTermination+0x58>)
 8002df4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002df6:	f000 fa1d 	bl	8003234 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f810 	bl	8002e20 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <prvCheckTasksWaitingTermination+0x58>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e1      	bne.n	8002dcc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000180 	.word	0x20000180
 8002e18:	200001ac 	.word	0x200001ac
 8002e1c:	20000194 	.word	0x20000194

08002e20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fbb7 	bl	80035a0 <vPortFree>
            vPortFree( pxTCB );
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fbb4 	bl	80035a0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <prvResetNextTaskUnblockTime+0x30>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <prvResetNextTaskUnblockTime+0x34>)
 8002e50:	f04f 32ff 	mov.w	r2, #4294967295
 8002e54:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002e56:	e005      	b.n	8002e64 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <prvResetNextTaskUnblockTime+0x30>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <prvResetNextTaskUnblockTime+0x34>)
 8002e62:	6013      	str	r3, [r2, #0]
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000164 	.word	0x20000164
 8002e74:	200001cc 	.word	0x200001cc

08002e78 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3b04      	subs	r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3b04      	subs	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f023 0201 	bic.w	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3b04      	subs	r3, #4
 8002ea6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002ea8:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <pxPortInitialiseStack+0x64>)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3b14      	subs	r3, #20
 8002eb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3b04      	subs	r3, #4
 8002ebe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f06f 0202 	mvn.w	r2, #2
 8002ec6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3b20      	subs	r3, #32
 8002ecc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	08002ee1 	.word	0x08002ee1

08002ee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <prvTaskExitError+0x54>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef2:	d00a      	beq.n	8002f0a <prvTaskExitError+0x2a>
        __asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	60fb      	str	r3, [r7, #12]
    }
 8002f06:	bf00      	nop
 8002f08:	e7fe      	b.n	8002f08 <prvTaskExitError+0x28>
        __asm volatile
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	60bb      	str	r3, [r7, #8]
    }
 8002f1c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002f1e:	bf00      	nop
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0fc      	beq.n	8002f20 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	20000010 	.word	0x20000010
	...

08002f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002f40:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <pxCurrentTCBConst2>)
 8002f42:	6819      	ldr	r1, [r3, #0]
 8002f44:	6808      	ldr	r0, [r1, #0]
 8002f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4a:	f380 8809 	msr	PSP, r0
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f380 8811 	msr	BASEPRI, r0
 8002f5a:	4770      	bx	lr
 8002f5c:	f3af 8000 	nop.w

08002f60 <pxCurrentTCBConst2>:
 8002f60:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop

08002f68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002f68:	4808      	ldr	r0, [pc, #32]	; (8002f8c <prvPortStartFirstTask+0x24>)
 8002f6a:	6800      	ldr	r0, [r0, #0]
 8002f6c:	6800      	ldr	r0, [r0, #0]
 8002f6e:	f380 8808 	msr	MSP, r0
 8002f72:	f04f 0000 	mov.w	r0, #0
 8002f76:	f380 8814 	msr	CONTROL, r0
 8002f7a:	b662      	cpsie	i
 8002f7c:	b661      	cpsie	f
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	df00      	svc	0
 8002f88:	bf00      	nop
 8002f8a:	0000      	.short	0x0000
 8002f8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop

08002f94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f9a:	4b46      	ldr	r3, [pc, #280]	; (80030b4 <xPortStartScheduler+0x120>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a46      	ldr	r2, [pc, #280]	; (80030b8 <xPortStartScheduler+0x124>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d10a      	bne.n	8002fba <xPortStartScheduler+0x26>
        __asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	613b      	str	r3, [r7, #16]
    }
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002fba:	4b3e      	ldr	r3, [pc, #248]	; (80030b4 <xPortStartScheduler+0x120>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a3f      	ldr	r2, [pc, #252]	; (80030bc <xPortStartScheduler+0x128>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d10a      	bne.n	8002fda <xPortStartScheduler+0x46>
        __asm volatile
 8002fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc8:	f383 8811 	msr	BASEPRI, r3
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	60fb      	str	r3, [r7, #12]
    }
 8002fd6:	bf00      	nop
 8002fd8:	e7fe      	b.n	8002fd8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002fda:	4b39      	ldr	r3, [pc, #228]	; (80030c0 <xPortStartScheduler+0x12c>)
 8002fdc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	22ff      	movs	r2, #255	; 0xff
 8002fea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <xPortStartScheduler+0x130>)
 8003000:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003002:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <xPortStartScheduler+0x134>)
 8003004:	2207      	movs	r2, #7
 8003006:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003008:	e009      	b.n	800301e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800300a:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <xPortStartScheduler+0x134>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3b01      	subs	r3, #1
 8003010:	4a2d      	ldr	r2, [pc, #180]	; (80030c8 <xPortStartScheduler+0x134>)
 8003012:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d0ef      	beq.n	800300a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800302a:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <xPortStartScheduler+0x134>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f1c3 0307 	rsb	r3, r3, #7
 8003032:	2b04      	cmp	r3, #4
 8003034:	d00a      	beq.n	800304c <xPortStartScheduler+0xb8>
        __asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	60bb      	str	r3, [r7, #8]
    }
 8003048:	bf00      	nop
 800304a:	e7fe      	b.n	800304a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800304c:	4b1e      	ldr	r3, [pc, #120]	; (80030c8 <xPortStartScheduler+0x134>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <xPortStartScheduler+0x134>)
 8003054:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003056:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <xPortStartScheduler+0x134>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800305e:	4a1a      	ldr	r2, [pc, #104]	; (80030c8 <xPortStartScheduler+0x134>)
 8003060:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800306a:	4b18      	ldr	r3, [pc, #96]	; (80030cc <xPortStartScheduler+0x138>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a17      	ldr	r2, [pc, #92]	; (80030cc <xPortStartScheduler+0x138>)
 8003070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003074:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <xPortStartScheduler+0x138>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a14      	ldr	r2, [pc, #80]	; (80030cc <xPortStartScheduler+0x138>)
 800307c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003080:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003082:	f000 f963 	bl	800334c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <xPortStartScheduler+0x13c>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800308c:	f000 f982 	bl	8003394 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003090:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <xPortStartScheduler+0x140>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0f      	ldr	r2, [pc, #60]	; (80030d4 <xPortStartScheduler+0x140>)
 8003096:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800309a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800309c:	f7ff ff64 	bl	8002f68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80030a0:	f7ff fdd4 	bl	8002c4c <vTaskSwitchContext>
    prvTaskExitError();
 80030a4:	f7ff ff1c 	bl	8002ee0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	e000ed00 	.word	0xe000ed00
 80030b8:	410fc271 	.word	0x410fc271
 80030bc:	410fc270 	.word	0x410fc270
 80030c0:	e000e400 	.word	0xe000e400
 80030c4:	200001d8 	.word	0x200001d8
 80030c8:	200001dc 	.word	0x200001dc
 80030cc:	e000ed20 	.word	0xe000ed20
 80030d0:	20000010 	.word	0x20000010
 80030d4:	e000ef34 	.word	0xe000ef34

080030d8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80030de:	4b37      	ldr	r3, [pc, #220]	; (80031bc <vInitPrioGroupValue+0xe4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a37      	ldr	r2, [pc, #220]	; (80031c0 <vInitPrioGroupValue+0xe8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10a      	bne.n	80030fe <vInitPrioGroupValue+0x26>
        __asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	613b      	str	r3, [r7, #16]
    }
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80030fe:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <vInitPrioGroupValue+0xe4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a30      	ldr	r2, [pc, #192]	; (80031c4 <vInitPrioGroupValue+0xec>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d10a      	bne.n	800311e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	60fb      	str	r3, [r7, #12]
    }
 800311a:	bf00      	nop
 800311c:	e7fe      	b.n	800311c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800311e:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <vInitPrioGroupValue+0xf0>)
 8003120:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	22ff      	movs	r2, #255	; 0xff
 800312e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <vInitPrioGroupValue+0xf4>)
 8003144:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003146:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <vInitPrioGroupValue+0xf8>)
 8003148:	2207      	movs	r2, #7
 800314a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800314c:	e009      	b.n	8003162 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <vInitPrioGroupValue+0xf8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3b01      	subs	r3, #1
 8003154:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <vInitPrioGroupValue+0xf8>)
 8003156:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	b2db      	uxtb	r3, r3
 8003160:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316a:	2b80      	cmp	r3, #128	; 0x80
 800316c:	d0ef      	beq.n	800314e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800316e:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <vInitPrioGroupValue+0xf8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f1c3 0307 	rsb	r3, r3, #7
 8003176:	2b04      	cmp	r3, #4
 8003178:	d00a      	beq.n	8003190 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	60bb      	str	r3, [r7, #8]
    }
 800318c:	bf00      	nop
 800318e:	e7fe      	b.n	800318e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003190:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <vInitPrioGroupValue+0xf8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	4a0e      	ldr	r2, [pc, #56]	; (80031d0 <vInitPrioGroupValue+0xf8>)
 8003198:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <vInitPrioGroupValue+0xf8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031a2:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <vInitPrioGroupValue+0xf8>)
 80031a4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	e000ed00 	.word	0xe000ed00
 80031c0:	410fc271 	.word	0x410fc271
 80031c4:	410fc270 	.word	0x410fc270
 80031c8:	e000e400 	.word	0xe000e400
 80031cc:	200001d8 	.word	0x200001d8
 80031d0:	200001dc 	.word	0x200001dc

080031d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
        __asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	607b      	str	r3, [r7, #4]
    }
 80031ec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <vPortEnterCritical+0x58>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	4a0d      	ldr	r2, [pc, #52]	; (800322c <vPortEnterCritical+0x58>)
 80031f6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <vPortEnterCritical+0x58>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d10f      	bne.n	8003220 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <vPortEnterCritical+0x5c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <vPortEnterCritical+0x4c>
        __asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	603b      	str	r3, [r7, #0]
    }
 800321c:	bf00      	nop
 800321e:	e7fe      	b.n	800321e <vPortEnterCritical+0x4a>
    }
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	20000010 	.word	0x20000010
 8003230:	e000ed04 	.word	0xe000ed04

08003234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <vPortExitCritical+0x50>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10a      	bne.n	8003258 <vPortExitCritical+0x24>
        __asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	607b      	str	r3, [r7, #4]
    }
 8003254:	bf00      	nop
 8003256:	e7fe      	b.n	8003256 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <vPortExitCritical+0x50>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3b01      	subs	r3, #1
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <vPortExitCritical+0x50>)
 8003260:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <vPortExitCritical+0x50>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <vPortExitCritical+0x42>
 800326a:	2300      	movs	r3, #0
 800326c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003274:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000010 	.word	0x20000010
	...

08003290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003290:	f3ef 8009 	mrs	r0, PSP
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <pxCurrentTCBConst>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	f01e 0f10 	tst.w	lr, #16
 80032a0:	bf08      	it	eq
 80032a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80032a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032aa:	6010      	str	r0, [r2, #0]
 80032ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80032b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80032b4:	f380 8811 	msr	BASEPRI, r0
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f7ff fcc4 	bl	8002c4c <vTaskSwitchContext>
 80032c4:	f04f 0000 	mov.w	r0, #0
 80032c8:	f380 8811 	msr	BASEPRI, r0
 80032cc:	bc09      	pop	{r0, r3}
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	6808      	ldr	r0, [r1, #0]
 80032d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d6:	f01e 0f10 	tst.w	lr, #16
 80032da:	bf08      	it	eq
 80032dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032e0:	f380 8809 	msr	PSP, r0
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	f3af 8000 	nop.w

080032f0 <pxCurrentTCBConst>:
 80032f0:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop

080032f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
        __asm volatile
 80032fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	607b      	str	r3, [r7, #4]
    }
 8003310:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003312:	f002 fab9 	bl	8005888 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003316:	f7ff fba1 	bl	8002a5c <xTaskIncrementTick>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d006      	beq.n	800332e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003320:	f002 fb10 	bl	8005944 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <SysTick_Handler+0x50>)
 8003326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e001      	b.n	8003332 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800332e:	f002 faed 	bl	800590c <SEGGER_SYSVIEW_RecordExitISR>
 8003332:	2300      	movs	r3, #0
 8003334:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f383 8811 	msr	BASEPRI, r3
    }
 800333c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	e000ed04 	.word	0xe000ed04

0800334c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <vPortSetupTimerInterrupt+0x34>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <vPortSetupTimerInterrupt+0x38>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <vPortSetupTimerInterrupt+0x3c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0a      	ldr	r2, [pc, #40]	; (800338c <vPortSetupTimerInterrupt+0x40>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	4a09      	ldr	r2, [pc, #36]	; (8003390 <vPortSetupTimerInterrupt+0x44>)
 800336a:	3b01      	subs	r3, #1
 800336c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <vPortSetupTimerInterrupt+0x34>)
 8003370:	2207      	movs	r2, #7
 8003372:	601a      	str	r2, [r3, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000e010 	.word	0xe000e010
 8003384:	e000e018 	.word	0xe000e018
 8003388:	20000000 	.word	0x20000000
 800338c:	10624dd3 	.word	0x10624dd3
 8003390:	e000e014 	.word	0xe000e014

08003394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80033a4 <vPortEnableVFP+0x10>
 8003398:	6801      	ldr	r1, [r0, #0]
 800339a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800339e:	6001      	str	r1, [r0, #0]
 80033a0:	4770      	bx	lr
 80033a2:	0000      	.short	0x0000
 80033a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80033a8:	bf00      	nop
 80033aa:	bf00      	nop

080033ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80033b2:	f3ef 8305 	mrs	r3, IPSR
 80033b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	d914      	bls.n	80033e8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80033be:	4a17      	ldr	r2, [pc, #92]	; (800341c <vPortValidateInterruptPriority+0x70>)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80033c8:	4b15      	ldr	r3, [pc, #84]	; (8003420 <vPortValidateInterruptPriority+0x74>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	7afa      	ldrb	r2, [r7, #11]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d20a      	bcs.n	80033e8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	607b      	str	r3, [r7, #4]
    }
 80033e4:	bf00      	nop
 80033e6:	e7fe      	b.n	80033e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <vPortValidateInterruptPriority+0x78>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033f0:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <vPortValidateInterruptPriority+0x7c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d90a      	bls.n	800340e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	603b      	str	r3, [r7, #0]
    }
 800340a:	bf00      	nop
 800340c:	e7fe      	b.n	800340c <vPortValidateInterruptPriority+0x60>
    }
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000e3f0 	.word	0xe000e3f0
 8003420:	200001d8 	.word	0x200001d8
 8003424:	e000ed0c 	.word	0xe000ed0c
 8003428:	200001dc 	.word	0x200001dc

0800342c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	; 0x28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003438:	f7ff f9fe 	bl	8002838 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800343c:	4b53      	ldr	r3, [pc, #332]	; (800358c <pvPortMalloc+0x160>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003444:	f000 f908 	bl	8003658 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d012      	beq.n	8003474 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800344e:	2208      	movs	r2, #8
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	3308      	adds	r3, #8
 800345a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	43db      	mvns	r3, r3
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d804      	bhi.n	8003470 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	4413      	add	r3, r2
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	e001      	b.n	8003474 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	db70      	blt.n	800355c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d06d      	beq.n	800355c <pvPortMalloc+0x130>
 8003480:	4b43      	ldr	r3, [pc, #268]	; (8003590 <pvPortMalloc+0x164>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	429a      	cmp	r2, r3
 8003488:	d868      	bhi.n	800355c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800348a:	4b42      	ldr	r3, [pc, #264]	; (8003594 <pvPortMalloc+0x168>)
 800348c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800348e:	4b41      	ldr	r3, [pc, #260]	; (8003594 <pvPortMalloc+0x168>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003494:	e004      	b.n	80034a0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d903      	bls.n	80034b2 <pvPortMalloc+0x86>
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f1      	bne.n	8003496 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80034b2:	4b36      	ldr	r3, [pc, #216]	; (800358c <pvPortMalloc+0x160>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d04f      	beq.n	800355c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2208      	movs	r2, #8
 80034c2:	4413      	add	r3, r2
 80034c4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	1ad2      	subs	r2, r2, r3
 80034d6:	2308      	movs	r3, #8
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	429a      	cmp	r2, r3
 80034dc:	d91f      	bls.n	800351e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4413      	add	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <pvPortMalloc+0xda>
        __asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	613b      	str	r3, [r7, #16]
    }
 8003502:	bf00      	nop
 8003504:	e7fe      	b.n	8003504 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	1ad2      	subs	r2, r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003518:	6978      	ldr	r0, [r7, #20]
 800351a:	f000 f8f9 	bl	8003710 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800351e:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <pvPortMalloc+0x164>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	4a19      	ldr	r2, [pc, #100]	; (8003590 <pvPortMalloc+0x164>)
 800352a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800352c:	4b18      	ldr	r3, [pc, #96]	; (8003590 <pvPortMalloc+0x164>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <pvPortMalloc+0x16c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d203      	bcs.n	8003540 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003538:	4b15      	ldr	r3, [pc, #84]	; (8003590 <pvPortMalloc+0x164>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a16      	ldr	r2, [pc, #88]	; (8003598 <pvPortMalloc+0x16c>)
 800353e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <pvPortMalloc+0x170>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3301      	adds	r3, #1
 8003558:	4a10      	ldr	r2, [pc, #64]	; (800359c <pvPortMalloc+0x170>)
 800355a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800355c:	f7ff f97a 	bl	8002854 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <pvPortMalloc+0x154>
        __asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	60fb      	str	r3, [r7, #12]
    }
 800357c:	bf00      	nop
 800357e:	e7fe      	b.n	800357e <pvPortMalloc+0x152>
    return pvReturn;
 8003580:	69fb      	ldr	r3, [r7, #28]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3728      	adds	r7, #40	; 0x28
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20012de8 	.word	0x20012de8
 8003590:	20012dec 	.word	0x20012dec
 8003594:	20012de0 	.word	0x20012de0
 8003598:	20012df0 	.word	0x20012df0
 800359c:	20012df4 	.word	0x20012df4

080035a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d049      	beq.n	8003646 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80035b2:	2308      	movs	r3, #8
 80035b4:	425b      	negs	r3, r3
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4413      	add	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	db0a      	blt.n	80035de <vPortFree+0x3e>
        __asm volatile
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	60fb      	str	r3, [r7, #12]
    }
 80035da:	bf00      	nop
 80035dc:	e7fe      	b.n	80035dc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <vPortFree+0x5c>
        __asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	60bb      	str	r3, [r7, #8]
    }
 80035f8:	bf00      	nop
 80035fa:	e7fe      	b.n	80035fa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	0fdb      	lsrs	r3, r3, #31
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01c      	beq.n	8003646 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d118      	bne.n	8003646 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003620:	f7ff f90a 	bl	8002838 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	4b09      	ldr	r3, [pc, #36]	; (8003650 <vPortFree+0xb0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4413      	add	r3, r2
 800362e:	4a08      	ldr	r2, [pc, #32]	; (8003650 <vPortFree+0xb0>)
 8003630:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003632:	6938      	ldr	r0, [r7, #16]
 8003634:	f000 f86c 	bl	8003710 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <vPortFree+0xb4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3301      	adds	r3, #1
 800363e:	4a05      	ldr	r2, [pc, #20]	; (8003654 <vPortFree+0xb4>)
 8003640:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003642:	f7ff f907 	bl	8002854 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003646:	bf00      	nop
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20012dec 	.word	0x20012dec
 8003654:	20012df8 	.word	0x20012df8

08003658 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800365e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003662:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003664:	4b25      	ldr	r3, [pc, #148]	; (80036fc <prvHeapInit+0xa4>)
 8003666:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00c      	beq.n	800368c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3307      	adds	r3, #7
 8003676:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0307 	bic.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <prvHeapInit+0xa4>)
 8003688:	4413      	add	r3, r2
 800368a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003690:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <prvHeapInit+0xa8>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003696:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <prvHeapInit+0xa8>)
 8003698:	2200      	movs	r2, #0
 800369a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	4413      	add	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80036a4:	2208      	movs	r2, #8
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0307 	bic.w	r3, r3, #7
 80036b2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a13      	ldr	r2, [pc, #76]	; (8003704 <prvHeapInit+0xac>)
 80036b8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <prvHeapInit+0xac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <prvHeapInit+0xac>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	1ad2      	subs	r2, r2, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <prvHeapInit+0xac>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4a08      	ldr	r2, [pc, #32]	; (8003708 <prvHeapInit+0xb0>)
 80036e6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4a07      	ldr	r2, [pc, #28]	; (800370c <prvHeapInit+0xb4>)
 80036ee:	6013      	str	r3, [r2, #0]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	200001e0 	.word	0x200001e0
 8003700:	20012de0 	.word	0x20012de0
 8003704:	20012de8 	.word	0x20012de8
 8003708:	20012df0 	.word	0x20012df0
 800370c:	20012dec 	.word	0x20012dec

08003710 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003718:	4b28      	ldr	r3, [pc, #160]	; (80037bc <prvInsertBlockIntoFreeList+0xac>)
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e002      	b.n	8003724 <prvInsertBlockIntoFreeList+0x14>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d8f7      	bhi.n	800371e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	4413      	add	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	429a      	cmp	r2, r3
 800373e:	d108      	bne.n	8003752 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	441a      	add	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	441a      	add	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d118      	bne.n	8003798 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <prvInsertBlockIntoFreeList+0xb0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d00d      	beq.n	800378e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e008      	b.n	80037a0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800378e:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <prvInsertBlockIntoFreeList+0xb0>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e003      	b.n	80037a0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d002      	beq.n	80037ae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20012de0 	.word	0x20012de0
 80037c0:	20012de8 	.word	0x20012de8

080037c4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80037c8:	4803      	ldr	r0, [pc, #12]	; (80037d8 <_cbSendSystemDesc+0x14>)
 80037ca:	f002 f807 	bl	80057dc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80037ce:	4803      	ldr	r0, [pc, #12]	; (80037dc <_cbSendSystemDesc+0x18>)
 80037d0:	f002 f804 	bl	80057dc <SEGGER_SYSVIEW_SendSysDesc>
}
 80037d4:	bf00      	nop
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	0800684c 	.word	0x0800684c
 80037dc:	0800688c 	.word	0x0800688c

080037e0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <SEGGER_SYSVIEW_Conf+0x20>)
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <SEGGER_SYSVIEW_Conf+0x20>)
 80037ea:	6819      	ldr	r1, [r3, #0]
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <SEGGER_SYSVIEW_Conf+0x24>)
 80037ee:	4a06      	ldr	r2, [pc, #24]	; (8003808 <SEGGER_SYSVIEW_Conf+0x28>)
 80037f0:	f001 fc78 	bl	80050e4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80037f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80037f8:	f001 fcb8 	bl	800516c <SEGGER_SYSVIEW_SetRAMBase>
}
 80037fc:	bf00      	nop
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000000 	.word	0x20000000
 8003804:	080037c5 	.word	0x080037c5
 8003808:	08006928 	.word	0x08006928

0800380c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800380c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800380e:	b085      	sub	sp, #20
 8003810:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	e033      	b.n	8003880 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003818:	491e      	ldr	r1, [pc, #120]	; (8003894 <_cbSendTaskList+0x88>)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	491a      	ldr	r1, [pc, #104]	; (8003894 <_cbSendTaskList+0x88>)
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	3304      	adds	r3, #4
 8003838:	6819      	ldr	r1, [r3, #0]
 800383a:	4c16      	ldr	r4, [pc, #88]	; (8003894 <_cbSendTaskList+0x88>)
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4423      	add	r3, r4
 8003848:	3308      	adds	r3, #8
 800384a:	681c      	ldr	r4, [r3, #0]
 800384c:	4d11      	ldr	r5, [pc, #68]	; (8003894 <_cbSendTaskList+0x88>)
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	442b      	add	r3, r5
 800385a:	330c      	adds	r3, #12
 800385c:	681d      	ldr	r5, [r3, #0]
 800385e:	4e0d      	ldr	r6, [pc, #52]	; (8003894 <_cbSendTaskList+0x88>)
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4433      	add	r3, r6
 800386c:	3310      	adds	r3, #16
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	462b      	mov	r3, r5
 8003874:	4622      	mov	r2, r4
 8003876:	f000 f8bd 	bl	80039f4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3301      	adds	r3, #1
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <_cbSendTaskList+0x8c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	429a      	cmp	r2, r3
 8003888:	d3c6      	bcc.n	8003818 <_cbSendTaskList+0xc>
  }
}
 800388a:	bf00      	nop
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003894:	20012dfc 	.word	0x20012dfc
 8003898:	20012e9c 	.word	0x20012e9c

0800389c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800389c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80038a4:	f7ff f8c8 	bl	8002a38 <xTaskGetTickCountFromISR>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2200      	movs	r2, #0
 80038ac:	469a      	mov	sl, r3
 80038ae:	4693      	mov	fp, r2
 80038b0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80038b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	f04f 0a00 	mov.w	sl, #0
 80038c0:	f04f 0b00 	mov.w	fp, #0
 80038c4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80038c8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80038cc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80038d0:	4652      	mov	r2, sl
 80038d2:	465b      	mov	r3, fp
 80038d4:	1a14      	subs	r4, r2, r0
 80038d6:	eb63 0501 	sbc.w	r5, r3, r1
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	00ab      	lsls	r3, r5, #2
 80038e4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80038e8:	00a2      	lsls	r2, r4, #2
 80038ea:	4614      	mov	r4, r2
 80038ec:	461d      	mov	r5, r3
 80038ee:	eb14 0800 	adds.w	r8, r4, r0
 80038f2:	eb45 0901 	adc.w	r9, r5, r1
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800390a:	4690      	mov	r8, r2
 800390c:	4699      	mov	r9, r3
 800390e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003912:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003924 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003932:	2205      	movs	r2, #5
 8003934:	492b      	ldr	r1, [pc, #172]	; (80039e4 <SYSVIEW_AddTask+0xc0>)
 8003936:	68b8      	ldr	r0, [r7, #8]
 8003938:	f002 faba 	bl	8005eb0 <memcmp>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d04b      	beq.n	80039da <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003942:	4b29      	ldr	r3, [pc, #164]	; (80039e8 <SYSVIEW_AddTask+0xc4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b07      	cmp	r3, #7
 8003948:	d903      	bls.n	8003952 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800394a:	4828      	ldr	r0, [pc, #160]	; (80039ec <SYSVIEW_AddTask+0xc8>)
 800394c:	f002 f9f2 	bl	8005d34 <SEGGER_SYSVIEW_Warn>
    return;
 8003950:	e044      	b.n	80039dc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003952:	4b25      	ldr	r3, [pc, #148]	; (80039e8 <SYSVIEW_AddTask+0xc4>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4926      	ldr	r1, [pc, #152]	; (80039f0 <SYSVIEW_AddTask+0xcc>)
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003966:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <SYSVIEW_AddTask+0xc4>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4921      	ldr	r1, [pc, #132]	; (80039f0 <SYSVIEW_AddTask+0xcc>)
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	3304      	adds	r3, #4
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800397c:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <SYSVIEW_AddTask+0xc4>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	491b      	ldr	r1, [pc, #108]	; (80039f0 <SYSVIEW_AddTask+0xcc>)
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3308      	adds	r3, #8
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <SYSVIEW_AddTask+0xc4>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4916      	ldr	r1, [pc, #88]	; (80039f0 <SYSVIEW_AddTask+0xcc>)
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	330c      	adds	r3, #12
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <SYSVIEW_AddTask+0xc4>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4910      	ldr	r1, [pc, #64]	; (80039f0 <SYSVIEW_AddTask+0xcc>)
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	3310      	adds	r3, #16
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <SYSVIEW_AddTask+0xc4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3301      	adds	r3, #1
 80039c4:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <SYSVIEW_AddTask+0xc4>)
 80039c6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f80e 	bl	80039f4 <SYSVIEW_SendTaskInfo>
 80039d8:	e000      	b.n	80039dc <SYSVIEW_AddTask+0xb8>
    return;
 80039da:	bf00      	nop

}
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	0800689c 	.word	0x0800689c
 80039e8:	20012e9c 	.word	0x20012e9c
 80039ec:	080068a4 	.word	0x080068a4
 80039f0:	20012dfc 	.word	0x20012dfc

080039f4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	; 0x28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	2214      	movs	r2, #20
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f002 fa60 	bl	8005ed0 <memset>
  TaskInfo.TaskID     = TaskID;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f001 fddf 	bl	80055ec <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003a2e:	bf00      	nop
 8003a30:	3728      	adds	r7, #40	; 0x28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <__NVIC_EnableIRQ>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	db0b      	blt.n	8003a62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	f003 021f 	and.w	r2, r3, #31
 8003a50:	4907      	ldr	r1, [pc, #28]	; (8003a70 <__NVIC_EnableIRQ+0x38>)
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2001      	movs	r0, #1
 8003a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000e100 	.word	0xe000e100

08003a74 <__NVIC_SetPriority>:
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	db0a      	blt.n	8003a9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	490c      	ldr	r1, [pc, #48]	; (8003ac0 <__NVIC_SetPriority+0x4c>)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	0112      	lsls	r2, r2, #4
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	440b      	add	r3, r1
 8003a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a9c:	e00a      	b.n	8003ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	4908      	ldr	r1, [pc, #32]	; (8003ac4 <__NVIC_SetPriority+0x50>)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	3b04      	subs	r3, #4
 8003aac:	0112      	lsls	r2, r2, #4
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	761a      	strb	r2, [r3, #24]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000e100 	.word	0xe000e100
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003ace:	f002 f98d 	bl	8005dec <SEGGER_SYSVIEW_IsStarted>
 8003ad2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003ada:	f001 fc0b 	bl	80052f4 <SEGGER_SYSVIEW_Start>
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003af2:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <_cbOnUARTRx+0x3c>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d806      	bhi.n	8003b08 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <_cbOnUARTRx+0x3c>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <_cbOnUARTRx+0x3c>)
 8003b04:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003b06:	e009      	b.n	8003b1c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003b08:	f7ff ffde 	bl	8003ac8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <_cbOnUARTRx+0x3c>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4618      	mov	r0, r3
 8003b12:	1dfb      	adds	r3, r7, #7
 8003b14:	2201      	movs	r2, #1
 8003b16:	4619      	mov	r1, r3
 8003b18:	f000 fb9e 	bl	8004258 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003b1c:	bf00      	nop
}
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000014 	.word	0x20000014

08003b28 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003b30:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <_cbOnUARTTx+0x5c>)
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d80f      	bhi.n	8003b58 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003b38:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <_cbOnUARTTx+0x5c>)
 8003b3a:	785b      	ldrb	r3, [r3, #1]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <_cbOnUARTTx+0x60>)
 8003b40:	5c9a      	ldrb	r2, [r3, r2]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003b46:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <_cbOnUARTTx+0x5c>)
 8003b48:	785b      	ldrb	r3, [r3, #1]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <_cbOnUARTTx+0x5c>)
 8003b50:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003b52:	2301      	movs	r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003b56:	e00f      	b.n	8003b78 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <_cbOnUARTTx+0x5c>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fa1d 	bl	8003fa0 <SEGGER_RTT_ReadUpBufferNoLock>
 8003b66:	4603      	mov	r3, r0
 8003b68:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	da02      	bge.n	8003b76 <_cbOnUARTTx+0x4e>
    r = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e000      	b.n	8003b78 <_cbOnUARTTx+0x50>
  }
Done:
 8003b76:	bf00      	nop
  return r;
 8003b78:	68fb      	ldr	r3, [r7, #12]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000014 	.word	0x20000014
 8003b88:	08006930 	.word	0x08006930

08003b8c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003b94:	4a04      	ldr	r2, [pc, #16]	; (8003ba8 <SEGGER_UART_init+0x1c>)
 8003b96:	4905      	ldr	r1, [pc, #20]	; (8003bac <SEGGER_UART_init+0x20>)
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f863 	bl	8003c64 <HIF_UART_Init>
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	08003ae9 	.word	0x08003ae9
 8003bac:	08003b29 	.word	0x08003b29

08003bb0 <USART1_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART1_IRQHandler(void);
void USART1_IRQHandler(void) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <USART1_IRQHandler+0x80>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d011      	beq.n	8003bea <USART1_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003bc6:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <USART1_IRQHandler+0x84>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f003 030b 	and.w	r3, r3, #11
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d108      	bne.n	8003bea <USART1_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003bd8:	4b17      	ldr	r3, [pc, #92]	; (8003c38 <USART1_IRQHandler+0x88>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d004      	beq.n	8003bea <USART1_IRQHandler+0x3a>
        _cbOnRx(v);
 8003be0:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <USART1_IRQHandler+0x88>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	79fa      	ldrb	r2, [r7, #7]
 8003be6:	4610      	mov	r0, r2
 8003be8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01a      	beq.n	8003c2a <USART1_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003bf4:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <USART1_IRQHandler+0x8c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d015      	beq.n	8003c28 <USART1_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <USART1_IRQHandler+0x8c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	1dfa      	adds	r2, r7, #7
 8003c02:	4610      	mov	r0, r2
 8003c04:	4798      	blx	r3
 8003c06:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <USART1_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <USART1_IRQHandler+0x90>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a0b      	ldr	r2, [pc, #44]	; (8003c40 <USART1_IRQHandler+0x90>)
 8003c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e006      	b.n	8003c2a <USART1_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <USART1_IRQHandler+0x80>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003c20:	79fa      	ldrb	r2, [r7, #7]
 8003c22:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <USART1_IRQHandler+0x84>)
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e000      	b.n	8003c2a <USART1_IRQHandler+0x7a>
      return;
 8003c28:	bf00      	nop
    }
  }
}
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40011000 	.word	0x40011000
 8003c34:	40011004 	.word	0x40011004
 8003c38:	20012ea0 	.word	0x20012ea0
 8003c3c:	20012ea4 	.word	0x20012ea4
 8003c40:	4001100c 	.word	0x4001100c

08003c44 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c52:	6013      	str	r3, [r2, #0]
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	4001100c 	.word	0x4001100c

08003c64 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  //
  // Configure USART RX/TX pins for alternate function AF7
  //

  //RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
  RCC_APB2ENR |= (1 <<  4);        // Enable USART1 clock // PK: change for stm32f429 disc1
 8003c70:	4b2e      	ldr	r3, [pc, #184]	; (8003d2c <HIF_UART_Init+0xc8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a2d      	ldr	r2, [pc, #180]	; (8003d2c <HIF_UART_Init+0xc8>)
 8003c76:	f043 0310 	orr.w	r3, r3, #16
 8003c7a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003c7c:	4b2c      	ldr	r3, [pc, #176]	; (8003d30 <HIF_UART_Init+0xcc>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2b      	ldr	r2, [pc, #172]	; (8003d30 <HIF_UART_Init+0xcc>)
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	6013      	str	r3, [r2, #0]

  v  = GPIO_AFRH;	// v  = GPIO_AFRL;	// PK: Changed for stm32f429
 8003c88:	4b2a      	ldr	r3, [pc, #168]	; (8003d34 <HIF_UART_Init+0xd0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	613b      	str	r3, [r7, #16]
  //v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
  //v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
  v &= ~((15UL << 4) | (15UL << 8));
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003c94:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << 4) | (7UL << 8));
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8003c9c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003c9e:	4a26      	ldr	r2, [pc, #152]	; (8003d38 <HIF_UART_Init+0xd4>)
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003ca4:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <HIF_UART_Init+0xd8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8003cb0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8003cb8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003cba:	4a20      	ldr	r2, [pc, #128]	; (8003d3c <HIF_UART_Init+0xd8>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003cc0:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <HIF_UART_Init+0xdc>)
 8003cc2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003cc6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <HIF_UART_Init+0xe0>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003cce:	4b1e      	ldr	r3, [pc, #120]	; (8003d48 <HIF_UART_Init+0xe4>)
 8003cd0:	2280      	movs	r2, #128	; 0x80
 8003cd2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003cda:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <HIF_UART_Init+0xe8>)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf2:	d302      	bcc.n	8003cfa <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003cf4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003cf8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <HIF_UART_Init+0xec>)
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003d0a:	4a12      	ldr	r2, [pc, #72]	; (8003d54 <HIF_UART_Init+0xf0>)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003d10:	4a11      	ldr	r2, [pc, #68]	; (8003d58 <HIF_UART_Init+0xf4>)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003d16:	2106      	movs	r1, #6
 8003d18:	2025      	movs	r0, #37	; 0x25
 8003d1a:	f7ff feab 	bl	8003a74 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003d1e:	2025      	movs	r0, #37	; 0x25
 8003d20:	f7ff fe8a 	bl	8003a38 <__NVIC_EnableIRQ>
}
 8003d24:	bf00      	nop
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40023844 	.word	0x40023844
 8003d30:	40023830 	.word	0x40023830
 8003d34:	40020024 	.word	0x40020024
 8003d38:	40020020 	.word	0x40020020
 8003d3c:	40020000 	.word	0x40020000
 8003d40:	4001100c 	.word	0x4001100c
 8003d44:	40011010 	.word	0x40011010
 8003d48:	40011014 	.word	0x40011014
 8003d4c:	0a037a00 	.word	0x0a037a00
 8003d50:	40011008 	.word	0x40011008
 8003d54:	20012ea0 	.word	0x20012ea0
 8003d58:	20012ea4 	.word	0x20012ea4

08003d5c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003d62:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <_DoInit+0xa0>)
 8003d64:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003d66:	22a8      	movs	r2, #168	; 0xa8
 8003d68:	2100      	movs	r1, #0
 8003d6a:	6838      	ldr	r0, [r7, #0]
 8003d6c:	f002 f8b0 	bl	8005ed0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2203      	movs	r2, #3
 8003d74:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4a20      	ldr	r2, [pc, #128]	; (8003e00 <_DoInit+0xa4>)
 8003d80:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <_DoInit+0xa8>)
 8003d86:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d8e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2200      	movs	r2, #0
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	4a16      	ldr	r2, [pc, #88]	; (8003e00 <_DoInit+0xa4>)
 8003da6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <_DoInit+0xac>)
 8003dac:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2210      	movs	r2, #16
 8003db2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003dc6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003dca:	2300      	movs	r3, #0
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	e00c      	b.n	8003dea <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f1c3 030f 	rsb	r3, r3, #15
 8003dd6:	4a0d      	ldr	r2, [pc, #52]	; (8003e0c <_DoInit+0xb0>)
 8003dd8:	5cd1      	ldrb	r1, [r2, r3]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4413      	add	r3, r2
 8003de0:	460a      	mov	r2, r1
 8003de2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3301      	adds	r3, #1
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b0f      	cmp	r3, #15
 8003dee:	d9ef      	bls.n	8003dd0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003df0:	f3bf 8f5f 	dmb	sy
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20012ea8 	.word	0x20012ea8
 8003e00:	080068f4 	.word	0x080068f4
 8003e04:	20012f50 	.word	0x20012f50
 8003e08:	20013350 	.word	0x20013350
 8003e0c:	08006934 	.word	0x08006934

08003e10 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d905      	bls.n	8003e40 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	e007      	b.n	8003e50 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	69b9      	ldr	r1, [r7, #24]
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	1acb      	subs	r3, r1, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	bf28      	it	cs
 8003e5e:	4613      	movcs	r3, r2
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4293      	cmp	r3, r2
 8003e68:	bf28      	it	cs
 8003e6a:	4613      	movcs	r3, r2
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	4413      	add	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	6978      	ldr	r0, [r7, #20]
 8003e7e:	f002 f855 	bl	8005f2c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003e82:	6a3a      	ldr	r2, [r7, #32]
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	4413      	add	r3, r2
 8003e88:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	4413      	add	r3, r2
 8003e90:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	4413      	add	r3, r2
 8003ea0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d101      	bne.n	8003eb0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003eb0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1b2      	bne.n	8003e26 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3728      	adds	r7, #40	; 0x28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b088      	sub	sp, #32
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d911      	bls.n	8003f12 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	6938      	ldr	r0, [r7, #16]
 8003efe:	f002 f815 	bl	8005f2c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f02:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	441a      	add	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003f10:	e01f      	b.n	8003f52 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	6938      	ldr	r0, [r7, #16]
 8003f26:	f002 f801 	bl	8005f2c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4619      	mov	r1, r3
 8003f42:	6938      	ldr	r0, [r7, #16]
 8003f44:	f001 fff2 	bl	8005f2c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f48:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	60da      	str	r2, [r3, #12]
}
 8003f52:	bf00      	nop
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003f5a:	b480      	push	{r7}
 8003f5c:	b087      	sub	sp, #28
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d808      	bhi.n	8003f88 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	1ad2      	subs	r2, r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4413      	add	r3, r2
 8003f82:	3b01      	subs	r3, #1
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e004      	b.n	8003f92 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003f92:	697b      	ldr	r3, [r7, #20]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08c      	sub	sp, #48	; 0x30
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003fac:	4b3e      	ldr	r3, [pc, #248]	; (80040a8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003fae:	623b      	str	r3, [r7, #32]
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b53      	cmp	r3, #83	; 0x53
 8003fb8:	d001      	beq.n	8003fbe <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003fba:	f7ff fecf 	bl	8003d5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4a37      	ldr	r2, [pc, #220]	; (80040a8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003fcc:	4413      	add	r3, r2
 8003fce:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d92b      	bls.n	8004044 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	bf28      	it	cs
 8003ffe:	4613      	movcs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	4413      	add	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	6939      	ldr	r1, [r7, #16]
 8004010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004012:	f001 ff8b 	bl	8005f2c <memcpy>
    NumBytesRead += NumBytesRem;
 8004016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	4413      	add	r3, r2
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800401e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	4413      	add	r3, r2
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800402e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	4413      	add	r3, r2
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800403c:	429a      	cmp	r2, r3
 800403e:	d101      	bne.n	8004044 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004040:	2300      	movs	r3, #0
 8004042:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4293      	cmp	r3, r2
 8004052:	bf28      	it	cs
 8004054:	4613      	movcs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d019      	beq.n	8004092 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004064:	4413      	add	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	6939      	ldr	r1, [r7, #16]
 800406c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800406e:	f001 ff5d 	bl	8005f2c <memcpy>
    NumBytesRead += NumBytesRem;
 8004072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	4413      	add	r3, r2
 8004078:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	4413      	add	r3, r2
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800408a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	4413      	add	r3, r2
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800409c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3730      	adds	r7, #48	; 0x30
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20012ea8 	.word	0x20012ea8

080040ac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08c      	sub	sp, #48	; 0x30
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80040b8:	4b3e      	ldr	r3, [pc, #248]	; (80041b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80040ba:	623b      	str	r3, [r7, #32]
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b53      	cmp	r3, #83	; 0x53
 80040c4:	d001      	beq.n	80040ca <SEGGER_RTT_ReadNoLock+0x1e>
 80040c6:	f7ff fe49 	bl	8003d5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4613      	mov	r3, r2
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4413      	add	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	3360      	adds	r3, #96	; 0x60
 80040d6:	4a37      	ldr	r2, [pc, #220]	; (80041b4 <SEGGER_RTT_ReadNoLock+0x108>)
 80040d8:	4413      	add	r3, r2
 80040da:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80040ec:	2300      	movs	r3, #0
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80040f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d92b      	bls.n	8004150 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4293      	cmp	r3, r2
 8004108:	bf28      	it	cs
 800410a:	4613      	movcs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	4413      	add	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	6939      	ldr	r1, [r7, #16]
 800411c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800411e:	f001 ff05 	bl	8005f2c <memcpy>
    NumBytesRead += NumBytesRem;
 8004122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4413      	add	r3, r2
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4413      	add	r3, r2
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800413a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	4413      	add	r3, r2
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004148:	429a      	cmp	r2, r3
 800414a:	d101      	bne.n	8004150 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800414c:	2300      	movs	r3, #0
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4293      	cmp	r3, r2
 800415e:	bf28      	it	cs
 8004160:	4613      	movcs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d019      	beq.n	800419e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	4413      	add	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	6939      	ldr	r1, [r7, #16]
 8004178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800417a:	f001 fed7 	bl	8005f2c <memcpy>
    NumBytesRead += NumBytesRem;
 800417e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	4413      	add	r3, r2
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	4413      	add	r3, r2
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	4413      	add	r3, r2
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3730      	adds	r7, #48	; 0x30
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20012ea8 	.word	0x20012ea8

080041b8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4613      	mov	r3, r2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4413      	add	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	3360      	adds	r3, #96	; 0x60
 80041d4:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80041d6:	4413      	add	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d029      	beq.n	8004236 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d82e      	bhi.n	8004244 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d013      	beq.n	8004216 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80041ee:	e029      	b.n	8004244 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80041f0:	6978      	ldr	r0, [r7, #20]
 80041f2:	f7ff feb2 	bl	8003f5a <_GetAvailWriteSpace>
 80041f6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d202      	bcs.n	8004206 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004204:	e021      	b.n	800424a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	69b9      	ldr	r1, [r7, #24]
 800420e:	6978      	ldr	r0, [r7, #20]
 8004210:	f7ff fe5b 	bl	8003eca <_WriteNoCheck>
    break;
 8004214:	e019      	b.n	800424a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004216:	6978      	ldr	r0, [r7, #20]
 8004218:	f7ff fe9f 	bl	8003f5a <_GetAvailWriteSpace>
 800421c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4293      	cmp	r3, r2
 8004224:	bf28      	it	cs
 8004226:	4613      	movcs	r3, r2
 8004228:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	69b9      	ldr	r1, [r7, #24]
 800422e:	6978      	ldr	r0, [r7, #20]
 8004230:	f7ff fe4b 	bl	8003eca <_WriteNoCheck>
    break;
 8004234:	e009      	b.n	800424a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	69b9      	ldr	r1, [r7, #24]
 800423a:	6978      	ldr	r0, [r7, #20]
 800423c:	f7ff fde8 	bl	8003e10 <_WriteBlocking>
 8004240:	61f8      	str	r0, [r7, #28]
    break;
 8004242:	e002      	b.n	800424a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
    break;
 8004248:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800424a:	69fb      	ldr	r3, [r7, #28]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20012ea8 	.word	0x20012ea8

08004258 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b53      	cmp	r3, #83	; 0x53
 8004270:	d001      	beq.n	8004276 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004272:	f7ff fd73 	bl	8003d5c <_DoInit>
  SEGGER_RTT_LOCK();
 8004276:	f3ef 8311 	mrs	r3, BASEPRI
 800427a:	f04f 0120 	mov.w	r1, #32
 800427e:	f381 8811 	msr	BASEPRI, r1
 8004282:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7ff ff95 	bl	80041b8 <SEGGER_RTT_WriteDownBufferNoLock>
 800428e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004296:	697b      	ldr	r3, [r7, #20]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3720      	adds	r7, #32
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20012ea8 	.word	0x20012ea8

080042a4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80042b2:	4b3d      	ldr	r3, [pc, #244]	; (80043a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b53      	cmp	r3, #83	; 0x53
 80042be:	d001      	beq.n	80042c4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80042c0:	f7ff fd4c 	bl	8003d5c <_DoInit>
  SEGGER_RTT_LOCK();
 80042c4:	f3ef 8311 	mrs	r3, BASEPRI
 80042c8:	f04f 0120 	mov.w	r1, #32
 80042cc:	f381 8811 	msr	BASEPRI, r1
 80042d0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042d2:	4b35      	ldr	r3, [pc, #212]	; (80043a8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80042d4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80042da:	6939      	ldr	r1, [r7, #16]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	4613      	mov	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	4413      	add	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	440b      	add	r3, r1
 80042ea:	3304      	adds	r3, #4
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d008      	beq.n	8004304 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3301      	adds	r3, #1
 80042f6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	429a      	cmp	r2, r3
 8004300:	dbeb      	blt.n	80042da <SEGGER_RTT_AllocUpBuffer+0x36>
 8004302:	e000      	b.n	8004306 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004304:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	429a      	cmp	r2, r3
 800430e:	da3f      	bge.n	8004390 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004310:	6939      	ldr	r1, [r7, #16]
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	4613      	mov	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4413      	add	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	440b      	add	r3, r1
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004324:	6939      	ldr	r1, [r7, #16]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	440b      	add	r3, r1
 8004334:	3304      	adds	r3, #4
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800433a:	6939      	ldr	r1, [r7, #16]
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	4613      	mov	r3, r2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	4413      	add	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	440b      	add	r3, r1
 8004348:	3320      	adds	r3, #32
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800434e:	6939      	ldr	r1, [r7, #16]
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	4613      	mov	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	4413      	add	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	440b      	add	r3, r1
 800435c:	3328      	adds	r3, #40	; 0x28
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004362:	6939      	ldr	r1, [r7, #16]
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	440b      	add	r3, r1
 8004370:	3324      	adds	r3, #36	; 0x24
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004376:	6939      	ldr	r1, [r7, #16]
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	440b      	add	r3, r1
 8004384:	332c      	adds	r3, #44	; 0x2c
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800438a:	f3bf 8f5f 	dmb	sy
 800438e:	e002      	b.n	8004396 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295
 8004394:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800439c:	69fb      	ldr	r3, [r7, #28]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20012ea8 	.word	0x20012ea8

080043ac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80043ba:	4b21      	ldr	r3, [pc, #132]	; (8004440 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80043bc:	623b      	str	r3, [r7, #32]
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b53      	cmp	r3, #83	; 0x53
 80043c6:	d001      	beq.n	80043cc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80043c8:	f7ff fcc8 	bl	8003d5c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80043cc:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80043ce:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d82c      	bhi.n	8004430 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80043d6:	f3ef 8311 	mrs	r3, BASEPRI
 80043da:	f04f 0120 	mov.w	r1, #32
 80043de:	f381 8811 	msr	BASEPRI, r1
 80043e2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	3360      	adds	r3, #96	; 0x60
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00e      	beq.n	800441a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2200      	movs	r2, #0
 8004412:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2200      	movs	r2, #0
 8004418:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004420:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
 800442e:	e002      	b.n	8004436 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004430:	f04f 33ff 	mov.w	r3, #4294967295
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004438:	4618      	mov	r0, r3
 800443a:	3728      	adds	r7, #40	; 0x28
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20012ea8 	.word	0x20012ea8

08004444 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	60fa      	str	r2, [r7, #12]
 800445a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b80      	cmp	r3, #128	; 0x80
 8004460:	d90a      	bls.n	8004478 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004466:	e007      	b.n	8004478 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	1c53      	adds	r3, r2, #1
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1c59      	adds	r1, r3, #1
 8004472:	60f9      	str	r1, [r7, #12]
 8004474:	7812      	ldrb	r2, [r2, #0]
 8004476:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	1e5a      	subs	r2, r3, #1
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <_EncodeStr+0x46>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1ee      	bne.n	8004468 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	b2da      	uxtb	r2, r3
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004496:	68fb      	ldr	r3, [r7, #12]
}
 8004498:	4618      	mov	r0, r3
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3307      	adds	r3, #7
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044c2:	4b34      	ldr	r3, [pc, #208]	; (8004594 <_HandleIncomingPacket+0xd8>)
 80044c4:	7e1b      	ldrb	r3, [r3, #24]
 80044c6:	4618      	mov	r0, r3
 80044c8:	1cfb      	adds	r3, r7, #3
 80044ca:	2201      	movs	r2, #1
 80044cc:	4619      	mov	r1, r3
 80044ce:	f7ff fded 	bl	80040ac <SEGGER_RTT_ReadNoLock>
 80044d2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d057      	beq.n	800458a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	2b80      	cmp	r3, #128	; 0x80
 80044de:	d031      	beq.n	8004544 <_HandleIncomingPacket+0x88>
 80044e0:	2b80      	cmp	r3, #128	; 0x80
 80044e2:	dc40      	bgt.n	8004566 <_HandleIncomingPacket+0xaa>
 80044e4:	2b07      	cmp	r3, #7
 80044e6:	dc15      	bgt.n	8004514 <_HandleIncomingPacket+0x58>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	dd3c      	ble.n	8004566 <_HandleIncomingPacket+0xaa>
 80044ec:	3b01      	subs	r3, #1
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d839      	bhi.n	8004566 <_HandleIncomingPacket+0xaa>
 80044f2:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <_HandleIncomingPacket+0x3c>)
 80044f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f8:	0800451b 	.word	0x0800451b
 80044fc:	08004521 	.word	0x08004521
 8004500:	08004527 	.word	0x08004527
 8004504:	0800452d 	.word	0x0800452d
 8004508:	08004533 	.word	0x08004533
 800450c:	08004539 	.word	0x08004539
 8004510:	0800453f 	.word	0x0800453f
 8004514:	2b7f      	cmp	r3, #127	; 0x7f
 8004516:	d033      	beq.n	8004580 <_HandleIncomingPacket+0xc4>
 8004518:	e025      	b.n	8004566 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800451a:	f000 feeb 	bl	80052f4 <SEGGER_SYSVIEW_Start>
      break;
 800451e:	e034      	b.n	800458a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004520:	f000 ffa4 	bl	800546c <SEGGER_SYSVIEW_Stop>
      break;
 8004524:	e031      	b.n	800458a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004526:	f001 f97d 	bl	8005824 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800452a:	e02e      	b.n	800458a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800452c:	f001 f942 	bl	80057b4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004530:	e02b      	b.n	800458a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004532:	f000 ffc1 	bl	80054b8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004536:	e028      	b.n	800458a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004538:	f001 fbaa 	bl	8005c90 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800453c:	e025      	b.n	800458a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800453e:	f001 fb89 	bl	8005c54 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004542:	e022      	b.n	800458a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004544:	4b13      	ldr	r3, [pc, #76]	; (8004594 <_HandleIncomingPacket+0xd8>)
 8004546:	7e1b      	ldrb	r3, [r3, #24]
 8004548:	4618      	mov	r0, r3
 800454a:	1cfb      	adds	r3, r7, #3
 800454c:	2201      	movs	r2, #1
 800454e:	4619      	mov	r1, r3
 8004550:	f7ff fdac 	bl	80040ac <SEGGER_RTT_ReadNoLock>
 8004554:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d013      	beq.n	8004584 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	4618      	mov	r0, r3
 8004560:	f001 faee 	bl	8005b40 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004564:	e00e      	b.n	8004584 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	b25b      	sxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	da0c      	bge.n	8004588 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <_HandleIncomingPacket+0xd8>)
 8004570:	7e1b      	ldrb	r3, [r3, #24]
 8004572:	4618      	mov	r0, r3
 8004574:	1cfb      	adds	r3, r7, #3
 8004576:	2201      	movs	r2, #1
 8004578:	4619      	mov	r1, r3
 800457a:	f7ff fd97 	bl	80040ac <SEGGER_RTT_ReadNoLock>
      }
      break;
 800457e:	e003      	b.n	8004588 <_HandleIncomingPacket+0xcc>
      break;
 8004580:	bf00      	nop
 8004582:	e002      	b.n	800458a <_HandleIncomingPacket+0xce>
      break;
 8004584:	bf00      	nop
 8004586:	e000      	b.n	800458a <_HandleIncomingPacket+0xce>
      break;
 8004588:	bf00      	nop
    }
  }
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20014368 	.word	0x20014368

08004598 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b08c      	sub	sp, #48	; 0x30
 800459c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800459e:	2301      	movs	r3, #1
 80045a0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	3301      	adds	r3, #1
 80045a6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ac:	4b32      	ldr	r3, [pc, #200]	; (8004678 <_TrySendOverflowPacket+0xe0>)
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b2:	e00b      	b.n	80045cc <_TrySendOverflowPacket+0x34>
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ba:	1c59      	adds	r1, r3, #1
 80045bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	09db      	lsrs	r3, r3, #7
 80045ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	2b7f      	cmp	r3, #127	; 0x7f
 80045d0:	d8f0      	bhi.n	80045b4 <_TrySendOverflowPacket+0x1c>
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045e2:	4b26      	ldr	r3, [pc, #152]	; (800467c <_TrySendOverflowPacket+0xe4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80045e8:	4b23      	ldr	r3, [pc, #140]	; (8004678 <_TrySendOverflowPacket+0xe0>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	623b      	str	r3, [r7, #32]
 80045fa:	e00b      	b.n	8004614 <_TrySendOverflowPacket+0x7c>
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	1c59      	adds	r1, r3, #1
 8004604:	6279      	str	r1, [r7, #36]	; 0x24
 8004606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	09db      	lsrs	r3, r3, #7
 8004612:	623b      	str	r3, [r7, #32]
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	2b7f      	cmp	r3, #127	; 0x7f
 8004618:	d8f0      	bhi.n	80045fc <_TrySendOverflowPacket+0x64>
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	627a      	str	r2, [r7, #36]	; 0x24
 8004620:	6a3a      	ldr	r2, [r7, #32]
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800462a:	4b13      	ldr	r3, [pc, #76]	; (8004678 <_TrySendOverflowPacket+0xe0>)
 800462c:	785b      	ldrb	r3, [r3, #1]
 800462e:	4618      	mov	r0, r3
 8004630:	1d3b      	adds	r3, r7, #4
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	461a      	mov	r2, r3
 8004638:	1d3b      	adds	r3, r7, #4
 800463a:	4619      	mov	r1, r3
 800463c:	f7fb fdd8 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004640:	4603      	mov	r3, r0
 8004642:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004644:	f7ff fafe 	bl	8003c44 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800464e:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <_TrySendOverflowPacket+0xe0>)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004654:	4b08      	ldr	r3, [pc, #32]	; (8004678 <_TrySendOverflowPacket+0xe0>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	3b01      	subs	r3, #1
 800465a:	b2da      	uxtb	r2, r3
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <_TrySendOverflowPacket+0xe0>)
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	e004      	b.n	800466c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004662:	4b05      	ldr	r3, [pc, #20]	; (8004678 <_TrySendOverflowPacket+0xe0>)
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	3301      	adds	r3, #1
 8004668:	4a03      	ldr	r2, [pc, #12]	; (8004678 <_TrySendOverflowPacket+0xe0>)
 800466a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800466c:	693b      	ldr	r3, [r7, #16]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3730      	adds	r7, #48	; 0x30
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20014368 	.word	0x20014368
 800467c:	e0001004 	.word	0xe0001004

08004680 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b08a      	sub	sp, #40	; 0x28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800468c:	4b96      	ldr	r3, [pc, #600]	; (80048e8 <_SendPacket+0x268>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d010      	beq.n	80046b6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004694:	4b94      	ldr	r3, [pc, #592]	; (80048e8 <_SendPacket+0x268>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8130 	beq.w	80048fe <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800469e:	4b92      	ldr	r3, [pc, #584]	; (80048e8 <_SendPacket+0x268>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d109      	bne.n	80046ba <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80046a6:	f7ff ff77 	bl	8004598 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80046aa:	4b8f      	ldr	r3, [pc, #572]	; (80048e8 <_SendPacket+0x268>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	f040 8127 	bne.w	8004902 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80046b4:	e001      	b.n	80046ba <_SendPacket+0x3a>
    goto Send;
 80046b6:	bf00      	nop
 80046b8:	e000      	b.n	80046bc <_SendPacket+0x3c>
Send:
 80046ba:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b1f      	cmp	r3, #31
 80046c0:	d809      	bhi.n	80046d6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80046c2:	4b89      	ldr	r3, [pc, #548]	; (80048e8 <_SendPacket+0x268>)
 80046c4:	69da      	ldr	r2, [r3, #28]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 8118 	bne.w	8004906 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b17      	cmp	r3, #23
 80046da:	d807      	bhi.n	80046ec <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3b01      	subs	r3, #1
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	e0c4      	b.n	8004876 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	2b7f      	cmp	r3, #127	; 0x7f
 80046f8:	d912      	bls.n	8004720 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	09da      	lsrs	r2, r3, #7
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	3b01      	subs	r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	3a01      	subs	r2, #1
 8004712:	60fa      	str	r2, [r7, #12]
 8004714:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e006      	b.n	800472e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3b01      	subs	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b7e      	cmp	r3, #126	; 0x7e
 8004732:	d807      	bhi.n	8004744 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3b01      	subs	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	b2da      	uxtb	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	e098      	b.n	8004876 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800474a:	d212      	bcs.n	8004772 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	09da      	lsrs	r2, r3, #7
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3b01      	subs	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	3a01      	subs	r2, #1
 8004764:	60fa      	str	r2, [r7, #12]
 8004766:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e081      	b.n	8004876 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004778:	d21d      	bcs.n	80047b6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	0b9a      	lsrs	r2, r3, #14
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3b01      	subs	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	09db      	lsrs	r3, r3, #7
 800478e:	b2db      	uxtb	r3, r3
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	3a01      	subs	r2, #1
 8004794:	60fa      	str	r2, [r7, #12]
 8004796:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800479a:	b2da      	uxtb	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	3a01      	subs	r2, #1
 80047a8:	60fa      	str	r2, [r7, #12]
 80047aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	e05f      	b.n	8004876 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047bc:	d228      	bcs.n	8004810 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0d5a      	lsrs	r2, r3, #21
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0b9b      	lsrs	r3, r3, #14
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	3a01      	subs	r2, #1
 80047d8:	60fa      	str	r2, [r7, #12]
 80047da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	09db      	lsrs	r3, r3, #7
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	3a01      	subs	r2, #1
 80047ee:	60fa      	str	r2, [r7, #12]
 80047f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	3a01      	subs	r2, #1
 8004802:	60fa      	str	r2, [r7, #12]
 8004804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	e032      	b.n	8004876 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	0f1a      	lsrs	r2, r3, #28
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3b01      	subs	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0d5b      	lsrs	r3, r3, #21
 8004824:	b2db      	uxtb	r3, r3
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	3a01      	subs	r2, #1
 800482a:	60fa      	str	r2, [r7, #12]
 800482c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0b9b      	lsrs	r3, r3, #14
 800483a:	b2db      	uxtb	r3, r3
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	3a01      	subs	r2, #1
 8004840:	60fa      	str	r2, [r7, #12]
 8004842:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004846:	b2da      	uxtb	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	09db      	lsrs	r3, r3, #7
 8004850:	b2db      	uxtb	r3, r3
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	3a01      	subs	r2, #1
 8004856:	60fa      	str	r2, [r7, #12]
 8004858:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800485c:	b2da      	uxtb	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	3a01      	subs	r2, #1
 800486a:	60fa      	str	r2, [r7, #12]
 800486c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004876:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <_SendPacket+0x26c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800487c:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <_SendPacket+0x268>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	e00b      	b.n	80048a8 <_SendPacket+0x228>
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	b2da      	uxtb	r2, r3
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	1c59      	adds	r1, r3, #1
 8004898:	6279      	str	r1, [r7, #36]	; 0x24
 800489a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	09db      	lsrs	r3, r3, #7
 80048a6:	623b      	str	r3, [r7, #32]
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	2b7f      	cmp	r3, #127	; 0x7f
 80048ac:	d8f0      	bhi.n	8004890 <_SendPacket+0x210>
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	627a      	str	r2, [r7, #36]	; 0x24
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80048be:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <_SendPacket+0x268>)
 80048c0:	785b      	ldrb	r3, [r3, #1]
 80048c2:	4618      	mov	r0, r3
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	68f9      	ldr	r1, [r7, #12]
 80048ce:	f7fb fc8f 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80048d2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80048d4:	f7ff f9b6 	bl	8003c44 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80048de:	4a02      	ldr	r2, [pc, #8]	; (80048e8 <_SendPacket+0x268>)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	60d3      	str	r3, [r2, #12]
 80048e4:	e010      	b.n	8004908 <_SendPacket+0x288>
 80048e6:	bf00      	nop
 80048e8:	20014368 	.word	0x20014368
 80048ec:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80048f0:	4b19      	ldr	r3, [pc, #100]	; (8004958 <_SendPacket+0x2d8>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	4b17      	ldr	r3, [pc, #92]	; (8004958 <_SendPacket+0x2d8>)
 80048fa:	701a      	strb	r2, [r3, #0]
 80048fc:	e004      	b.n	8004908 <_SendPacket+0x288>
    goto SendDone;
 80048fe:	bf00      	nop
 8004900:	e002      	b.n	8004908 <_SendPacket+0x288>
      goto SendDone;
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <_SendPacket+0x288>
      goto SendDone;
 8004906:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <_SendPacket+0x2d8>)
 800490a:	7e1b      	ldrb	r3, [r3, #24]
 800490c:	4619      	mov	r1, r3
 800490e:	4a13      	ldr	r2, [pc, #76]	; (800495c <_SendPacket+0x2dc>)
 8004910:	460b      	mov	r3, r1
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	440b      	add	r3, r1
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	336c      	adds	r3, #108	; 0x6c
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <_SendPacket+0x2d8>)
 8004920:	7e1b      	ldrb	r3, [r3, #24]
 8004922:	4618      	mov	r0, r3
 8004924:	490d      	ldr	r1, [pc, #52]	; (800495c <_SendPacket+0x2dc>)
 8004926:	4603      	mov	r3, r0
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	4403      	add	r3, r0
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	440b      	add	r3, r1
 8004930:	3370      	adds	r3, #112	; 0x70
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d00b      	beq.n	8004950 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <_SendPacket+0x2d8>)
 800493a:	789b      	ldrb	r3, [r3, #2]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d107      	bne.n	8004950 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <_SendPacket+0x2d8>)
 8004942:	2201      	movs	r2, #1
 8004944:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004946:	f7ff fdb9 	bl	80044bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800494a:	4b03      	ldr	r3, [pc, #12]	; (8004958 <_SendPacket+0x2d8>)
 800494c:	2200      	movs	r2, #0
 800494e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004950:	bf00      	nop
 8004952:	3728      	adds	r7, #40	; 0x28
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20014368 	.word	0x20014368
 800495c:	20012ea8 	.word	0x20012ea8

08004960 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	3301      	adds	r3, #1
 8004976:	2b80      	cmp	r3, #128	; 0x80
 8004978:	d80a      	bhi.n	8004990 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	1c59      	adds	r1, r3, #1
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6051      	str	r1, [r2, #4]
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b80      	cmp	r3, #128	; 0x80
 8004996:	d15a      	bne.n	8004a4e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	e00b      	b.n	80049d2 <_StoreChar+0x72>
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	1c59      	adds	r1, r3, #1
 80049c2:	6279      	str	r1, [r7, #36]	; 0x24
 80049c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	09db      	lsrs	r3, r3, #7
 80049d0:	623b      	str	r3, [r7, #32]
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	2b7f      	cmp	r3, #127	; 0x7f
 80049d6:	d8f0      	bhi.n	80049ba <_StoreChar+0x5a>
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	627a      	str	r2, [r7, #36]	; 0x24
 80049de:	6a3a      	ldr	r2, [r7, #32]
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	2300      	movs	r3, #0
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	e00b      	b.n	8004a0a <_StoreChar+0xaa>
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	1c59      	adds	r1, r3, #1
 80049fa:	61f9      	str	r1, [r7, #28]
 80049fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	09db      	lsrs	r3, r3, #7
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004a0e:	d8f0      	bhi.n	80049f2 <_StoreChar+0x92>
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	61fa      	str	r2, [r7, #28]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	701a      	strb	r2, [r3, #0]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	221a      	movs	r2, #26
 8004a26:	6939      	ldr	r1, [r7, #16]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fe29 	bl	8004680 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fd36 	bl	80044a4 <_PreparePacket>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	611a      	str	r2, [r3, #16]
  }
}
 8004a4e:	bf00      	nop
 8004a50:	3728      	adds	r7, #40	; 0x28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004a72:	e007      	b.n	8004a84 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004a74:	6a3a      	ldr	r2, [r7, #32]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7c:	623b      	str	r3, [r7, #32]
    Width++;
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3301      	adds	r3, #1
 8004a82:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004a84:	6a3a      	ldr	r2, [r7, #32]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d2f3      	bcs.n	8004a74 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d901      	bls.n	8004a98 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d11f      	bne.n	8004ae2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01c      	beq.n	8004ae2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <_PrintUnsigned+0x66>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <_PrintUnsigned+0x66>
        c = '0';
 8004ab8:	2330      	movs	r3, #48	; 0x30
 8004aba:	76fb      	strb	r3, [r7, #27]
 8004abc:	e001      	b.n	8004ac2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004abe:	2320      	movs	r3, #32
 8004ac0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ac2:	e007      	b.n	8004ad4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004aca:	7efb      	ldrb	r3, [r7, #27]
 8004acc:	4619      	mov	r1, r3
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff ff46 	bl	8004960 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <_PrintUnsigned+0x8a>
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d3f0      	bcc.n	8004ac4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d903      	bls.n	8004af0 <_PrintUnsigned+0x98>
      NumDigits--;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	603b      	str	r3, [r7, #0]
 8004aee:	e009      	b.n	8004b04 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d200      	bcs.n	8004b04 <_PrintUnsigned+0xac>
        break;
 8004b02:	e005      	b.n	8004b10 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	fb02 f303 	mul.w	r3, r2, r3
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004b0e:	e7e8      	b.n	8004ae2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004b28:	4a15      	ldr	r2, [pc, #84]	; (8004b80 <_PrintUnsigned+0x128>)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	4619      	mov	r1, r3
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff ff14 	bl	8004960 <_StoreChar>
    Digit /= Base;
 8004b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e3      	bne.n	8004b10 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d011      	beq.n	8004b76 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00e      	beq.n	8004b76 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b58:	e006      	b.n	8004b68 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004b60:	2120      	movs	r1, #32
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff fefc 	bl	8004960 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <_PrintUnsigned+0x11e>
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d3f1      	bcc.n	8004b5a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004b76:	bf00      	nop
 8004b78:	3728      	adds	r7, #40	; 0x28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	08006954 	.word	0x08006954

08004b84 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bfb8      	it	lt
 8004b98:	425b      	neglt	r3, r3
 8004b9a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004ba0:	e007      	b.n	8004bb2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004baa:	613b      	str	r3, [r7, #16]
    Width++;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	daf3      	bge.n	8004ba2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d901      	bls.n	8004bc6 <_PrintInt+0x42>
    Width = NumDigits;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <_PrintInt+0x5e>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	db04      	blt.n	8004bdc <_PrintInt+0x58>
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <_PrintInt+0x5e>
    FieldWidth--;
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <_PrintInt+0x6e>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d016      	beq.n	8004c20 <_PrintInt+0x9c>
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d111      	bne.n	8004c20 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00e      	beq.n	8004c20 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c02:	e006      	b.n	8004c12 <_PrintInt+0x8e>
        FieldWidth--;
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004c0a:	2120      	movs	r1, #32
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f7ff fea7 	bl	8004960 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <_PrintInt+0x9c>
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d3f1      	bcc.n	8004c04 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	da07      	bge.n	8004c36 <_PrintInt+0xb2>
    v = -v;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	425b      	negs	r3, r3
 8004c2a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004c2c:	212d      	movs	r1, #45	; 0x2d
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7ff fe96 	bl	8004960 <_StoreChar>
 8004c34:	e008      	b.n	8004c48 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004c40:	212b      	movs	r1, #43	; 0x2b
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff fe8c 	bl	8004960 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d019      	beq.n	8004c86 <_PrintInt+0x102>
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d114      	bne.n	8004c86 <_PrintInt+0x102>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d111      	bne.n	8004c86 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00e      	beq.n	8004c86 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c68:	e006      	b.n	8004c78 <_PrintInt+0xf4>
        FieldWidth--;
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004c70:	2130      	movs	r1, #48	; 0x30
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f7ff fe74 	bl	8004960 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <_PrintInt+0x102>
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d3f1      	bcc.n	8004c6a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff fedf 	bl	8004a58 <_PrintUnsigned>
}
 8004c9a:	bf00      	nop
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b098      	sub	sp, #96	; 0x60
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8004cb4:	f04f 0120 	mov.w	r1, #32
 8004cb8:	f381 8811 	msr	BASEPRI, r1
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cbe:	48b7      	ldr	r0, [pc, #732]	; (8004f9c <_VPrintTarget+0x2f8>)
 8004cc0:	f7ff fbf0 	bl	80044a4 <_PreparePacket>
 8004cc4:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004cc6:	4bb5      	ldr	r3, [pc, #724]	; (8004f9c <_VPrintTarget+0x2f8>)
 8004cc8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004cea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 81a8 	beq.w	8005044 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cf8:	2b25      	cmp	r3, #37	; 0x25
 8004cfa:	f040 8195 	bne.w	8005028 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004d0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d12:	3b23      	subs	r3, #35	; 0x23
 8004d14:	2b0d      	cmp	r3, #13
 8004d16:	d83f      	bhi.n	8004d98 <_VPrintTarget+0xf4>
 8004d18:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <_VPrintTarget+0x7c>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d89 	.word	0x08004d89
 8004d24:	08004d99 	.word	0x08004d99
 8004d28:	08004d99 	.word	0x08004d99
 8004d2c:	08004d99 	.word	0x08004d99
 8004d30:	08004d99 	.word	0x08004d99
 8004d34:	08004d99 	.word	0x08004d99
 8004d38:	08004d99 	.word	0x08004d99
 8004d3c:	08004d99 	.word	0x08004d99
 8004d40:	08004d79 	.word	0x08004d79
 8004d44:	08004d99 	.word	0x08004d99
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d99 	.word	0x08004d99
 8004d50:	08004d99 	.word	0x08004d99
 8004d54:	08004d69 	.word	0x08004d69
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3301      	adds	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e01a      	b.n	8004d9e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d6a:	f043 0302 	orr.w	r3, r3, #2
 8004d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3301      	adds	r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	e012      	b.n	8004d9e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d7a:	f043 0304 	orr.w	r3, r3, #4
 8004d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3301      	adds	r3, #1
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	e00a      	b.n	8004d9e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8a:	f043 0308 	orr.w	r3, r3, #8
 8004d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3301      	adds	r3, #1
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e002      	b.n	8004d9e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d9c:	bf00      	nop
        }
      } while (v);
 8004d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1b0      	bne.n	8004d06 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004da4:	2300      	movs	r3, #0
 8004da6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004db0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004db4:	2b2f      	cmp	r3, #47	; 0x2f
 8004db6:	d912      	bls.n	8004dde <_VPrintTarget+0x13a>
 8004db8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dbc:	2b39      	cmp	r3, #57	; 0x39
 8004dbe:	d80e      	bhi.n	8004dde <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3b30      	subs	r3, #48	; 0x30
 8004dda:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004ddc:	e7e4      	b.n	8004da8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004dde:	2300      	movs	r3, #0
 8004de0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004dea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dee:	2b2e      	cmp	r3, #46	; 0x2e
 8004df0:	d11d      	bne.n	8004e2e <_VPrintTarget+0x18a>
        sFormat++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3301      	adds	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004e00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e04:	2b2f      	cmp	r3, #47	; 0x2f
 8004e06:	d912      	bls.n	8004e2e <_VPrintTarget+0x18a>
 8004e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e0c:	2b39      	cmp	r3, #57	; 0x39
 8004e0e:	d80e      	bhi.n	8004e2e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3301      	adds	r3, #1
 8004e14:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004e16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	461a      	mov	r2, r3
 8004e22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e26:	4413      	add	r3, r2
 8004e28:	3b30      	subs	r3, #48	; 0x30
 8004e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004e2c:	e7e4      	b.n	8004df8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004e36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e3a:	2b6c      	cmp	r3, #108	; 0x6c
 8004e3c:	d003      	beq.n	8004e46 <_VPrintTarget+0x1a2>
 8004e3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e42:	2b68      	cmp	r3, #104	; 0x68
 8004e44:	d107      	bne.n	8004e56 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3301      	adds	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004e54:	e7ef      	b.n	8004e36 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004e56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e5a:	2b25      	cmp	r3, #37	; 0x25
 8004e5c:	f000 80d8 	beq.w	8005010 <_VPrintTarget+0x36c>
 8004e60:	2b25      	cmp	r3, #37	; 0x25
 8004e62:	f2c0 80dc 	blt.w	800501e <_VPrintTarget+0x37a>
 8004e66:	2b78      	cmp	r3, #120	; 0x78
 8004e68:	f300 80d9 	bgt.w	800501e <_VPrintTarget+0x37a>
 8004e6c:	2b58      	cmp	r3, #88	; 0x58
 8004e6e:	f2c0 80d6 	blt.w	800501e <_VPrintTarget+0x37a>
 8004e72:	3b58      	subs	r3, #88	; 0x58
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	f200 80d2 	bhi.w	800501e <_VPrintTarget+0x37a>
 8004e7a:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <_VPrintTarget+0x1dc>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004f77 	.word	0x08004f77
 8004e84:	0800501f 	.word	0x0800501f
 8004e88:	0800501f 	.word	0x0800501f
 8004e8c:	0800501f 	.word	0x0800501f
 8004e90:	0800501f 	.word	0x0800501f
 8004e94:	0800501f 	.word	0x0800501f
 8004e98:	0800501f 	.word	0x0800501f
 8004e9c:	0800501f 	.word	0x0800501f
 8004ea0:	0800501f 	.word	0x0800501f
 8004ea4:	0800501f 	.word	0x0800501f
 8004ea8:	0800501f 	.word	0x0800501f
 8004eac:	08004f05 	.word	0x08004f05
 8004eb0:	08004f2b 	.word	0x08004f2b
 8004eb4:	0800501f 	.word	0x0800501f
 8004eb8:	0800501f 	.word	0x0800501f
 8004ebc:	0800501f 	.word	0x0800501f
 8004ec0:	0800501f 	.word	0x0800501f
 8004ec4:	0800501f 	.word	0x0800501f
 8004ec8:	0800501f 	.word	0x0800501f
 8004ecc:	0800501f 	.word	0x0800501f
 8004ed0:	0800501f 	.word	0x0800501f
 8004ed4:	0800501f 	.word	0x0800501f
 8004ed8:	0800501f 	.word	0x0800501f
 8004edc:	0800501f 	.word	0x0800501f
 8004ee0:	08004feb 	.word	0x08004feb
 8004ee4:	0800501f 	.word	0x0800501f
 8004ee8:	0800501f 	.word	0x0800501f
 8004eec:	08004fa1 	.word	0x08004fa1
 8004ef0:	0800501f 	.word	0x0800501f
 8004ef4:	08004f51 	.word	0x08004f51
 8004ef8:	0800501f 	.word	0x0800501f
 8004efc:	0800501f 	.word	0x0800501f
 8004f00:	08004f77 	.word	0x08004f77
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	1d19      	adds	r1, r3, #4
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6011      	str	r1, [r2, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8004f18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004f1c:	f107 0310 	add.w	r3, r7, #16
 8004f20:	4611      	mov	r1, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fd1c 	bl	8004960 <_StoreChar>
        break;
 8004f28:	e07a      	b.n	8005020 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	1d19      	adds	r1, r3, #4
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6011      	str	r1, [r2, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004f38:	f107 0010 	add.w	r0, r7, #16
 8004f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f46:	220a      	movs	r2, #10
 8004f48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f4a:	f7ff fe1b 	bl	8004b84 <_PrintInt>
        break;
 8004f4e:	e067      	b.n	8005020 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	1d19      	adds	r1, r3, #4
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6011      	str	r1, [r2, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004f5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f60:	f107 0010 	add.w	r0, r7, #16
 8004f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6e:	220a      	movs	r2, #10
 8004f70:	f7ff fd72 	bl	8004a58 <_PrintUnsigned>
        break;
 8004f74:	e054      	b.n	8005020 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	1d19      	adds	r1, r3, #4
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6011      	str	r1, [r2, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004f84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f86:	f107 0010 	add.w	r0, r7, #16
 8004f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f94:	2210      	movs	r2, #16
 8004f96:	f7ff fd5f 	bl	8004a58 <_PrintUnsigned>
        break;
 8004f9a:	e041      	b.n	8005020 <_VPrintTarget+0x37c>
 8004f9c:	20014398 	.word	0x20014398
      case 's':
        s = va_arg(*pParamList, const char*);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	1d19      	adds	r1, r3, #4
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6011      	str	r1, [r2, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8004fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <_VPrintTarget+0x314>
          s = "(null)";
 8004fb4:	4b4a      	ldr	r3, [pc, #296]	; (80050e0 <_VPrintTarget+0x43c>)
 8004fb6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8004fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8004fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8004fc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00b      	beq.n	8004fe6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004fce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004fd2:	f107 0310 	add.w	r3, r7, #16
 8004fd6:	4611      	mov	r1, r2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fcc1 	bl	8004960 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8004fe2:	d9e9      	bls.n	8004fb8 <_VPrintTarget+0x314>
        break;
 8004fe4:	e01c      	b.n	8005020 <_VPrintTarget+0x37c>
            break;
 8004fe6:	bf00      	nop
        break;
 8004fe8:	e01a      	b.n	8005020 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	1d19      	adds	r1, r3, #4
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6011      	str	r1, [r2, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004ff8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ffa:	f107 0010 	add.w	r0, r7, #16
 8004ffe:	2300      	movs	r3, #0
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	2308      	movs	r3, #8
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	2308      	movs	r3, #8
 8005008:	2210      	movs	r2, #16
 800500a:	f7ff fd25 	bl	8004a58 <_PrintUnsigned>
        break;
 800500e:	e007      	b.n	8005020 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005010:	f107 0310 	add.w	r3, r7, #16
 8005014:	2125      	movs	r1, #37	; 0x25
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fca2 	bl	8004960 <_StoreChar>
        break;
 800501c:	e000      	b.n	8005020 <_VPrintTarget+0x37c>
      default:
        break;
 800501e:	bf00      	nop
      }
      sFormat++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e007      	b.n	8005038 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005028:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800502c:	f107 0310 	add.w	r3, r7, #16
 8005030:	4611      	mov	r1, r2
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fc94 	bl	8004960 <_StoreChar>
    }
  } while (*sFormat);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f47f ae4d 	bne.w	8004cdc <_VPrintTarget+0x38>
 8005042:	e000      	b.n	8005046 <_VPrintTarget+0x3a2>
      break;
 8005044:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d041      	beq.n	80050d0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800504c:	6a3a      	ldr	r2, [r7, #32]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	63bb      	str	r3, [r7, #56]	; 0x38
 800505c:	e00b      	b.n	8005076 <_VPrintTarget+0x3d2>
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	b2da      	uxtb	r2, r3
 8005062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005064:	1c59      	adds	r1, r3, #1
 8005066:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	09db      	lsrs	r3, r3, #7
 8005074:	63bb      	str	r3, [r7, #56]	; 0x38
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	2b7f      	cmp	r3, #127	; 0x7f
 800507a:	d8f0      	bhi.n	800505e <_VPrintTarget+0x3ba>
 800507c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800508a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
 8005090:	2300      	movs	r3, #0
 8005092:	633b      	str	r3, [r7, #48]	; 0x30
 8005094:	e00b      	b.n	80050ae <_VPrintTarget+0x40a>
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	b2da      	uxtb	r2, r3
 800509a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509c:	1c59      	adds	r1, r3, #1
 800509e:	6379      	str	r1, [r7, #52]	; 0x34
 80050a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	09db      	lsrs	r3, r3, #7
 80050ac:	633b      	str	r3, [r7, #48]	; 0x30
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	2b7f      	cmp	r3, #127	; 0x7f
 80050b2:	d8f0      	bhi.n	8005096 <_VPrintTarget+0x3f2>
 80050b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	637a      	str	r2, [r7, #52]	; 0x34
 80050ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	6979      	ldr	r1, [r7, #20]
 80050c8:	221a      	movs	r2, #26
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff fad8 	bl	8004680 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80050d6:	bf00      	nop
 80050d8:	3758      	adds	r7, #88	; 0x58
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	08006900 	.word	0x08006900

080050e4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80050f2:	2300      	movs	r3, #0
 80050f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050f8:	4917      	ldr	r1, [pc, #92]	; (8005158 <SEGGER_SYSVIEW_Init+0x74>)
 80050fa:	4818      	ldr	r0, [pc, #96]	; (800515c <SEGGER_SYSVIEW_Init+0x78>)
 80050fc:	f7ff f8d2 	bl	80042a4 <SEGGER_RTT_AllocUpBuffer>
 8005100:	4603      	mov	r3, r0
 8005102:	b2da      	uxtb	r2, r3
 8005104:	4b16      	ldr	r3, [pc, #88]	; (8005160 <SEGGER_SYSVIEW_Init+0x7c>)
 8005106:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005108:	4b15      	ldr	r3, [pc, #84]	; (8005160 <SEGGER_SYSVIEW_Init+0x7c>)
 800510a:	785a      	ldrb	r2, [r3, #1]
 800510c:	4b14      	ldr	r3, [pc, #80]	; (8005160 <SEGGER_SYSVIEW_Init+0x7c>)
 800510e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005110:	4b13      	ldr	r3, [pc, #76]	; (8005160 <SEGGER_SYSVIEW_Init+0x7c>)
 8005112:	7e1b      	ldrb	r3, [r3, #24]
 8005114:	4618      	mov	r0, r3
 8005116:	2300      	movs	r3, #0
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	2308      	movs	r3, #8
 800511c:	4a11      	ldr	r2, [pc, #68]	; (8005164 <SEGGER_SYSVIEW_Init+0x80>)
 800511e:	490f      	ldr	r1, [pc, #60]	; (800515c <SEGGER_SYSVIEW_Init+0x78>)
 8005120:	f7ff f944 	bl	80043ac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005124:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <SEGGER_SYSVIEW_Init+0x7c>)
 8005126:	2200      	movs	r2, #0
 8005128:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800512a:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <SEGGER_SYSVIEW_Init+0x84>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a0c      	ldr	r2, [pc, #48]	; (8005160 <SEGGER_SYSVIEW_Init+0x7c>)
 8005130:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005132:	4a0b      	ldr	r2, [pc, #44]	; (8005160 <SEGGER_SYSVIEW_Init+0x7c>)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005138:	4a09      	ldr	r2, [pc, #36]	; (8005160 <SEGGER_SYSVIEW_Init+0x7c>)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800513e:	4a08      	ldr	r2, [pc, #32]	; (8005160 <SEGGER_SYSVIEW_Init+0x7c>)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005144:	4a06      	ldr	r2, [pc, #24]	; (8005160 <SEGGER_SYSVIEW_Init+0x7c>)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800514a:	4b05      	ldr	r3, [pc, #20]	; (8005160 <SEGGER_SYSVIEW_Init+0x7c>)
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005150:	bf00      	nop
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20013360 	.word	0x20013360
 800515c:	08006908 	.word	0x08006908
 8005160:	20014368 	.word	0x20014368
 8005164:	20014360 	.word	0x20014360
 8005168:	e0001004 	.word	0xe0001004

0800516c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005174:	4a04      	ldr	r2, [pc, #16]	; (8005188 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6113      	str	r3, [r2, #16]
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	20014368 	.word	0x20014368

0800518c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005194:	f3ef 8311 	mrs	r3, BASEPRI
 8005198:	f04f 0120 	mov.w	r1, #32
 800519c:	f381 8811 	msr	BASEPRI, r1
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	4808      	ldr	r0, [pc, #32]	; (80051c4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80051a4:	f7ff f97e 	bl	80044a4 <_PreparePacket>
 80051a8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	68b8      	ldr	r0, [r7, #8]
 80051b0:	f7ff fa66 	bl	8004680 <_SendPacket>
  RECORD_END();
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f383 8811 	msr	BASEPRI, r3
}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20014398 	.word	0x20014398

080051c8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80051d2:	f3ef 8311 	mrs	r3, BASEPRI
 80051d6:	f04f 0120 	mov.w	r1, #32
 80051da:	f381 8811 	msr	BASEPRI, r1
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	4816      	ldr	r0, [pc, #88]	; (800523c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80051e2:	f7ff f95f 	bl	80044a4 <_PreparePacket>
 80051e6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	61fb      	str	r3, [r7, #28]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	e00b      	b.n	800520e <SEGGER_SYSVIEW_RecordU32+0x46>
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	1c59      	adds	r1, r3, #1
 80051fe:	61f9      	str	r1, [r7, #28]
 8005200:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	09db      	lsrs	r3, r3, #7
 800520c:	61bb      	str	r3, [r7, #24]
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b7f      	cmp	r3, #127	; 0x7f
 8005212:	d8f0      	bhi.n	80051f6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	61fa      	str	r2, [r7, #28]
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	6938      	ldr	r0, [r7, #16]
 800522a:	f7ff fa29 	bl	8004680 <_SendPacket>
  RECORD_END();
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f383 8811 	msr	BASEPRI, r3
}
 8005234:	bf00      	nop
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20014398 	.word	0x20014398

08005240 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b08c      	sub	sp, #48	; 0x30
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800524c:	f3ef 8311 	mrs	r3, BASEPRI
 8005250:	f04f 0120 	mov.w	r1, #32
 8005254:	f381 8811 	msr	BASEPRI, r1
 8005258:	61fb      	str	r3, [r7, #28]
 800525a:	4825      	ldr	r0, [pc, #148]	; (80052f0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800525c:	f7ff f922 	bl	80044a4 <_PreparePacket>
 8005260:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	62bb      	str	r3, [r7, #40]	; 0x28
 800526e:	e00b      	b.n	8005288 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	b2da      	uxtb	r2, r3
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	1c59      	adds	r1, r3, #1
 8005278:	62f9      	str	r1, [r7, #44]	; 0x2c
 800527a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	09db      	lsrs	r3, r3, #7
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	2b7f      	cmp	r3, #127	; 0x7f
 800528c:	d8f0      	bhi.n	8005270 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	623b      	str	r3, [r7, #32]
 80052a6:	e00b      	b.n	80052c0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	1c59      	adds	r1, r3, #1
 80052b0:	6279      	str	r1, [r7, #36]	; 0x24
 80052b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	09db      	lsrs	r3, r3, #7
 80052be:	623b      	str	r3, [r7, #32]
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	2b7f      	cmp	r3, #127	; 0x7f
 80052c4:	d8f0      	bhi.n	80052a8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	627a      	str	r2, [r7, #36]	; 0x24
 80052cc:	6a3a      	ldr	r2, [r7, #32]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	6979      	ldr	r1, [r7, #20]
 80052da:	69b8      	ldr	r0, [r7, #24]
 80052dc:	f7ff f9d0 	bl	8004680 <_SendPacket>
  RECORD_END();
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f383 8811 	msr	BASEPRI, r3
}
 80052e6:	bf00      	nop
 80052e8:	3730      	adds	r7, #48	; 0x30
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20014398 	.word	0x20014398

080052f4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08c      	sub	sp, #48	; 0x30
 80052f8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80052fa:	4b59      	ldr	r3, [pc, #356]	; (8005460 <SEGGER_SYSVIEW_Start+0x16c>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005300:	f3ef 8311 	mrs	r3, BASEPRI
 8005304:	f04f 0120 	mov.w	r1, #32
 8005308:	f381 8811 	msr	BASEPRI, r1
 800530c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800530e:	4b54      	ldr	r3, [pc, #336]	; (8005460 <SEGGER_SYSVIEW_Start+0x16c>)
 8005310:	785b      	ldrb	r3, [r3, #1]
 8005312:	220a      	movs	r2, #10
 8005314:	4953      	ldr	r1, [pc, #332]	; (8005464 <SEGGER_SYSVIEW_Start+0x170>)
 8005316:	4618      	mov	r0, r3
 8005318:	f7fa ff6a 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005322:	f7fe fc8f 	bl	8003c44 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005326:	200a      	movs	r0, #10
 8005328:	f7ff ff30 	bl	800518c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800532c:	f3ef 8311 	mrs	r3, BASEPRI
 8005330:	f04f 0120 	mov.w	r1, #32
 8005334:	f381 8811 	msr	BASEPRI, r1
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	484b      	ldr	r0, [pc, #300]	; (8005468 <SEGGER_SYSVIEW_Start+0x174>)
 800533c:	f7ff f8b2 	bl	80044a4 <_PreparePacket>
 8005340:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534a:	4b45      	ldr	r3, [pc, #276]	; (8005460 <SEGGER_SYSVIEW_Start+0x16c>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005350:	e00b      	b.n	800536a <SEGGER_SYSVIEW_Start+0x76>
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	b2da      	uxtb	r2, r3
 8005356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005358:	1c59      	adds	r1, r3, #1
 800535a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800535c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	09db      	lsrs	r3, r3, #7
 8005368:	62bb      	str	r3, [r7, #40]	; 0x28
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	2b7f      	cmp	r3, #127	; 0x7f
 800536e:	d8f0      	bhi.n	8005352 <SEGGER_SYSVIEW_Start+0x5e>
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
 8005384:	4b36      	ldr	r3, [pc, #216]	; (8005460 <SEGGER_SYSVIEW_Start+0x16c>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	623b      	str	r3, [r7, #32]
 800538a:	e00b      	b.n	80053a4 <SEGGER_SYSVIEW_Start+0xb0>
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	1c59      	adds	r1, r3, #1
 8005394:	6279      	str	r1, [r7, #36]	; 0x24
 8005396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	09db      	lsrs	r3, r3, #7
 80053a2:	623b      	str	r3, [r7, #32]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	2b7f      	cmp	r3, #127	; 0x7f
 80053a8:	d8f0      	bhi.n	800538c <SEGGER_SYSVIEW_Start+0x98>
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	627a      	str	r2, [r7, #36]	; 0x24
 80053b0:	6a3a      	ldr	r2, [r7, #32]
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	4b28      	ldr	r3, [pc, #160]	; (8005460 <SEGGER_SYSVIEW_Start+0x16c>)
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	e00b      	b.n	80053de <SEGGER_SYSVIEW_Start+0xea>
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	1c59      	adds	r1, r3, #1
 80053ce:	61f9      	str	r1, [r7, #28]
 80053d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	09db      	lsrs	r3, r3, #7
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b7f      	cmp	r3, #127	; 0x7f
 80053e2:	d8f0      	bhi.n	80053c6 <SEGGER_SYSVIEW_Start+0xd2>
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	61fa      	str	r2, [r7, #28]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	2300      	movs	r3, #0
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	e00b      	b.n	8005416 <SEGGER_SYSVIEW_Start+0x122>
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	b2da      	uxtb	r2, r3
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	1c59      	adds	r1, r3, #1
 8005406:	6179      	str	r1, [r7, #20]
 8005408:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	09db      	lsrs	r3, r3, #7
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b7f      	cmp	r3, #127	; 0x7f
 800541a:	d8f0      	bhi.n	80053fe <SEGGER_SYSVIEW_Start+0x10a>
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	617a      	str	r2, [r7, #20]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800542c:	2218      	movs	r2, #24
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff f925 	bl	8004680 <_SendPacket>
      RECORD_END();
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800543c:	4b08      	ldr	r3, [pc, #32]	; (8005460 <SEGGER_SYSVIEW_Start+0x16c>)
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005444:	4b06      	ldr	r3, [pc, #24]	; (8005460 <SEGGER_SYSVIEW_Start+0x16c>)
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800544a:	f000 f9eb 	bl	8005824 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800544e:	f000 f9b1 	bl	80057b4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005452:	f000 fc1d 	bl	8005c90 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005456:	bf00      	nop
 8005458:	3730      	adds	r7, #48	; 0x30
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20014368 	.word	0x20014368
 8005464:	08006948 	.word	0x08006948
 8005468:	20014398 	.word	0x20014398

0800546c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005472:	f3ef 8311 	mrs	r3, BASEPRI
 8005476:	f04f 0120 	mov.w	r1, #32
 800547a:	f381 8811 	msr	BASEPRI, r1
 800547e:	607b      	str	r3, [r7, #4]
 8005480:	480b      	ldr	r0, [pc, #44]	; (80054b0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005482:	f7ff f80f 	bl	80044a4 <_PreparePacket>
 8005486:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005488:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005490:	220b      	movs	r2, #11
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6838      	ldr	r0, [r7, #0]
 8005496:	f7ff f8f3 	bl	8004680 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f383 8811 	msr	BASEPRI, r3
}
 80054a6:	bf00      	nop
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20014398 	.word	0x20014398
 80054b4:	20014368 	.word	0x20014368

080054b8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08c      	sub	sp, #48	; 0x30
 80054bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80054be:	f3ef 8311 	mrs	r3, BASEPRI
 80054c2:	f04f 0120 	mov.w	r1, #32
 80054c6:	f381 8811 	msr	BASEPRI, r1
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	4845      	ldr	r0, [pc, #276]	; (80055e4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80054ce:	f7fe ffe9 	bl	80044a4 <_PreparePacket>
 80054d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054dc:	4b42      	ldr	r3, [pc, #264]	; (80055e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e2:	e00b      	b.n	80054fc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	1c59      	adds	r1, r3, #1
 80054ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	09db      	lsrs	r3, r3, #7
 80054fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80054fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005500:	d8f0      	bhi.n	80054e4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
 8005516:	4b34      	ldr	r3, [pc, #208]	; (80055e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	623b      	str	r3, [r7, #32]
 800551c:	e00b      	b.n	8005536 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	b2da      	uxtb	r2, r3
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	1c59      	adds	r1, r3, #1
 8005526:	6279      	str	r1, [r7, #36]	; 0x24
 8005528:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	09db      	lsrs	r3, r3, #7
 8005534:	623b      	str	r3, [r7, #32]
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	2b7f      	cmp	r3, #127	; 0x7f
 800553a:	d8f0      	bhi.n	800551e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	627a      	str	r2, [r7, #36]	; 0x24
 8005542:	6a3a      	ldr	r2, [r7, #32]
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	61fb      	str	r3, [r7, #28]
 8005550:	4b25      	ldr	r3, [pc, #148]	; (80055e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	e00b      	b.n	8005570 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	b2da      	uxtb	r2, r3
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	1c59      	adds	r1, r3, #1
 8005560:	61f9      	str	r1, [r7, #28]
 8005562:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	09db      	lsrs	r3, r3, #7
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b7f      	cmp	r3, #127	; 0x7f
 8005574:	d8f0      	bhi.n	8005558 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	61fa      	str	r2, [r7, #28]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	e00b      	b.n	80055a8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	b2da      	uxtb	r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	1c59      	adds	r1, r3, #1
 8005598:	6179      	str	r1, [r7, #20]
 800559a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	09db      	lsrs	r3, r3, #7
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b7f      	cmp	r3, #127	; 0x7f
 80055ac:	d8f0      	bhi.n	8005590 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	617a      	str	r2, [r7, #20]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80055be:	2218      	movs	r2, #24
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	68b8      	ldr	r0, [r7, #8]
 80055c4:	f7ff f85c 	bl	8004680 <_SendPacket>
  RECORD_END();
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80055ce:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80055d6:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	4798      	blx	r3
  }
}
 80055dc:	bf00      	nop
 80055de:	3730      	adds	r7, #48	; 0x30
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20014398 	.word	0x20014398
 80055e8:	20014368 	.word	0x20014368

080055ec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b092      	sub	sp, #72	; 0x48
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80055f4:	f3ef 8311 	mrs	r3, BASEPRI
 80055f8:	f04f 0120 	mov.w	r1, #32
 80055fc:	f381 8811 	msr	BASEPRI, r1
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	486a      	ldr	r0, [pc, #424]	; (80057ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005604:	f7fe ff4e 	bl	80044a4 <_PreparePacket>
 8005608:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	647b      	str	r3, [r7, #68]	; 0x44
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4b66      	ldr	r3, [pc, #408]	; (80057b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	643b      	str	r3, [r7, #64]	; 0x40
 800561e:	e00b      	b.n	8005638 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005622:	b2da      	uxtb	r2, r3
 8005624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005626:	1c59      	adds	r1, r3, #1
 8005628:	6479      	str	r1, [r7, #68]	; 0x44
 800562a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005634:	09db      	lsrs	r3, r3, #7
 8005636:	643b      	str	r3, [r7, #64]	; 0x40
 8005638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563a:	2b7f      	cmp	r3, #127	; 0x7f
 800563c:	d8f0      	bhi.n	8005620 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800563e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	647a      	str	r2, [r7, #68]	; 0x44
 8005644:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	63bb      	str	r3, [r7, #56]	; 0x38
 8005658:	e00b      	b.n	8005672 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	b2da      	uxtb	r2, r3
 800565e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005660:	1c59      	adds	r1, r3, #1
 8005662:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005664:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	09db      	lsrs	r3, r3, #7
 8005670:	63bb      	str	r3, [r7, #56]	; 0x38
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	2b7f      	cmp	r3, #127	; 0x7f
 8005676:	d8f0      	bhi.n	800565a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800567e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005686:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	4619      	mov	r1, r3
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f7fe fed7 	bl	8004444 <_EncodeStr>
 8005696:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005698:	2209      	movs	r2, #9
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	6938      	ldr	r0, [r7, #16]
 800569e:	f7fe ffef 	bl	8004680 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4b40      	ldr	r3, [pc, #256]	; (80057b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	633b      	str	r3, [r7, #48]	; 0x30
 80056b6:	e00b      	b.n	80056d0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056be:	1c59      	adds	r1, r3, #1
 80056c0:	6379      	str	r1, [r7, #52]	; 0x34
 80056c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	09db      	lsrs	r3, r3, #7
 80056ce:	633b      	str	r3, [r7, #48]	; 0x30
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	2b7f      	cmp	r3, #127	; 0x7f
 80056d4:	d8f0      	bhi.n	80056b8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80056d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	637a      	str	r2, [r7, #52]	; 0x34
 80056dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f0:	e00b      	b.n	800570a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	1c59      	adds	r1, r3, #1
 80056fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	09db      	lsrs	r3, r3, #7
 8005708:	62bb      	str	r3, [r7, #40]	; 0x28
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	2b7f      	cmp	r3, #127	; 0x7f
 800570e:	d8f0      	bhi.n	80056f2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	623b      	str	r3, [r7, #32]
 800572a:	e00b      	b.n	8005744 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	b2da      	uxtb	r2, r3
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	1c59      	adds	r1, r3, #1
 8005734:	6279      	str	r1, [r7, #36]	; 0x24
 8005736:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	09db      	lsrs	r3, r3, #7
 8005742:	623b      	str	r3, [r7, #32]
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	2b7f      	cmp	r3, #127	; 0x7f
 8005748:	d8f0      	bhi.n	800572c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	627a      	str	r2, [r7, #36]	; 0x24
 8005750:	6a3a      	ldr	r2, [r7, #32]
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	2300      	movs	r3, #0
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	e00b      	b.n	800577c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	b2da      	uxtb	r2, r3
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	1c59      	adds	r1, r3, #1
 800576c:	61f9      	str	r1, [r7, #28]
 800576e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	09db      	lsrs	r3, r3, #7
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b7f      	cmp	r3, #127	; 0x7f
 8005780:	d8f0      	bhi.n	8005764 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	61fa      	str	r2, [r7, #28]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005792:	2215      	movs	r2, #21
 8005794:	68f9      	ldr	r1, [r7, #12]
 8005796:	6938      	ldr	r0, [r7, #16]
 8005798:	f7fe ff72 	bl	8004680 <_SendPacket>
  RECORD_END();
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f383 8811 	msr	BASEPRI, r3
}
 80057a2:	bf00      	nop
 80057a4:	3748      	adds	r7, #72	; 0x48
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20014398 	.word	0x20014398
 80057b0:	20014368 	.word	0x20014368

080057b4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80057b8:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80057ca:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	4798      	blx	r3
  }
}
 80057d2:	bf00      	nop
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20014368 	.word	0x20014368

080057dc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057e4:	f3ef 8311 	mrs	r3, BASEPRI
 80057e8:	f04f 0120 	mov.w	r1, #32
 80057ec:	f381 8811 	msr	BASEPRI, r1
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	480b      	ldr	r0, [pc, #44]	; (8005820 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80057f4:	f7fe fe56 	bl	80044a4 <_PreparePacket>
 80057f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057fa:	2280      	movs	r2, #128	; 0x80
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	6938      	ldr	r0, [r7, #16]
 8005800:	f7fe fe20 	bl	8004444 <_EncodeStr>
 8005804:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005806:	220e      	movs	r2, #14
 8005808:	68f9      	ldr	r1, [r7, #12]
 800580a:	6938      	ldr	r0, [r7, #16]
 800580c:	f7fe ff38 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f383 8811 	msr	BASEPRI, r3
}
 8005816:	bf00      	nop
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20014398 	.word	0x20014398

08005824 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005824:	b590      	push	{r4, r7, lr}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800582a:	4b15      	ldr	r3, [pc, #84]	; (8005880 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01a      	beq.n	8005868 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005832:	4b13      	ldr	r3, [pc, #76]	; (8005880 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d015      	beq.n	8005868 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800583c:	4b10      	ldr	r3, [pc, #64]	; (8005880 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4798      	blx	r3
 8005844:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005848:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800584a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	f04f 0300 	mov.w	r3, #0
 8005856:	000a      	movs	r2, r1
 8005858:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800585a:	4613      	mov	r3, r2
 800585c:	461a      	mov	r2, r3
 800585e:	4621      	mov	r1, r4
 8005860:	200d      	movs	r0, #13
 8005862:	f7ff fced 	bl	8005240 <SEGGER_SYSVIEW_RecordU32x2>
 8005866:	e006      	b.n	8005876 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005868:	4b06      	ldr	r3, [pc, #24]	; (8005884 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4619      	mov	r1, r3
 800586e:	200c      	movs	r0, #12
 8005870:	f7ff fcaa 	bl	80051c8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	bd90      	pop	{r4, r7, pc}
 800587e:	bf00      	nop
 8005880:	20014368 	.word	0x20014368
 8005884:	e0001004 	.word	0xe0001004

08005888 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800588e:	f3ef 8311 	mrs	r3, BASEPRI
 8005892:	f04f 0120 	mov.w	r1, #32
 8005896:	f381 8811 	msr	BASEPRI, r1
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	4819      	ldr	r0, [pc, #100]	; (8005904 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800589e:	f7fe fe01 	bl	80044a4 <_PreparePacket>
 80058a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80058a8:	4b17      	ldr	r3, [pc, #92]	; (8005908 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	e00b      	b.n	80058d4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	1c59      	adds	r1, r3, #1
 80058c4:	6179      	str	r1, [r7, #20]
 80058c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	09db      	lsrs	r3, r3, #7
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2b7f      	cmp	r3, #127	; 0x7f
 80058d8:	d8f0      	bhi.n	80058bc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	617a      	str	r2, [r7, #20]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80058ea:	2202      	movs	r2, #2
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	68b8      	ldr	r0, [r7, #8]
 80058f0:	f7fe fec6 	bl	8004680 <_SendPacket>
  RECORD_END();
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f383 8811 	msr	BASEPRI, r3
}
 80058fa:	bf00      	nop
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20014398 	.word	0x20014398
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005912:	f3ef 8311 	mrs	r3, BASEPRI
 8005916:	f04f 0120 	mov.w	r1, #32
 800591a:	f381 8811 	msr	BASEPRI, r1
 800591e:	607b      	str	r3, [r7, #4]
 8005920:	4807      	ldr	r0, [pc, #28]	; (8005940 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005922:	f7fe fdbf 	bl	80044a4 <_PreparePacket>
 8005926:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005928:	2203      	movs	r2, #3
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	6838      	ldr	r0, [r7, #0]
 800592e:	f7fe fea7 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f383 8811 	msr	BASEPRI, r3
}
 8005938:	bf00      	nop
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	20014398 	.word	0x20014398

08005944 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800594a:	f3ef 8311 	mrs	r3, BASEPRI
 800594e:	f04f 0120 	mov.w	r1, #32
 8005952:	f381 8811 	msr	BASEPRI, r1
 8005956:	607b      	str	r3, [r7, #4]
 8005958:	4807      	ldr	r0, [pc, #28]	; (8005978 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800595a:	f7fe fda3 	bl	80044a4 <_PreparePacket>
 800595e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005960:	2212      	movs	r2, #18
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6838      	ldr	r0, [r7, #0]
 8005966:	f7fe fe8b 	bl	8004680 <_SendPacket>
  RECORD_END();
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f383 8811 	msr	BASEPRI, r3
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20014398 	.word	0x20014398

0800597c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005982:	f3ef 8311 	mrs	r3, BASEPRI
 8005986:	f04f 0120 	mov.w	r1, #32
 800598a:	f381 8811 	msr	BASEPRI, r1
 800598e:	607b      	str	r3, [r7, #4]
 8005990:	4807      	ldr	r0, [pc, #28]	; (80059b0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005992:	f7fe fd87 	bl	80044a4 <_PreparePacket>
 8005996:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005998:	2211      	movs	r2, #17
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6838      	ldr	r0, [r7, #0]
 800599e:	f7fe fe6f 	bl	8004680 <_SendPacket>
  RECORD_END();
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f383 8811 	msr	BASEPRI, r3
}
 80059a8:	bf00      	nop
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20014398 	.word	0x20014398

080059b4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059bc:	f3ef 8311 	mrs	r3, BASEPRI
 80059c0:	f04f 0120 	mov.w	r1, #32
 80059c4:	f381 8811 	msr	BASEPRI, r1
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	4819      	ldr	r0, [pc, #100]	; (8005a30 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80059cc:	f7fe fd6a 	bl	80044a4 <_PreparePacket>
 80059d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059d6:	4b17      	ldr	r3, [pc, #92]	; (8005a34 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	e00b      	b.n	8005a02 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	1c59      	adds	r1, r3, #1
 80059f2:	61f9      	str	r1, [r7, #28]
 80059f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	09db      	lsrs	r3, r3, #7
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b7f      	cmp	r3, #127	; 0x7f
 8005a06:	d8f0      	bhi.n	80059ea <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	61fa      	str	r2, [r7, #28]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005a18:	2208      	movs	r2, #8
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	6938      	ldr	r0, [r7, #16]
 8005a1e:	f7fe fe2f 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f383 8811 	msr	BASEPRI, r3
}
 8005a28:	bf00      	nop
 8005a2a:	3720      	adds	r7, #32
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20014398 	.word	0x20014398
 8005a34:	20014368 	.word	0x20014368

08005a38 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a40:	f3ef 8311 	mrs	r3, BASEPRI
 8005a44:	f04f 0120 	mov.w	r1, #32
 8005a48:	f381 8811 	msr	BASEPRI, r1
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	4819      	ldr	r0, [pc, #100]	; (8005ab4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005a50:	f7fe fd28 	bl	80044a4 <_PreparePacket>
 8005a54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a5a:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	e00b      	b.n	8005a86 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	1c59      	adds	r1, r3, #1
 8005a76:	61f9      	str	r1, [r7, #28]
 8005a78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	09db      	lsrs	r3, r3, #7
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2b7f      	cmp	r3, #127	; 0x7f
 8005a8a:	d8f0      	bhi.n	8005a6e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	61fa      	str	r2, [r7, #28]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005a9c:	2204      	movs	r2, #4
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	6938      	ldr	r0, [r7, #16]
 8005aa2:	f7fe fded 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f383 8811 	msr	BASEPRI, r3
}
 8005aac:	bf00      	nop
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20014398 	.word	0x20014398
 8005ab8:	20014368 	.word	0x20014368

08005abc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac8:	f04f 0120 	mov.w	r1, #32
 8005acc:	f381 8811 	msr	BASEPRI, r1
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	4819      	ldr	r0, [pc, #100]	; (8005b38 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005ad4:	f7fe fce6 	bl	80044a4 <_PreparePacket>
 8005ad8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ade:	4b17      	ldr	r3, [pc, #92]	; (8005b3c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	61fb      	str	r3, [r7, #28]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	61bb      	str	r3, [r7, #24]
 8005af0:	e00b      	b.n	8005b0a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	1c59      	adds	r1, r3, #1
 8005afa:	61f9      	str	r1, [r7, #28]
 8005afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	09db      	lsrs	r3, r3, #7
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b0e:	d8f0      	bhi.n	8005af2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	61fa      	str	r2, [r7, #28]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005b20:	2206      	movs	r2, #6
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	6938      	ldr	r0, [r7, #16]
 8005b26:	f7fe fdab 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f383 8811 	msr	BASEPRI, r3
}
 8005b30:	bf00      	nop
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20014398 	.word	0x20014398
 8005b3c:	20014368 	.word	0x20014368

08005b40 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	4603      	mov	r3, r0
 8005b48:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005b4a:	4b40      	ldr	r3, [pc, #256]	; (8005c4c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d077      	beq.n	8005c42 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005b52:	4b3e      	ldr	r3, [pc, #248]	; (8005c4c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005b58:	2300      	movs	r3, #0
 8005b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5c:	e008      	b.n	8005b70 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d3f2      	bcc.n	8005b5e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005b78:	e000      	b.n	8005b7c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005b7a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d055      	beq.n	8005c2e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b82:	f3ef 8311 	mrs	r3, BASEPRI
 8005b86:	f04f 0120 	mov.w	r1, #32
 8005b8a:	f381 8811 	msr	BASEPRI, r1
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	482f      	ldr	r0, [pc, #188]	; (8005c50 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005b92:	f7fe fc87 	bl	80044a4 <_PreparePacket>
 8005b96:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	623b      	str	r3, [r7, #32]
 8005ba4:	e00b      	b.n	8005bbe <SEGGER_SYSVIEW_SendModule+0x7e>
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	1c59      	adds	r1, r3, #1
 8005bae:	6279      	str	r1, [r7, #36]	; 0x24
 8005bb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	09db      	lsrs	r3, r3, #7
 8005bbc:	623b      	str	r3, [r7, #32]
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc2:	d8f0      	bhi.n	8005ba6 <SEGGER_SYSVIEW_SendModule+0x66>
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	627a      	str	r2, [r7, #36]	; 0x24
 8005bca:	6a3a      	ldr	r2, [r7, #32]
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	701a      	strb	r2, [r3, #0]
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	e00b      	b.n	8005bf8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	1c59      	adds	r1, r3, #1
 8005be8:	61f9      	str	r1, [r7, #28]
 8005bea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	09db      	lsrs	r3, r3, #7
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8005bfc:	d8f0      	bhi.n	8005be0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	61fa      	str	r2, [r7, #28]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2280      	movs	r2, #128	; 0x80
 8005c14:	4619      	mov	r1, r3
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7fe fc14 	bl	8004444 <_EncodeStr>
 8005c1c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005c1e:	2216      	movs	r2, #22
 8005c20:	68f9      	ldr	r1, [r7, #12]
 8005c22:	6938      	ldr	r0, [r7, #16]
 8005c24:	f7fe fd2c 	bl	8004680 <_SendPacket>
      RECORD_END();
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d006      	beq.n	8005c42 <SEGGER_SYSVIEW_SendModule+0x102>
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4798      	blx	r3
    }
  }
}
 8005c42:	bf00      	nop
 8005c44:	3730      	adds	r7, #48	; 0x30
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20014390 	.word	0x20014390
 8005c50:	20014398 	.word	0x20014398

08005c54 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005c5a:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00f      	beq.n	8005c82 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005c62:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f2      	bne.n	8005c68 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20014390 	.word	0x20014390

08005c90 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005c96:	f3ef 8311 	mrs	r3, BASEPRI
 8005c9a:	f04f 0120 	mov.w	r1, #32
 8005c9e:	f381 8811 	msr	BASEPRI, r1
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	4817      	ldr	r0, [pc, #92]	; (8005d04 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005ca6:	f7fe fbfd 	bl	80044a4 <_PreparePacket>
 8005caa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	4b14      	ldr	r3, [pc, #80]	; (8005d08 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e00b      	b.n	8005cd4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	6179      	str	r1, [r7, #20]
 8005cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	09db      	lsrs	r3, r3, #7
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd8:	d8f0      	bhi.n	8005cbc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	617a      	str	r2, [r7, #20]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005cea:	221b      	movs	r2, #27
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	68b8      	ldr	r0, [r7, #8]
 8005cf0:	f7fe fcc6 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f383 8811 	msr	BASEPRI, r3
}
 8005cfa:	bf00      	nop
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20014398 	.word	0x20014398
 8005d08:	20014394 	.word	0x20014394

08005d0c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005d0c:	b40f      	push	{r0, r1, r2, r3}
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005d14:	f107 0314 	add.w	r3, r7, #20
 8005d18:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005d1a:	1d3b      	adds	r3, r7, #4
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2100      	movs	r1, #0
 8005d20:	6938      	ldr	r0, [r7, #16]
 8005d22:	f7fe ffbf 	bl	8004ca4 <_VPrintTarget>
  va_end(ParamList);
}
 8005d26:	bf00      	nop
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d30:	b004      	add	sp, #16
 8005d32:	4770      	bx	lr

08005d34 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08a      	sub	sp, #40	; 0x28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d40:	f04f 0120 	mov.w	r1, #32
 8005d44:	f381 8811 	msr	BASEPRI, r1
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	4827      	ldr	r0, [pc, #156]	; (8005de8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005d4c:	f7fe fbaa 	bl	80044a4 <_PreparePacket>
 8005d50:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d52:	2280      	movs	r2, #128	; 0x80
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	6938      	ldr	r0, [r7, #16]
 8005d58:	f7fe fb74 	bl	8004444 <_EncodeStr>
 8005d5c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
 8005d62:	2301      	movs	r3, #1
 8005d64:	623b      	str	r3, [r7, #32]
 8005d66:	e00b      	b.n	8005d80 <SEGGER_SYSVIEW_Warn+0x4c>
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	6279      	str	r1, [r7, #36]	; 0x24
 8005d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	09db      	lsrs	r3, r3, #7
 8005d7e:	623b      	str	r3, [r7, #32]
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	2b7f      	cmp	r3, #127	; 0x7f
 8005d84:	d8f0      	bhi.n	8005d68 <SEGGER_SYSVIEW_Warn+0x34>
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d8c:	6a3a      	ldr	r2, [r7, #32]
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61bb      	str	r3, [r7, #24]
 8005d9e:	e00b      	b.n	8005db8 <SEGGER_SYSVIEW_Warn+0x84>
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	1c59      	adds	r1, r3, #1
 8005da8:	61f9      	str	r1, [r7, #28]
 8005daa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	09db      	lsrs	r3, r3, #7
 8005db6:	61bb      	str	r3, [r7, #24]
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	2b7f      	cmp	r3, #127	; 0x7f
 8005dbc:	d8f0      	bhi.n	8005da0 <SEGGER_SYSVIEW_Warn+0x6c>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	61fa      	str	r2, [r7, #28]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005dce:	221a      	movs	r2, #26
 8005dd0:	68f9      	ldr	r1, [r7, #12]
 8005dd2:	6938      	ldr	r0, [r7, #16]
 8005dd4:	f7fe fc54 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f383 8811 	msr	BASEPRI, r3
}
 8005dde:	bf00      	nop
 8005de0:	3728      	adds	r7, #40	; 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20014398 	.word	0x20014398

08005dec <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005df2:	7e1b      	ldrb	r3, [r3, #24]
 8005df4:	4619      	mov	r1, r3
 8005df6:	4a13      	ldr	r2, [pc, #76]	; (8005e44 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005df8:	460b      	mov	r3, r1
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	440b      	add	r3, r1
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	4413      	add	r3, r2
 8005e02:	336c      	adds	r3, #108	; 0x6c
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	4b0e      	ldr	r3, [pc, #56]	; (8005e40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e08:	7e1b      	ldrb	r3, [r3, #24]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	490d      	ldr	r1, [pc, #52]	; (8005e44 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005e0e:	4603      	mov	r3, r0
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	4403      	add	r3, r0
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	440b      	add	r3, r1
 8005e18:	3370      	adds	r3, #112	; 0x70
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d00b      	beq.n	8005e38 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005e20:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e22:	789b      	ldrb	r3, [r3, #2]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d107      	bne.n	8005e38 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005e28:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005e2e:	f7fe fb45 	bl	80044bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005e38:	4b01      	ldr	r3, [pc, #4]	; (8005e40 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	20014368 	.word	0x20014368
 8005e44:	20012ea8 	.word	0x20012ea8

08005e48 <sniprintf>:
 8005e48:	b40c      	push	{r2, r3}
 8005e4a:	b530      	push	{r4, r5, lr}
 8005e4c:	4b17      	ldr	r3, [pc, #92]	; (8005eac <sniprintf+0x64>)
 8005e4e:	1e0c      	subs	r4, r1, #0
 8005e50:	681d      	ldr	r5, [r3, #0]
 8005e52:	b09d      	sub	sp, #116	; 0x74
 8005e54:	da08      	bge.n	8005e68 <sniprintf+0x20>
 8005e56:	238b      	movs	r3, #139	; 0x8b
 8005e58:	602b      	str	r3, [r5, #0]
 8005e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5e:	b01d      	add	sp, #116	; 0x74
 8005e60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e64:	b002      	add	sp, #8
 8005e66:	4770      	bx	lr
 8005e68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005e6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e70:	bf14      	ite	ne
 8005e72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e76:	4623      	moveq	r3, r4
 8005e78:	9304      	str	r3, [sp, #16]
 8005e7a:	9307      	str	r3, [sp, #28]
 8005e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e80:	9002      	str	r0, [sp, #8]
 8005e82:	9006      	str	r0, [sp, #24]
 8005e84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e8a:	ab21      	add	r3, sp, #132	; 0x84
 8005e8c:	a902      	add	r1, sp, #8
 8005e8e:	4628      	mov	r0, r5
 8005e90:	9301      	str	r3, [sp, #4]
 8005e92:	f000 f9ab 	bl	80061ec <_svfiprintf_r>
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	bfbc      	itt	lt
 8005e9a:	238b      	movlt	r3, #139	; 0x8b
 8005e9c:	602b      	strlt	r3, [r5, #0]
 8005e9e:	2c00      	cmp	r4, #0
 8005ea0:	d0dd      	beq.n	8005e5e <sniprintf+0x16>
 8005ea2:	9b02      	ldr	r3, [sp, #8]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	e7d9      	b.n	8005e5e <sniprintf+0x16>
 8005eaa:	bf00      	nop
 8005eac:	20000068 	.word	0x20000068

08005eb0 <memcmp>:
 8005eb0:	b510      	push	{r4, lr}
 8005eb2:	3901      	subs	r1, #1
 8005eb4:	4402      	add	r2, r0
 8005eb6:	4290      	cmp	r0, r2
 8005eb8:	d101      	bne.n	8005ebe <memcmp+0xe>
 8005eba:	2000      	movs	r0, #0
 8005ebc:	e005      	b.n	8005eca <memcmp+0x1a>
 8005ebe:	7803      	ldrb	r3, [r0, #0]
 8005ec0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	d001      	beq.n	8005ecc <memcmp+0x1c>
 8005ec8:	1b18      	subs	r0, r3, r4
 8005eca:	bd10      	pop	{r4, pc}
 8005ecc:	3001      	adds	r0, #1
 8005ece:	e7f2      	b.n	8005eb6 <memcmp+0x6>

08005ed0 <memset>:
 8005ed0:	4402      	add	r2, r0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d100      	bne.n	8005eda <memset+0xa>
 8005ed8:	4770      	bx	lr
 8005eda:	f803 1b01 	strb.w	r1, [r3], #1
 8005ede:	e7f9      	b.n	8005ed4 <memset+0x4>

08005ee0 <__libc_init_array>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	4d0d      	ldr	r5, [pc, #52]	; (8005f18 <__libc_init_array+0x38>)
 8005ee4:	4c0d      	ldr	r4, [pc, #52]	; (8005f1c <__libc_init_array+0x3c>)
 8005ee6:	1b64      	subs	r4, r4, r5
 8005ee8:	10a4      	asrs	r4, r4, #2
 8005eea:	2600      	movs	r6, #0
 8005eec:	42a6      	cmp	r6, r4
 8005eee:	d109      	bne.n	8005f04 <__libc_init_array+0x24>
 8005ef0:	4d0b      	ldr	r5, [pc, #44]	; (8005f20 <__libc_init_array+0x40>)
 8005ef2:	4c0c      	ldr	r4, [pc, #48]	; (8005f24 <__libc_init_array+0x44>)
 8005ef4:	f000 fc78 	bl	80067e8 <_init>
 8005ef8:	1b64      	subs	r4, r4, r5
 8005efa:	10a4      	asrs	r4, r4, #2
 8005efc:	2600      	movs	r6, #0
 8005efe:	42a6      	cmp	r6, r4
 8005f00:	d105      	bne.n	8005f0e <__libc_init_array+0x2e>
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f08:	4798      	blx	r3
 8005f0a:	3601      	adds	r6, #1
 8005f0c:	e7ee      	b.n	8005eec <__libc_init_array+0xc>
 8005f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f12:	4798      	blx	r3
 8005f14:	3601      	adds	r6, #1
 8005f16:	e7f2      	b.n	8005efe <__libc_init_array+0x1e>
 8005f18:	080069a0 	.word	0x080069a0
 8005f1c:	080069a0 	.word	0x080069a0
 8005f20:	080069a0 	.word	0x080069a0
 8005f24:	080069a4 	.word	0x080069a4

08005f28 <__retarget_lock_acquire_recursive>:
 8005f28:	4770      	bx	lr

08005f2a <__retarget_lock_release_recursive>:
 8005f2a:	4770      	bx	lr

08005f2c <memcpy>:
 8005f2c:	440a      	add	r2, r1
 8005f2e:	4291      	cmp	r1, r2
 8005f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f34:	d100      	bne.n	8005f38 <memcpy+0xc>
 8005f36:	4770      	bx	lr
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f42:	4291      	cmp	r1, r2
 8005f44:	d1f9      	bne.n	8005f3a <memcpy+0xe>
 8005f46:	bd10      	pop	{r4, pc}

08005f48 <_free_r>:
 8005f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f4a:	2900      	cmp	r1, #0
 8005f4c:	d044      	beq.n	8005fd8 <_free_r+0x90>
 8005f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f52:	9001      	str	r0, [sp, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f1a1 0404 	sub.w	r4, r1, #4
 8005f5a:	bfb8      	it	lt
 8005f5c:	18e4      	addlt	r4, r4, r3
 8005f5e:	f000 f8df 	bl	8006120 <__malloc_lock>
 8005f62:	4a1e      	ldr	r2, [pc, #120]	; (8005fdc <_free_r+0x94>)
 8005f64:	9801      	ldr	r0, [sp, #4]
 8005f66:	6813      	ldr	r3, [r2, #0]
 8005f68:	b933      	cbnz	r3, 8005f78 <_free_r+0x30>
 8005f6a:	6063      	str	r3, [r4, #4]
 8005f6c:	6014      	str	r4, [r2, #0]
 8005f6e:	b003      	add	sp, #12
 8005f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f74:	f000 b8da 	b.w	800612c <__malloc_unlock>
 8005f78:	42a3      	cmp	r3, r4
 8005f7a:	d908      	bls.n	8005f8e <_free_r+0x46>
 8005f7c:	6825      	ldr	r5, [r4, #0]
 8005f7e:	1961      	adds	r1, r4, r5
 8005f80:	428b      	cmp	r3, r1
 8005f82:	bf01      	itttt	eq
 8005f84:	6819      	ldreq	r1, [r3, #0]
 8005f86:	685b      	ldreq	r3, [r3, #4]
 8005f88:	1949      	addeq	r1, r1, r5
 8005f8a:	6021      	streq	r1, [r4, #0]
 8005f8c:	e7ed      	b.n	8005f6a <_free_r+0x22>
 8005f8e:	461a      	mov	r2, r3
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	b10b      	cbz	r3, 8005f98 <_free_r+0x50>
 8005f94:	42a3      	cmp	r3, r4
 8005f96:	d9fa      	bls.n	8005f8e <_free_r+0x46>
 8005f98:	6811      	ldr	r1, [r2, #0]
 8005f9a:	1855      	adds	r5, r2, r1
 8005f9c:	42a5      	cmp	r5, r4
 8005f9e:	d10b      	bne.n	8005fb8 <_free_r+0x70>
 8005fa0:	6824      	ldr	r4, [r4, #0]
 8005fa2:	4421      	add	r1, r4
 8005fa4:	1854      	adds	r4, r2, r1
 8005fa6:	42a3      	cmp	r3, r4
 8005fa8:	6011      	str	r1, [r2, #0]
 8005faa:	d1e0      	bne.n	8005f6e <_free_r+0x26>
 8005fac:	681c      	ldr	r4, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	6053      	str	r3, [r2, #4]
 8005fb2:	440c      	add	r4, r1
 8005fb4:	6014      	str	r4, [r2, #0]
 8005fb6:	e7da      	b.n	8005f6e <_free_r+0x26>
 8005fb8:	d902      	bls.n	8005fc0 <_free_r+0x78>
 8005fba:	230c      	movs	r3, #12
 8005fbc:	6003      	str	r3, [r0, #0]
 8005fbe:	e7d6      	b.n	8005f6e <_free_r+0x26>
 8005fc0:	6825      	ldr	r5, [r4, #0]
 8005fc2:	1961      	adds	r1, r4, r5
 8005fc4:	428b      	cmp	r3, r1
 8005fc6:	bf04      	itt	eq
 8005fc8:	6819      	ldreq	r1, [r3, #0]
 8005fca:	685b      	ldreq	r3, [r3, #4]
 8005fcc:	6063      	str	r3, [r4, #4]
 8005fce:	bf04      	itt	eq
 8005fd0:	1949      	addeq	r1, r1, r5
 8005fd2:	6021      	streq	r1, [r4, #0]
 8005fd4:	6054      	str	r4, [r2, #4]
 8005fd6:	e7ca      	b.n	8005f6e <_free_r+0x26>
 8005fd8:	b003      	add	sp, #12
 8005fda:	bd30      	pop	{r4, r5, pc}
 8005fdc:	200145bc 	.word	0x200145bc

08005fe0 <sbrk_aligned>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	4e0e      	ldr	r6, [pc, #56]	; (800601c <sbrk_aligned+0x3c>)
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	6831      	ldr	r1, [r6, #0]
 8005fe8:	4605      	mov	r5, r0
 8005fea:	b911      	cbnz	r1, 8005ff2 <sbrk_aligned+0x12>
 8005fec:	f000 fba6 	bl	800673c <_sbrk_r>
 8005ff0:	6030      	str	r0, [r6, #0]
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 fba1 	bl	800673c <_sbrk_r>
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	d00a      	beq.n	8006014 <sbrk_aligned+0x34>
 8005ffe:	1cc4      	adds	r4, r0, #3
 8006000:	f024 0403 	bic.w	r4, r4, #3
 8006004:	42a0      	cmp	r0, r4
 8006006:	d007      	beq.n	8006018 <sbrk_aligned+0x38>
 8006008:	1a21      	subs	r1, r4, r0
 800600a:	4628      	mov	r0, r5
 800600c:	f000 fb96 	bl	800673c <_sbrk_r>
 8006010:	3001      	adds	r0, #1
 8006012:	d101      	bne.n	8006018 <sbrk_aligned+0x38>
 8006014:	f04f 34ff 	mov.w	r4, #4294967295
 8006018:	4620      	mov	r0, r4
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	200145c0 	.word	0x200145c0

08006020 <_malloc_r>:
 8006020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006024:	1ccd      	adds	r5, r1, #3
 8006026:	f025 0503 	bic.w	r5, r5, #3
 800602a:	3508      	adds	r5, #8
 800602c:	2d0c      	cmp	r5, #12
 800602e:	bf38      	it	cc
 8006030:	250c      	movcc	r5, #12
 8006032:	2d00      	cmp	r5, #0
 8006034:	4607      	mov	r7, r0
 8006036:	db01      	blt.n	800603c <_malloc_r+0x1c>
 8006038:	42a9      	cmp	r1, r5
 800603a:	d905      	bls.n	8006048 <_malloc_r+0x28>
 800603c:	230c      	movs	r3, #12
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	2600      	movs	r6, #0
 8006042:	4630      	mov	r0, r6
 8006044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006048:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800611c <_malloc_r+0xfc>
 800604c:	f000 f868 	bl	8006120 <__malloc_lock>
 8006050:	f8d8 3000 	ldr.w	r3, [r8]
 8006054:	461c      	mov	r4, r3
 8006056:	bb5c      	cbnz	r4, 80060b0 <_malloc_r+0x90>
 8006058:	4629      	mov	r1, r5
 800605a:	4638      	mov	r0, r7
 800605c:	f7ff ffc0 	bl	8005fe0 <sbrk_aligned>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	4604      	mov	r4, r0
 8006064:	d155      	bne.n	8006112 <_malloc_r+0xf2>
 8006066:	f8d8 4000 	ldr.w	r4, [r8]
 800606a:	4626      	mov	r6, r4
 800606c:	2e00      	cmp	r6, #0
 800606e:	d145      	bne.n	80060fc <_malloc_r+0xdc>
 8006070:	2c00      	cmp	r4, #0
 8006072:	d048      	beq.n	8006106 <_malloc_r+0xe6>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	4631      	mov	r1, r6
 8006078:	4638      	mov	r0, r7
 800607a:	eb04 0903 	add.w	r9, r4, r3
 800607e:	f000 fb5d 	bl	800673c <_sbrk_r>
 8006082:	4581      	cmp	r9, r0
 8006084:	d13f      	bne.n	8006106 <_malloc_r+0xe6>
 8006086:	6821      	ldr	r1, [r4, #0]
 8006088:	1a6d      	subs	r5, r5, r1
 800608a:	4629      	mov	r1, r5
 800608c:	4638      	mov	r0, r7
 800608e:	f7ff ffa7 	bl	8005fe0 <sbrk_aligned>
 8006092:	3001      	adds	r0, #1
 8006094:	d037      	beq.n	8006106 <_malloc_r+0xe6>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	442b      	add	r3, r5
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	f8d8 3000 	ldr.w	r3, [r8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d038      	beq.n	8006116 <_malloc_r+0xf6>
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	42a2      	cmp	r2, r4
 80060a8:	d12b      	bne.n	8006102 <_malloc_r+0xe2>
 80060aa:	2200      	movs	r2, #0
 80060ac:	605a      	str	r2, [r3, #4]
 80060ae:	e00f      	b.n	80060d0 <_malloc_r+0xb0>
 80060b0:	6822      	ldr	r2, [r4, #0]
 80060b2:	1b52      	subs	r2, r2, r5
 80060b4:	d41f      	bmi.n	80060f6 <_malloc_r+0xd6>
 80060b6:	2a0b      	cmp	r2, #11
 80060b8:	d917      	bls.n	80060ea <_malloc_r+0xca>
 80060ba:	1961      	adds	r1, r4, r5
 80060bc:	42a3      	cmp	r3, r4
 80060be:	6025      	str	r5, [r4, #0]
 80060c0:	bf18      	it	ne
 80060c2:	6059      	strne	r1, [r3, #4]
 80060c4:	6863      	ldr	r3, [r4, #4]
 80060c6:	bf08      	it	eq
 80060c8:	f8c8 1000 	streq.w	r1, [r8]
 80060cc:	5162      	str	r2, [r4, r5]
 80060ce:	604b      	str	r3, [r1, #4]
 80060d0:	4638      	mov	r0, r7
 80060d2:	f104 060b 	add.w	r6, r4, #11
 80060d6:	f000 f829 	bl	800612c <__malloc_unlock>
 80060da:	f026 0607 	bic.w	r6, r6, #7
 80060de:	1d23      	adds	r3, r4, #4
 80060e0:	1af2      	subs	r2, r6, r3
 80060e2:	d0ae      	beq.n	8006042 <_malloc_r+0x22>
 80060e4:	1b9b      	subs	r3, r3, r6
 80060e6:	50a3      	str	r3, [r4, r2]
 80060e8:	e7ab      	b.n	8006042 <_malloc_r+0x22>
 80060ea:	42a3      	cmp	r3, r4
 80060ec:	6862      	ldr	r2, [r4, #4]
 80060ee:	d1dd      	bne.n	80060ac <_malloc_r+0x8c>
 80060f0:	f8c8 2000 	str.w	r2, [r8]
 80060f4:	e7ec      	b.n	80060d0 <_malloc_r+0xb0>
 80060f6:	4623      	mov	r3, r4
 80060f8:	6864      	ldr	r4, [r4, #4]
 80060fa:	e7ac      	b.n	8006056 <_malloc_r+0x36>
 80060fc:	4634      	mov	r4, r6
 80060fe:	6876      	ldr	r6, [r6, #4]
 8006100:	e7b4      	b.n	800606c <_malloc_r+0x4c>
 8006102:	4613      	mov	r3, r2
 8006104:	e7cc      	b.n	80060a0 <_malloc_r+0x80>
 8006106:	230c      	movs	r3, #12
 8006108:	603b      	str	r3, [r7, #0]
 800610a:	4638      	mov	r0, r7
 800610c:	f000 f80e 	bl	800612c <__malloc_unlock>
 8006110:	e797      	b.n	8006042 <_malloc_r+0x22>
 8006112:	6025      	str	r5, [r4, #0]
 8006114:	e7dc      	b.n	80060d0 <_malloc_r+0xb0>
 8006116:	605b      	str	r3, [r3, #4]
 8006118:	deff      	udf	#255	; 0xff
 800611a:	bf00      	nop
 800611c:	200145bc 	.word	0x200145bc

08006120 <__malloc_lock>:
 8006120:	4801      	ldr	r0, [pc, #4]	; (8006128 <__malloc_lock+0x8>)
 8006122:	f7ff bf01 	b.w	8005f28 <__retarget_lock_acquire_recursive>
 8006126:	bf00      	nop
 8006128:	200145b8 	.word	0x200145b8

0800612c <__malloc_unlock>:
 800612c:	4801      	ldr	r0, [pc, #4]	; (8006134 <__malloc_unlock+0x8>)
 800612e:	f7ff befc 	b.w	8005f2a <__retarget_lock_release_recursive>
 8006132:	bf00      	nop
 8006134:	200145b8 	.word	0x200145b8

08006138 <__ssputs_r>:
 8006138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800613c:	688e      	ldr	r6, [r1, #8]
 800613e:	461f      	mov	r7, r3
 8006140:	42be      	cmp	r6, r7
 8006142:	680b      	ldr	r3, [r1, #0]
 8006144:	4682      	mov	sl, r0
 8006146:	460c      	mov	r4, r1
 8006148:	4690      	mov	r8, r2
 800614a:	d82c      	bhi.n	80061a6 <__ssputs_r+0x6e>
 800614c:	898a      	ldrh	r2, [r1, #12]
 800614e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006152:	d026      	beq.n	80061a2 <__ssputs_r+0x6a>
 8006154:	6965      	ldr	r5, [r4, #20]
 8006156:	6909      	ldr	r1, [r1, #16]
 8006158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800615c:	eba3 0901 	sub.w	r9, r3, r1
 8006160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006164:	1c7b      	adds	r3, r7, #1
 8006166:	444b      	add	r3, r9
 8006168:	106d      	asrs	r5, r5, #1
 800616a:	429d      	cmp	r5, r3
 800616c:	bf38      	it	cc
 800616e:	461d      	movcc	r5, r3
 8006170:	0553      	lsls	r3, r2, #21
 8006172:	d527      	bpl.n	80061c4 <__ssputs_r+0x8c>
 8006174:	4629      	mov	r1, r5
 8006176:	f7ff ff53 	bl	8006020 <_malloc_r>
 800617a:	4606      	mov	r6, r0
 800617c:	b360      	cbz	r0, 80061d8 <__ssputs_r+0xa0>
 800617e:	6921      	ldr	r1, [r4, #16]
 8006180:	464a      	mov	r2, r9
 8006182:	f7ff fed3 	bl	8005f2c <memcpy>
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800618c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006190:	81a3      	strh	r3, [r4, #12]
 8006192:	6126      	str	r6, [r4, #16]
 8006194:	6165      	str	r5, [r4, #20]
 8006196:	444e      	add	r6, r9
 8006198:	eba5 0509 	sub.w	r5, r5, r9
 800619c:	6026      	str	r6, [r4, #0]
 800619e:	60a5      	str	r5, [r4, #8]
 80061a0:	463e      	mov	r6, r7
 80061a2:	42be      	cmp	r6, r7
 80061a4:	d900      	bls.n	80061a8 <__ssputs_r+0x70>
 80061a6:	463e      	mov	r6, r7
 80061a8:	6820      	ldr	r0, [r4, #0]
 80061aa:	4632      	mov	r2, r6
 80061ac:	4641      	mov	r1, r8
 80061ae:	f000 faab 	bl	8006708 <memmove>
 80061b2:	68a3      	ldr	r3, [r4, #8]
 80061b4:	1b9b      	subs	r3, r3, r6
 80061b6:	60a3      	str	r3, [r4, #8]
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	4433      	add	r3, r6
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	2000      	movs	r0, #0
 80061c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c4:	462a      	mov	r2, r5
 80061c6:	f000 fac9 	bl	800675c <_realloc_r>
 80061ca:	4606      	mov	r6, r0
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d1e0      	bne.n	8006192 <__ssputs_r+0x5a>
 80061d0:	6921      	ldr	r1, [r4, #16]
 80061d2:	4650      	mov	r0, sl
 80061d4:	f7ff feb8 	bl	8005f48 <_free_r>
 80061d8:	230c      	movs	r3, #12
 80061da:	f8ca 3000 	str.w	r3, [sl]
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061e4:	81a3      	strh	r3, [r4, #12]
 80061e6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ea:	e7e9      	b.n	80061c0 <__ssputs_r+0x88>

080061ec <_svfiprintf_r>:
 80061ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f0:	4698      	mov	r8, r3
 80061f2:	898b      	ldrh	r3, [r1, #12]
 80061f4:	061b      	lsls	r3, r3, #24
 80061f6:	b09d      	sub	sp, #116	; 0x74
 80061f8:	4607      	mov	r7, r0
 80061fa:	460d      	mov	r5, r1
 80061fc:	4614      	mov	r4, r2
 80061fe:	d50e      	bpl.n	800621e <_svfiprintf_r+0x32>
 8006200:	690b      	ldr	r3, [r1, #16]
 8006202:	b963      	cbnz	r3, 800621e <_svfiprintf_r+0x32>
 8006204:	2140      	movs	r1, #64	; 0x40
 8006206:	f7ff ff0b 	bl	8006020 <_malloc_r>
 800620a:	6028      	str	r0, [r5, #0]
 800620c:	6128      	str	r0, [r5, #16]
 800620e:	b920      	cbnz	r0, 800621a <_svfiprintf_r+0x2e>
 8006210:	230c      	movs	r3, #12
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	e0d0      	b.n	80063bc <_svfiprintf_r+0x1d0>
 800621a:	2340      	movs	r3, #64	; 0x40
 800621c:	616b      	str	r3, [r5, #20]
 800621e:	2300      	movs	r3, #0
 8006220:	9309      	str	r3, [sp, #36]	; 0x24
 8006222:	2320      	movs	r3, #32
 8006224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006228:	f8cd 800c 	str.w	r8, [sp, #12]
 800622c:	2330      	movs	r3, #48	; 0x30
 800622e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80063d4 <_svfiprintf_r+0x1e8>
 8006232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006236:	f04f 0901 	mov.w	r9, #1
 800623a:	4623      	mov	r3, r4
 800623c:	469a      	mov	sl, r3
 800623e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006242:	b10a      	cbz	r2, 8006248 <_svfiprintf_r+0x5c>
 8006244:	2a25      	cmp	r2, #37	; 0x25
 8006246:	d1f9      	bne.n	800623c <_svfiprintf_r+0x50>
 8006248:	ebba 0b04 	subs.w	fp, sl, r4
 800624c:	d00b      	beq.n	8006266 <_svfiprintf_r+0x7a>
 800624e:	465b      	mov	r3, fp
 8006250:	4622      	mov	r2, r4
 8006252:	4629      	mov	r1, r5
 8006254:	4638      	mov	r0, r7
 8006256:	f7ff ff6f 	bl	8006138 <__ssputs_r>
 800625a:	3001      	adds	r0, #1
 800625c:	f000 80a9 	beq.w	80063b2 <_svfiprintf_r+0x1c6>
 8006260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006262:	445a      	add	r2, fp
 8006264:	9209      	str	r2, [sp, #36]	; 0x24
 8006266:	f89a 3000 	ldrb.w	r3, [sl]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 80a1 	beq.w	80063b2 <_svfiprintf_r+0x1c6>
 8006270:	2300      	movs	r3, #0
 8006272:	f04f 32ff 	mov.w	r2, #4294967295
 8006276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800627a:	f10a 0a01 	add.w	sl, sl, #1
 800627e:	9304      	str	r3, [sp, #16]
 8006280:	9307      	str	r3, [sp, #28]
 8006282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006286:	931a      	str	r3, [sp, #104]	; 0x68
 8006288:	4654      	mov	r4, sl
 800628a:	2205      	movs	r2, #5
 800628c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006290:	4850      	ldr	r0, [pc, #320]	; (80063d4 <_svfiprintf_r+0x1e8>)
 8006292:	f7f9 fffd 	bl	8000290 <memchr>
 8006296:	9a04      	ldr	r2, [sp, #16]
 8006298:	b9d8      	cbnz	r0, 80062d2 <_svfiprintf_r+0xe6>
 800629a:	06d0      	lsls	r0, r2, #27
 800629c:	bf44      	itt	mi
 800629e:	2320      	movmi	r3, #32
 80062a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062a4:	0711      	lsls	r1, r2, #28
 80062a6:	bf44      	itt	mi
 80062a8:	232b      	movmi	r3, #43	; 0x2b
 80062aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ae:	f89a 3000 	ldrb.w	r3, [sl]
 80062b2:	2b2a      	cmp	r3, #42	; 0x2a
 80062b4:	d015      	beq.n	80062e2 <_svfiprintf_r+0xf6>
 80062b6:	9a07      	ldr	r2, [sp, #28]
 80062b8:	4654      	mov	r4, sl
 80062ba:	2000      	movs	r0, #0
 80062bc:	f04f 0c0a 	mov.w	ip, #10
 80062c0:	4621      	mov	r1, r4
 80062c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062c6:	3b30      	subs	r3, #48	; 0x30
 80062c8:	2b09      	cmp	r3, #9
 80062ca:	d94d      	bls.n	8006368 <_svfiprintf_r+0x17c>
 80062cc:	b1b0      	cbz	r0, 80062fc <_svfiprintf_r+0x110>
 80062ce:	9207      	str	r2, [sp, #28]
 80062d0:	e014      	b.n	80062fc <_svfiprintf_r+0x110>
 80062d2:	eba0 0308 	sub.w	r3, r0, r8
 80062d6:	fa09 f303 	lsl.w	r3, r9, r3
 80062da:	4313      	orrs	r3, r2
 80062dc:	9304      	str	r3, [sp, #16]
 80062de:	46a2      	mov	sl, r4
 80062e0:	e7d2      	b.n	8006288 <_svfiprintf_r+0x9c>
 80062e2:	9b03      	ldr	r3, [sp, #12]
 80062e4:	1d19      	adds	r1, r3, #4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	9103      	str	r1, [sp, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bfbb      	ittet	lt
 80062ee:	425b      	neglt	r3, r3
 80062f0:	f042 0202 	orrlt.w	r2, r2, #2
 80062f4:	9307      	strge	r3, [sp, #28]
 80062f6:	9307      	strlt	r3, [sp, #28]
 80062f8:	bfb8      	it	lt
 80062fa:	9204      	strlt	r2, [sp, #16]
 80062fc:	7823      	ldrb	r3, [r4, #0]
 80062fe:	2b2e      	cmp	r3, #46	; 0x2e
 8006300:	d10c      	bne.n	800631c <_svfiprintf_r+0x130>
 8006302:	7863      	ldrb	r3, [r4, #1]
 8006304:	2b2a      	cmp	r3, #42	; 0x2a
 8006306:	d134      	bne.n	8006372 <_svfiprintf_r+0x186>
 8006308:	9b03      	ldr	r3, [sp, #12]
 800630a:	1d1a      	adds	r2, r3, #4
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	9203      	str	r2, [sp, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	bfb8      	it	lt
 8006314:	f04f 33ff 	movlt.w	r3, #4294967295
 8006318:	3402      	adds	r4, #2
 800631a:	9305      	str	r3, [sp, #20]
 800631c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80063e4 <_svfiprintf_r+0x1f8>
 8006320:	7821      	ldrb	r1, [r4, #0]
 8006322:	2203      	movs	r2, #3
 8006324:	4650      	mov	r0, sl
 8006326:	f7f9 ffb3 	bl	8000290 <memchr>
 800632a:	b138      	cbz	r0, 800633c <_svfiprintf_r+0x150>
 800632c:	9b04      	ldr	r3, [sp, #16]
 800632e:	eba0 000a 	sub.w	r0, r0, sl
 8006332:	2240      	movs	r2, #64	; 0x40
 8006334:	4082      	lsls	r2, r0
 8006336:	4313      	orrs	r3, r2
 8006338:	3401      	adds	r4, #1
 800633a:	9304      	str	r3, [sp, #16]
 800633c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006340:	4825      	ldr	r0, [pc, #148]	; (80063d8 <_svfiprintf_r+0x1ec>)
 8006342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006346:	2206      	movs	r2, #6
 8006348:	f7f9 ffa2 	bl	8000290 <memchr>
 800634c:	2800      	cmp	r0, #0
 800634e:	d038      	beq.n	80063c2 <_svfiprintf_r+0x1d6>
 8006350:	4b22      	ldr	r3, [pc, #136]	; (80063dc <_svfiprintf_r+0x1f0>)
 8006352:	bb1b      	cbnz	r3, 800639c <_svfiprintf_r+0x1b0>
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	3307      	adds	r3, #7
 8006358:	f023 0307 	bic.w	r3, r3, #7
 800635c:	3308      	adds	r3, #8
 800635e:	9303      	str	r3, [sp, #12]
 8006360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006362:	4433      	add	r3, r6
 8006364:	9309      	str	r3, [sp, #36]	; 0x24
 8006366:	e768      	b.n	800623a <_svfiprintf_r+0x4e>
 8006368:	fb0c 3202 	mla	r2, ip, r2, r3
 800636c:	460c      	mov	r4, r1
 800636e:	2001      	movs	r0, #1
 8006370:	e7a6      	b.n	80062c0 <_svfiprintf_r+0xd4>
 8006372:	2300      	movs	r3, #0
 8006374:	3401      	adds	r4, #1
 8006376:	9305      	str	r3, [sp, #20]
 8006378:	4619      	mov	r1, r3
 800637a:	f04f 0c0a 	mov.w	ip, #10
 800637e:	4620      	mov	r0, r4
 8006380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006384:	3a30      	subs	r2, #48	; 0x30
 8006386:	2a09      	cmp	r2, #9
 8006388:	d903      	bls.n	8006392 <_svfiprintf_r+0x1a6>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0c6      	beq.n	800631c <_svfiprintf_r+0x130>
 800638e:	9105      	str	r1, [sp, #20]
 8006390:	e7c4      	b.n	800631c <_svfiprintf_r+0x130>
 8006392:	fb0c 2101 	mla	r1, ip, r1, r2
 8006396:	4604      	mov	r4, r0
 8006398:	2301      	movs	r3, #1
 800639a:	e7f0      	b.n	800637e <_svfiprintf_r+0x192>
 800639c:	ab03      	add	r3, sp, #12
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	462a      	mov	r2, r5
 80063a2:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <_svfiprintf_r+0x1f4>)
 80063a4:	a904      	add	r1, sp, #16
 80063a6:	4638      	mov	r0, r7
 80063a8:	f3af 8000 	nop.w
 80063ac:	1c42      	adds	r2, r0, #1
 80063ae:	4606      	mov	r6, r0
 80063b0:	d1d6      	bne.n	8006360 <_svfiprintf_r+0x174>
 80063b2:	89ab      	ldrh	r3, [r5, #12]
 80063b4:	065b      	lsls	r3, r3, #25
 80063b6:	f53f af2d 	bmi.w	8006214 <_svfiprintf_r+0x28>
 80063ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063bc:	b01d      	add	sp, #116	; 0x74
 80063be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c2:	ab03      	add	r3, sp, #12
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	462a      	mov	r2, r5
 80063c8:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <_svfiprintf_r+0x1f4>)
 80063ca:	a904      	add	r1, sp, #16
 80063cc:	4638      	mov	r0, r7
 80063ce:	f000 f879 	bl	80064c4 <_printf_i>
 80063d2:	e7eb      	b.n	80063ac <_svfiprintf_r+0x1c0>
 80063d4:	08006964 	.word	0x08006964
 80063d8:	0800696e 	.word	0x0800696e
 80063dc:	00000000 	.word	0x00000000
 80063e0:	08006139 	.word	0x08006139
 80063e4:	0800696a 	.word	0x0800696a

080063e8 <_printf_common>:
 80063e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ec:	4616      	mov	r6, r2
 80063ee:	4699      	mov	r9, r3
 80063f0:	688a      	ldr	r2, [r1, #8]
 80063f2:	690b      	ldr	r3, [r1, #16]
 80063f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063f8:	4293      	cmp	r3, r2
 80063fa:	bfb8      	it	lt
 80063fc:	4613      	movlt	r3, r2
 80063fe:	6033      	str	r3, [r6, #0]
 8006400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006404:	4607      	mov	r7, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b10a      	cbz	r2, 800640e <_printf_common+0x26>
 800640a:	3301      	adds	r3, #1
 800640c:	6033      	str	r3, [r6, #0]
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	0699      	lsls	r1, r3, #26
 8006412:	bf42      	ittt	mi
 8006414:	6833      	ldrmi	r3, [r6, #0]
 8006416:	3302      	addmi	r3, #2
 8006418:	6033      	strmi	r3, [r6, #0]
 800641a:	6825      	ldr	r5, [r4, #0]
 800641c:	f015 0506 	ands.w	r5, r5, #6
 8006420:	d106      	bne.n	8006430 <_printf_common+0x48>
 8006422:	f104 0a19 	add.w	sl, r4, #25
 8006426:	68e3      	ldr	r3, [r4, #12]
 8006428:	6832      	ldr	r2, [r6, #0]
 800642a:	1a9b      	subs	r3, r3, r2
 800642c:	42ab      	cmp	r3, r5
 800642e:	dc26      	bgt.n	800647e <_printf_common+0x96>
 8006430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006434:	1e13      	subs	r3, r2, #0
 8006436:	6822      	ldr	r2, [r4, #0]
 8006438:	bf18      	it	ne
 800643a:	2301      	movne	r3, #1
 800643c:	0692      	lsls	r2, r2, #26
 800643e:	d42b      	bmi.n	8006498 <_printf_common+0xb0>
 8006440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006444:	4649      	mov	r1, r9
 8006446:	4638      	mov	r0, r7
 8006448:	47c0      	blx	r8
 800644a:	3001      	adds	r0, #1
 800644c:	d01e      	beq.n	800648c <_printf_common+0xa4>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	6922      	ldr	r2, [r4, #16]
 8006452:	f003 0306 	and.w	r3, r3, #6
 8006456:	2b04      	cmp	r3, #4
 8006458:	bf02      	ittt	eq
 800645a:	68e5      	ldreq	r5, [r4, #12]
 800645c:	6833      	ldreq	r3, [r6, #0]
 800645e:	1aed      	subeq	r5, r5, r3
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	bf0c      	ite	eq
 8006464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006468:	2500      	movne	r5, #0
 800646a:	4293      	cmp	r3, r2
 800646c:	bfc4      	itt	gt
 800646e:	1a9b      	subgt	r3, r3, r2
 8006470:	18ed      	addgt	r5, r5, r3
 8006472:	2600      	movs	r6, #0
 8006474:	341a      	adds	r4, #26
 8006476:	42b5      	cmp	r5, r6
 8006478:	d11a      	bne.n	80064b0 <_printf_common+0xc8>
 800647a:	2000      	movs	r0, #0
 800647c:	e008      	b.n	8006490 <_printf_common+0xa8>
 800647e:	2301      	movs	r3, #1
 8006480:	4652      	mov	r2, sl
 8006482:	4649      	mov	r1, r9
 8006484:	4638      	mov	r0, r7
 8006486:	47c0      	blx	r8
 8006488:	3001      	adds	r0, #1
 800648a:	d103      	bne.n	8006494 <_printf_common+0xac>
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006494:	3501      	adds	r5, #1
 8006496:	e7c6      	b.n	8006426 <_printf_common+0x3e>
 8006498:	18e1      	adds	r1, r4, r3
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	2030      	movs	r0, #48	; 0x30
 800649e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064a2:	4422      	add	r2, r4
 80064a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064ac:	3302      	adds	r3, #2
 80064ae:	e7c7      	b.n	8006440 <_printf_common+0x58>
 80064b0:	2301      	movs	r3, #1
 80064b2:	4622      	mov	r2, r4
 80064b4:	4649      	mov	r1, r9
 80064b6:	4638      	mov	r0, r7
 80064b8:	47c0      	blx	r8
 80064ba:	3001      	adds	r0, #1
 80064bc:	d0e6      	beq.n	800648c <_printf_common+0xa4>
 80064be:	3601      	adds	r6, #1
 80064c0:	e7d9      	b.n	8006476 <_printf_common+0x8e>
	...

080064c4 <_printf_i>:
 80064c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064c8:	7e0f      	ldrb	r7, [r1, #24]
 80064ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064cc:	2f78      	cmp	r7, #120	; 0x78
 80064ce:	4691      	mov	r9, r2
 80064d0:	4680      	mov	r8, r0
 80064d2:	460c      	mov	r4, r1
 80064d4:	469a      	mov	sl, r3
 80064d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064da:	d807      	bhi.n	80064ec <_printf_i+0x28>
 80064dc:	2f62      	cmp	r7, #98	; 0x62
 80064de:	d80a      	bhi.n	80064f6 <_printf_i+0x32>
 80064e0:	2f00      	cmp	r7, #0
 80064e2:	f000 80d4 	beq.w	800668e <_printf_i+0x1ca>
 80064e6:	2f58      	cmp	r7, #88	; 0x58
 80064e8:	f000 80c0 	beq.w	800666c <_printf_i+0x1a8>
 80064ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064f4:	e03a      	b.n	800656c <_printf_i+0xa8>
 80064f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064fa:	2b15      	cmp	r3, #21
 80064fc:	d8f6      	bhi.n	80064ec <_printf_i+0x28>
 80064fe:	a101      	add	r1, pc, #4	; (adr r1, 8006504 <_printf_i+0x40>)
 8006500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006504:	0800655d 	.word	0x0800655d
 8006508:	08006571 	.word	0x08006571
 800650c:	080064ed 	.word	0x080064ed
 8006510:	080064ed 	.word	0x080064ed
 8006514:	080064ed 	.word	0x080064ed
 8006518:	080064ed 	.word	0x080064ed
 800651c:	08006571 	.word	0x08006571
 8006520:	080064ed 	.word	0x080064ed
 8006524:	080064ed 	.word	0x080064ed
 8006528:	080064ed 	.word	0x080064ed
 800652c:	080064ed 	.word	0x080064ed
 8006530:	08006675 	.word	0x08006675
 8006534:	0800659d 	.word	0x0800659d
 8006538:	0800662f 	.word	0x0800662f
 800653c:	080064ed 	.word	0x080064ed
 8006540:	080064ed 	.word	0x080064ed
 8006544:	08006697 	.word	0x08006697
 8006548:	080064ed 	.word	0x080064ed
 800654c:	0800659d 	.word	0x0800659d
 8006550:	080064ed 	.word	0x080064ed
 8006554:	080064ed 	.word	0x080064ed
 8006558:	08006637 	.word	0x08006637
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	1d1a      	adds	r2, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	602a      	str	r2, [r5, #0]
 8006564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800656c:	2301      	movs	r3, #1
 800656e:	e09f      	b.n	80066b0 <_printf_i+0x1ec>
 8006570:	6820      	ldr	r0, [r4, #0]
 8006572:	682b      	ldr	r3, [r5, #0]
 8006574:	0607      	lsls	r7, r0, #24
 8006576:	f103 0104 	add.w	r1, r3, #4
 800657a:	6029      	str	r1, [r5, #0]
 800657c:	d501      	bpl.n	8006582 <_printf_i+0xbe>
 800657e:	681e      	ldr	r6, [r3, #0]
 8006580:	e003      	b.n	800658a <_printf_i+0xc6>
 8006582:	0646      	lsls	r6, r0, #25
 8006584:	d5fb      	bpl.n	800657e <_printf_i+0xba>
 8006586:	f9b3 6000 	ldrsh.w	r6, [r3]
 800658a:	2e00      	cmp	r6, #0
 800658c:	da03      	bge.n	8006596 <_printf_i+0xd2>
 800658e:	232d      	movs	r3, #45	; 0x2d
 8006590:	4276      	negs	r6, r6
 8006592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006596:	485a      	ldr	r0, [pc, #360]	; (8006700 <_printf_i+0x23c>)
 8006598:	230a      	movs	r3, #10
 800659a:	e012      	b.n	80065c2 <_printf_i+0xfe>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	6820      	ldr	r0, [r4, #0]
 80065a0:	1d19      	adds	r1, r3, #4
 80065a2:	6029      	str	r1, [r5, #0]
 80065a4:	0605      	lsls	r5, r0, #24
 80065a6:	d501      	bpl.n	80065ac <_printf_i+0xe8>
 80065a8:	681e      	ldr	r6, [r3, #0]
 80065aa:	e002      	b.n	80065b2 <_printf_i+0xee>
 80065ac:	0641      	lsls	r1, r0, #25
 80065ae:	d5fb      	bpl.n	80065a8 <_printf_i+0xe4>
 80065b0:	881e      	ldrh	r6, [r3, #0]
 80065b2:	4853      	ldr	r0, [pc, #332]	; (8006700 <_printf_i+0x23c>)
 80065b4:	2f6f      	cmp	r7, #111	; 0x6f
 80065b6:	bf0c      	ite	eq
 80065b8:	2308      	moveq	r3, #8
 80065ba:	230a      	movne	r3, #10
 80065bc:	2100      	movs	r1, #0
 80065be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065c2:	6865      	ldr	r5, [r4, #4]
 80065c4:	60a5      	str	r5, [r4, #8]
 80065c6:	2d00      	cmp	r5, #0
 80065c8:	bfa2      	ittt	ge
 80065ca:	6821      	ldrge	r1, [r4, #0]
 80065cc:	f021 0104 	bicge.w	r1, r1, #4
 80065d0:	6021      	strge	r1, [r4, #0]
 80065d2:	b90e      	cbnz	r6, 80065d8 <_printf_i+0x114>
 80065d4:	2d00      	cmp	r5, #0
 80065d6:	d04b      	beq.n	8006670 <_printf_i+0x1ac>
 80065d8:	4615      	mov	r5, r2
 80065da:	fbb6 f1f3 	udiv	r1, r6, r3
 80065de:	fb03 6711 	mls	r7, r3, r1, r6
 80065e2:	5dc7      	ldrb	r7, [r0, r7]
 80065e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065e8:	4637      	mov	r7, r6
 80065ea:	42bb      	cmp	r3, r7
 80065ec:	460e      	mov	r6, r1
 80065ee:	d9f4      	bls.n	80065da <_printf_i+0x116>
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d10b      	bne.n	800660c <_printf_i+0x148>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	07de      	lsls	r6, r3, #31
 80065f8:	d508      	bpl.n	800660c <_printf_i+0x148>
 80065fa:	6923      	ldr	r3, [r4, #16]
 80065fc:	6861      	ldr	r1, [r4, #4]
 80065fe:	4299      	cmp	r1, r3
 8006600:	bfde      	ittt	le
 8006602:	2330      	movle	r3, #48	; 0x30
 8006604:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006608:	f105 35ff 	addle.w	r5, r5, #4294967295
 800660c:	1b52      	subs	r2, r2, r5
 800660e:	6122      	str	r2, [r4, #16]
 8006610:	f8cd a000 	str.w	sl, [sp]
 8006614:	464b      	mov	r3, r9
 8006616:	aa03      	add	r2, sp, #12
 8006618:	4621      	mov	r1, r4
 800661a:	4640      	mov	r0, r8
 800661c:	f7ff fee4 	bl	80063e8 <_printf_common>
 8006620:	3001      	adds	r0, #1
 8006622:	d14a      	bne.n	80066ba <_printf_i+0x1f6>
 8006624:	f04f 30ff 	mov.w	r0, #4294967295
 8006628:	b004      	add	sp, #16
 800662a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	f043 0320 	orr.w	r3, r3, #32
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	4833      	ldr	r0, [pc, #204]	; (8006704 <_printf_i+0x240>)
 8006638:	2778      	movs	r7, #120	; 0x78
 800663a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	6829      	ldr	r1, [r5, #0]
 8006642:	061f      	lsls	r7, r3, #24
 8006644:	f851 6b04 	ldr.w	r6, [r1], #4
 8006648:	d402      	bmi.n	8006650 <_printf_i+0x18c>
 800664a:	065f      	lsls	r7, r3, #25
 800664c:	bf48      	it	mi
 800664e:	b2b6      	uxthmi	r6, r6
 8006650:	07df      	lsls	r7, r3, #31
 8006652:	bf48      	it	mi
 8006654:	f043 0320 	orrmi.w	r3, r3, #32
 8006658:	6029      	str	r1, [r5, #0]
 800665a:	bf48      	it	mi
 800665c:	6023      	strmi	r3, [r4, #0]
 800665e:	b91e      	cbnz	r6, 8006668 <_printf_i+0x1a4>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	f023 0320 	bic.w	r3, r3, #32
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	2310      	movs	r3, #16
 800666a:	e7a7      	b.n	80065bc <_printf_i+0xf8>
 800666c:	4824      	ldr	r0, [pc, #144]	; (8006700 <_printf_i+0x23c>)
 800666e:	e7e4      	b.n	800663a <_printf_i+0x176>
 8006670:	4615      	mov	r5, r2
 8006672:	e7bd      	b.n	80065f0 <_printf_i+0x12c>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	6826      	ldr	r6, [r4, #0]
 8006678:	6961      	ldr	r1, [r4, #20]
 800667a:	1d18      	adds	r0, r3, #4
 800667c:	6028      	str	r0, [r5, #0]
 800667e:	0635      	lsls	r5, r6, #24
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	d501      	bpl.n	8006688 <_printf_i+0x1c4>
 8006684:	6019      	str	r1, [r3, #0]
 8006686:	e002      	b.n	800668e <_printf_i+0x1ca>
 8006688:	0670      	lsls	r0, r6, #25
 800668a:	d5fb      	bpl.n	8006684 <_printf_i+0x1c0>
 800668c:	8019      	strh	r1, [r3, #0]
 800668e:	2300      	movs	r3, #0
 8006690:	6123      	str	r3, [r4, #16]
 8006692:	4615      	mov	r5, r2
 8006694:	e7bc      	b.n	8006610 <_printf_i+0x14c>
 8006696:	682b      	ldr	r3, [r5, #0]
 8006698:	1d1a      	adds	r2, r3, #4
 800669a:	602a      	str	r2, [r5, #0]
 800669c:	681d      	ldr	r5, [r3, #0]
 800669e:	6862      	ldr	r2, [r4, #4]
 80066a0:	2100      	movs	r1, #0
 80066a2:	4628      	mov	r0, r5
 80066a4:	f7f9 fdf4 	bl	8000290 <memchr>
 80066a8:	b108      	cbz	r0, 80066ae <_printf_i+0x1ea>
 80066aa:	1b40      	subs	r0, r0, r5
 80066ac:	6060      	str	r0, [r4, #4]
 80066ae:	6863      	ldr	r3, [r4, #4]
 80066b0:	6123      	str	r3, [r4, #16]
 80066b2:	2300      	movs	r3, #0
 80066b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b8:	e7aa      	b.n	8006610 <_printf_i+0x14c>
 80066ba:	6923      	ldr	r3, [r4, #16]
 80066bc:	462a      	mov	r2, r5
 80066be:	4649      	mov	r1, r9
 80066c0:	4640      	mov	r0, r8
 80066c2:	47d0      	blx	sl
 80066c4:	3001      	adds	r0, #1
 80066c6:	d0ad      	beq.n	8006624 <_printf_i+0x160>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	079b      	lsls	r3, r3, #30
 80066cc:	d413      	bmi.n	80066f6 <_printf_i+0x232>
 80066ce:	68e0      	ldr	r0, [r4, #12]
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	4298      	cmp	r0, r3
 80066d4:	bfb8      	it	lt
 80066d6:	4618      	movlt	r0, r3
 80066d8:	e7a6      	b.n	8006628 <_printf_i+0x164>
 80066da:	2301      	movs	r3, #1
 80066dc:	4632      	mov	r2, r6
 80066de:	4649      	mov	r1, r9
 80066e0:	4640      	mov	r0, r8
 80066e2:	47d0      	blx	sl
 80066e4:	3001      	adds	r0, #1
 80066e6:	d09d      	beq.n	8006624 <_printf_i+0x160>
 80066e8:	3501      	adds	r5, #1
 80066ea:	68e3      	ldr	r3, [r4, #12]
 80066ec:	9903      	ldr	r1, [sp, #12]
 80066ee:	1a5b      	subs	r3, r3, r1
 80066f0:	42ab      	cmp	r3, r5
 80066f2:	dcf2      	bgt.n	80066da <_printf_i+0x216>
 80066f4:	e7eb      	b.n	80066ce <_printf_i+0x20a>
 80066f6:	2500      	movs	r5, #0
 80066f8:	f104 0619 	add.w	r6, r4, #25
 80066fc:	e7f5      	b.n	80066ea <_printf_i+0x226>
 80066fe:	bf00      	nop
 8006700:	08006975 	.word	0x08006975
 8006704:	08006986 	.word	0x08006986

08006708 <memmove>:
 8006708:	4288      	cmp	r0, r1
 800670a:	b510      	push	{r4, lr}
 800670c:	eb01 0402 	add.w	r4, r1, r2
 8006710:	d902      	bls.n	8006718 <memmove+0x10>
 8006712:	4284      	cmp	r4, r0
 8006714:	4623      	mov	r3, r4
 8006716:	d807      	bhi.n	8006728 <memmove+0x20>
 8006718:	1e43      	subs	r3, r0, #1
 800671a:	42a1      	cmp	r1, r4
 800671c:	d008      	beq.n	8006730 <memmove+0x28>
 800671e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006726:	e7f8      	b.n	800671a <memmove+0x12>
 8006728:	4402      	add	r2, r0
 800672a:	4601      	mov	r1, r0
 800672c:	428a      	cmp	r2, r1
 800672e:	d100      	bne.n	8006732 <memmove+0x2a>
 8006730:	bd10      	pop	{r4, pc}
 8006732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800673a:	e7f7      	b.n	800672c <memmove+0x24>

0800673c <_sbrk_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4d06      	ldr	r5, [pc, #24]	; (8006758 <_sbrk_r+0x1c>)
 8006740:	2300      	movs	r3, #0
 8006742:	4604      	mov	r4, r0
 8006744:	4608      	mov	r0, r1
 8006746:	602b      	str	r3, [r5, #0]
 8006748:	f000 f840 	bl	80067cc <_sbrk>
 800674c:	1c43      	adds	r3, r0, #1
 800674e:	d102      	bne.n	8006756 <_sbrk_r+0x1a>
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	b103      	cbz	r3, 8006756 <_sbrk_r+0x1a>
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	bd38      	pop	{r3, r4, r5, pc}
 8006758:	200145b4 	.word	0x200145b4

0800675c <_realloc_r>:
 800675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006760:	4680      	mov	r8, r0
 8006762:	4614      	mov	r4, r2
 8006764:	460e      	mov	r6, r1
 8006766:	b921      	cbnz	r1, 8006772 <_realloc_r+0x16>
 8006768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800676c:	4611      	mov	r1, r2
 800676e:	f7ff bc57 	b.w	8006020 <_malloc_r>
 8006772:	b92a      	cbnz	r2, 8006780 <_realloc_r+0x24>
 8006774:	f7ff fbe8 	bl	8005f48 <_free_r>
 8006778:	4625      	mov	r5, r4
 800677a:	4628      	mov	r0, r5
 800677c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006780:	f000 f81b 	bl	80067ba <_malloc_usable_size_r>
 8006784:	4284      	cmp	r4, r0
 8006786:	4607      	mov	r7, r0
 8006788:	d802      	bhi.n	8006790 <_realloc_r+0x34>
 800678a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800678e:	d812      	bhi.n	80067b6 <_realloc_r+0x5a>
 8006790:	4621      	mov	r1, r4
 8006792:	4640      	mov	r0, r8
 8006794:	f7ff fc44 	bl	8006020 <_malloc_r>
 8006798:	4605      	mov	r5, r0
 800679a:	2800      	cmp	r0, #0
 800679c:	d0ed      	beq.n	800677a <_realloc_r+0x1e>
 800679e:	42bc      	cmp	r4, r7
 80067a0:	4622      	mov	r2, r4
 80067a2:	4631      	mov	r1, r6
 80067a4:	bf28      	it	cs
 80067a6:	463a      	movcs	r2, r7
 80067a8:	f7ff fbc0 	bl	8005f2c <memcpy>
 80067ac:	4631      	mov	r1, r6
 80067ae:	4640      	mov	r0, r8
 80067b0:	f7ff fbca 	bl	8005f48 <_free_r>
 80067b4:	e7e1      	b.n	800677a <_realloc_r+0x1e>
 80067b6:	4635      	mov	r5, r6
 80067b8:	e7df      	b.n	800677a <_realloc_r+0x1e>

080067ba <_malloc_usable_size_r>:
 80067ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067be:	1f18      	subs	r0, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bfbc      	itt	lt
 80067c4:	580b      	ldrlt	r3, [r1, r0]
 80067c6:	18c0      	addlt	r0, r0, r3
 80067c8:	4770      	bx	lr
	...

080067cc <_sbrk>:
 80067cc:	4a04      	ldr	r2, [pc, #16]	; (80067e0 <_sbrk+0x14>)
 80067ce:	6811      	ldr	r1, [r2, #0]
 80067d0:	4603      	mov	r3, r0
 80067d2:	b909      	cbnz	r1, 80067d8 <_sbrk+0xc>
 80067d4:	4903      	ldr	r1, [pc, #12]	; (80067e4 <_sbrk+0x18>)
 80067d6:	6011      	str	r1, [r2, #0]
 80067d8:	6810      	ldr	r0, [r2, #0]
 80067da:	4403      	add	r3, r0
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	4770      	bx	lr
 80067e0:	200145c4 	.word	0x200145c4
 80067e4:	200145c8 	.word	0x200145c8

080067e8 <_init>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr

080067f4 <_fini>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr
