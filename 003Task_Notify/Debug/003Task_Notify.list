
003Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f74  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08007124  08007124  00017124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072e4  080072e4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080072e4  080072e4  000172e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072ec  080072ec  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072ec  080072ec  000172ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072f0  080072f0  000172f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080072f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00014564  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200145d0  200145d0  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001240f  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c3b  00000000  00000000  000324ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011c8  00000000  00000000  00035130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000da5  00000000  00000000  000362f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000265f5  00000000  00000000  0003709d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000151f1  00000000  00000000  0005d692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7757  00000000  00000000  00072883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ec8  00000000  00000000  00159fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000011b  00000000  00000000  0015eea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800710c 	.word	0x0800710c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	0800710c 	.word	0x0800710c

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012eb4 	.word	0x20012eb4
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b970 	b.w	8000628 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	460f      	mov	r7, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4694      	mov	ip, r2
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0xe2>
 8000376:	fab2 f382 	clz	r3, r2
 800037a:	b143      	cbz	r3, 800038e <__udivmoddi4+0x2e>
 800037c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000380:	f1c3 0220 	rsb	r2, r3, #32
 8000384:	409f      	lsls	r7, r3
 8000386:	fa20 f202 	lsr.w	r2, r0, r2
 800038a:	4317      	orrs	r7, r2
 800038c:	409c      	lsls	r4, r3
 800038e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000392:	fa1f f58c 	uxth.w	r5, ip
 8000396:	fbb7 f1fe 	udiv	r1, r7, lr
 800039a:	0c22      	lsrs	r2, r4, #16
 800039c:	fb0e 7711 	mls	r7, lr, r1, r7
 80003a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003a4:	fb01 f005 	mul.w	r0, r1, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003b4:	f080 811c 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f240 8119 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003be:	3902      	subs	r1, #2
 80003c0:	4462      	add	r2, ip
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d2:	fb00 f505 	mul.w	r5, r0, r5
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x90>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e2:	f080 8107 	bcs.w	80005f4 <__udivmoddi4+0x294>
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	f240 8104 	bls.w	80005f4 <__udivmoddi4+0x294>
 80003ec:	4464      	add	r4, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11e      	cbz	r6, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40dc      	lsrs	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0xbc>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80ed 	beq.w	80005ea <__udivmoddi4+0x28a>
 8000410:	2100      	movs	r1, #0
 8000412:	e9c6 0500 	strd	r0, r5, [r6]
 8000416:	4608      	mov	r0, r1
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	fab3 f183 	clz	r1, r3
 8000420:	2900      	cmp	r1, #0
 8000422:	d149      	bne.n	80004b8 <__udivmoddi4+0x158>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d302      	bcc.n	800042e <__udivmoddi4+0xce>
 8000428:	4282      	cmp	r2, r0
 800042a:	f200 80f8 	bhi.w	800061e <__udivmoddi4+0x2be>
 800042e:	1a84      	subs	r4, r0, r2
 8000430:	eb65 0203 	sbc.w	r2, r5, r3
 8000434:	2001      	movs	r0, #1
 8000436:	4617      	mov	r7, r2
 8000438:	2e00      	cmp	r6, #0
 800043a:	d0e2      	beq.n	8000402 <__udivmoddi4+0xa2>
 800043c:	e9c6 4700 	strd	r4, r7, [r6]
 8000440:	e7df      	b.n	8000402 <__udivmoddi4+0xa2>
 8000442:	b902      	cbnz	r2, 8000446 <__udivmoddi4+0xe6>
 8000444:	deff      	udf	#255	; 0xff
 8000446:	fab2 f382 	clz	r3, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	f040 8090 	bne.w	8000570 <__udivmoddi4+0x210>
 8000450:	1a8a      	subs	r2, r1, r2
 8000452:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	2101      	movs	r1, #1
 800045c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000460:	fb07 2015 	mls	r0, r7, r5, r2
 8000464:	0c22      	lsrs	r2, r4, #16
 8000466:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800046a:	fb0e f005 	mul.w	r0, lr, r5
 800046e:	4290      	cmp	r0, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x124>
 8000472:	eb1c 0202 	adds.w	r2, ip, r2
 8000476:	f105 38ff 	add.w	r8, r5, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4290      	cmp	r0, r2
 800047e:	f200 80cb 	bhi.w	8000618 <__udivmoddi4+0x2b8>
 8000482:	4645      	mov	r5, r8
 8000484:	1a12      	subs	r2, r2, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb2 f0f7 	udiv	r0, r2, r7
 800048c:	fb07 2210 	mls	r2, r7, r0, r2
 8000490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000494:	fb0e fe00 	mul.w	lr, lr, r0
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x14e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x14c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f200 80bb 	bhi.w	8000622 <__udivmoddi4+0x2c2>
 80004ac:	4610      	mov	r0, r2
 80004ae:	eba4 040e 	sub.w	r4, r4, lr
 80004b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004b6:	e79f      	b.n	80003f8 <__udivmoddi4+0x98>
 80004b8:	f1c1 0720 	rsb	r7, r1, #32
 80004bc:	408b      	lsls	r3, r1
 80004be:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ca:	fa20 f307 	lsr.w	r3, r0, r7
 80004ce:	40fd      	lsrs	r5, r7
 80004d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004d4:	4323      	orrs	r3, r4
 80004d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004da:	fa1f fe8c 	uxth.w	lr, ip
 80004de:	fb09 5518 	mls	r5, r9, r8, r5
 80004e2:	0c1c      	lsrs	r4, r3, #16
 80004e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004e8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	fa02 f201 	lsl.w	r2, r2, r1
 80004f2:	fa00 f001 	lsl.w	r0, r0, r1
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000500:	f080 8088 	bcs.w	8000614 <__udivmoddi4+0x2b4>
 8000504:	42a5      	cmp	r5, r4
 8000506:	f240 8085 	bls.w	8000614 <__udivmoddi4+0x2b4>
 800050a:	f1a8 0802 	sub.w	r8, r8, #2
 800050e:	4464      	add	r4, ip
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	b29d      	uxth	r5, r3
 8000514:	fbb4 f3f9 	udiv	r3, r4, r9
 8000518:	fb09 4413 	mls	r4, r9, r3, r4
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	fb03 fe0e 	mul.w	lr, r3, lr
 8000524:	45a6      	cmp	lr, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000530:	d26c      	bcs.n	800060c <__udivmoddi4+0x2ac>
 8000532:	45a6      	cmp	lr, r4
 8000534:	d96a      	bls.n	800060c <__udivmoddi4+0x2ac>
 8000536:	3b02      	subs	r3, #2
 8000538:	4464      	add	r4, ip
 800053a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800053e:	fba3 9502 	umull	r9, r5, r3, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	42ac      	cmp	r4, r5
 8000548:	46c8      	mov	r8, r9
 800054a:	46ae      	mov	lr, r5
 800054c:	d356      	bcc.n	80005fc <__udivmoddi4+0x29c>
 800054e:	d053      	beq.n	80005f8 <__udivmoddi4+0x298>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x208>
 8000552:	ebb0 0208 	subs.w	r2, r0, r8
 8000556:	eb64 040e 	sbc.w	r4, r4, lr
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40ca      	lsrs	r2, r1
 8000560:	40cc      	lsrs	r4, r1
 8000562:	4317      	orrs	r7, r2
 8000564:	e9c6 7400 	strd	r7, r4, [r6]
 8000568:	4618      	mov	r0, r3
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	f1c3 0120 	rsb	r1, r3, #32
 8000574:	fa02 fc03 	lsl.w	ip, r2, r3
 8000578:	fa20 f201 	lsr.w	r2, r0, r1
 800057c:	fa25 f101 	lsr.w	r1, r5, r1
 8000580:	409d      	lsls	r5, r3
 8000582:	432a      	orrs	r2, r5
 8000584:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000588:	fa1f fe8c 	uxth.w	lr, ip
 800058c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000590:	fb07 1510 	mls	r5, r7, r0, r1
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800059a:	fb00 f50e 	mul.w	r5, r0, lr
 800059e:	428d      	cmp	r5, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x258>
 80005a6:	eb1c 0101 	adds.w	r1, ip, r1
 80005aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ae:	d22f      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005b0:	428d      	cmp	r5, r1
 80005b2:	d92d      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005b4:	3802      	subs	r0, #2
 80005b6:	4461      	add	r1, ip
 80005b8:	1b49      	subs	r1, r1, r5
 80005ba:	b292      	uxth	r2, r2
 80005bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005c0:	fb07 1115 	mls	r1, r7, r5, r1
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	fb05 f10e 	mul.w	r1, r5, lr
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x282>
 80005d0:	eb1c 0202 	adds.w	r2, ip, r2
 80005d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005d8:	d216      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 80005da:	4291      	cmp	r1, r2
 80005dc:	d914      	bls.n	8000608 <__udivmoddi4+0x2a8>
 80005de:	3d02      	subs	r5, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a52      	subs	r2, r2, r1
 80005e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005e8:	e738      	b.n	800045c <__udivmoddi4+0xfc>
 80005ea:	4631      	mov	r1, r6
 80005ec:	4630      	mov	r0, r6
 80005ee:	e708      	b.n	8000402 <__udivmoddi4+0xa2>
 80005f0:	4639      	mov	r1, r7
 80005f2:	e6e6      	b.n	80003c2 <__udivmoddi4+0x62>
 80005f4:	4610      	mov	r0, r2
 80005f6:	e6fb      	b.n	80003f0 <__udivmoddi4+0x90>
 80005f8:	4548      	cmp	r0, r9
 80005fa:	d2a9      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000600:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000604:	3b01      	subs	r3, #1
 8000606:	e7a3      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000608:	4645      	mov	r5, r8
 800060a:	e7ea      	b.n	80005e2 <__udivmoddi4+0x282>
 800060c:	462b      	mov	r3, r5
 800060e:	e794      	b.n	800053a <__udivmoddi4+0x1da>
 8000610:	4640      	mov	r0, r8
 8000612:	e7d1      	b.n	80005b8 <__udivmoddi4+0x258>
 8000614:	46d0      	mov	r8, sl
 8000616:	e77b      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000618:	3d02      	subs	r5, #2
 800061a:	4462      	add	r2, ip
 800061c:	e732      	b.n	8000484 <__udivmoddi4+0x124>
 800061e:	4608      	mov	r0, r1
 8000620:	e70a      	b.n	8000438 <__udivmoddi4+0xd8>
 8000622:	4464      	add	r4, ip
 8000624:	3802      	subs	r0, #2
 8000626:	e742      	b.n	80004ae <__udivmoddi4+0x14e>

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	BaseType_t xReturned = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fd03 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f853 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f8bb 	bl	80007b8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // enable the CYCCNT counter
  *DWT_CTRL |= (1 << 0);
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <main+0x98>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <main+0x98>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6013      	str	r3, [r2, #0]

  // enable usart
  SEGGER_UART_init(500000);
 800064e:	481e      	ldr	r0, [pc, #120]	; (80006c8 <main+0x9c>)
 8000650:	f003 fe94 	bl	800437c <SEGGER_UART_init>

  // start segger recording
  SEGGER_SYSVIEW_Conf();
 8000654:	f003 fcbc 	bl	8003fd0 <SEGGER_SYSVIEW_Conf>

  xReturned = xTaskCreate(notifywait_handler, "notifywait_handler", 200, NULL, 2, &xNotifyWaitTaskHandle);
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <main+0xa0>)
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	2302      	movs	r3, #2
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2300      	movs	r3, #0
 8000662:	22c8      	movs	r2, #200	; 0xc8
 8000664:	491a      	ldr	r1, [pc, #104]	; (80006d0 <main+0xa4>)
 8000666:	481b      	ldr	r0, [pc, #108]	; (80006d4 <main+0xa8>)
 8000668:	f001 ffbc 	bl	80025e4 <xTaskCreate>
 800066c:	60f8      	str	r0, [r7, #12]
  configASSERT(pdPASS == xReturned);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d00a      	beq.n	800068a <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000678:	f383 8811 	msr	BASEPRI, r3
 800067c:	f3bf 8f6f 	isb	sy
 8000680:	f3bf 8f4f 	dsb	sy
 8000684:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000686:	bf00      	nop
 8000688:	e7fe      	b.n	8000688 <main+0x5c>

  xReturned = xTaskCreate(notify_handler, "notify_handler", 200, (void *)&xNotifyWaitTaskHandle, 2, &xNotifyTaskHandle);
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <main+0xac>)
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2302      	movs	r3, #2
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <main+0xa0>)
 8000694:	22c8      	movs	r2, #200	; 0xc8
 8000696:	4911      	ldr	r1, [pc, #68]	; (80006dc <main+0xb0>)
 8000698:	4811      	ldr	r0, [pc, #68]	; (80006e0 <main+0xb4>)
 800069a:	f001 ffa3 	bl	80025e4 <xTaskCreate>
 800069e:	60f8      	str	r0, [r7, #12]
  configASSERT(pdPASS == xReturned);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d00a      	beq.n	80006bc <main+0x90>
        __asm volatile
 80006a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006aa:	f383 8811 	msr	BASEPRI, r3
 80006ae:	f3bf 8f6f 	isb	sy
 80006b2:	f3bf 8f4f 	dsb	sy
 80006b6:	607b      	str	r3, [r7, #4]
    }
 80006b8:	bf00      	nop
 80006ba:	e7fe      	b.n	80006ba <main+0x8e>


  // start the scheduler
  vTaskStartScheduler();
 80006bc:	f002 f9d4 	bl	8002a68 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <main+0x94>
 80006c2:	bf00      	nop
 80006c4:	e0001000 	.word	0xe0001000
 80006c8:	0007a120 	.word	0x0007a120
 80006cc:	2000008c 	.word	0x2000008c
 80006d0:	08007124 	.word	0x08007124
 80006d4:	08000c91 	.word	0x08000c91
 80006d8:	20000088 	.word	0x20000088
 80006dc:	08007138 	.word	0x08007138
 80006e0:	08000d45 	.word	0x08000d45

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f006 f886 	bl	8006804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <SystemClock_Config+0xcc>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a27      	ldr	r2, [pc, #156]	; (80007b0 <SystemClock_Config+0xcc>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <SystemClock_Config+0xd0>)
 800072e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000740:	2302      	movs	r3, #2
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	2310      	movs	r3, #16
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000754:	2308      	movs	r3, #8
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000758:	23a8      	movs	r3, #168	; 0xa8
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000760:	2307      	movs	r3, #7
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4618      	mov	r0, r3
 800076a:	f000 ff53 	bl	8001614 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000774:	f000 fb28 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000784:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2105      	movs	r1, #5
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f9b4 	bl	8001b04 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007a2:	f000 fb11 	bl	8000dc8 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	; 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	; 0x38
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
 80007d2:	4bb2      	ldr	r3, [pc, #712]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4ab1      	ldr	r2, [pc, #708]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4baf      	ldr	r3, [pc, #700]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	623b      	str	r3, [r7, #32]
 80007e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	4bab      	ldr	r3, [pc, #684]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4aaa      	ldr	r2, [pc, #680]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4ba8      	ldr	r3, [pc, #672]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0320 	and.w	r3, r3, #32
 8000802:	61fb      	str	r3, [r7, #28]
 8000804:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4ba4      	ldr	r3, [pc, #656]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4aa3      	ldr	r2, [pc, #652]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4ba1      	ldr	r3, [pc, #644]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b9d      	ldr	r3, [pc, #628]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a9c      	ldr	r2, [pc, #624]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b9a      	ldr	r3, [pc, #616]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b96      	ldr	r3, [pc, #600]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a95      	ldr	r2, [pc, #596]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b93      	ldr	r3, [pc, #588]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b8f      	ldr	r3, [pc, #572]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a8e      	ldr	r2, [pc, #568]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b8c      	ldr	r3, [pc, #560]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b88      	ldr	r3, [pc, #544]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a87      	ldr	r2, [pc, #540]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b85      	ldr	r3, [pc, #532]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b81      	ldr	r3, [pc, #516]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a80      	ldr	r2, [pc, #512]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b7e      	ldr	r3, [pc, #504]	; (8000a9c <MX_GPIO_Init+0x2e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2116      	movs	r1, #22
 80008b2:	487b      	ldr	r0, [pc, #492]	; (8000aa0 <MX_GPIO_Init+0x2e8>)
 80008b4:	f000 fe94 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2180      	movs	r1, #128	; 0x80
 80008bc:	4879      	ldr	r0, [pc, #484]	; (8000aa4 <MX_GPIO_Init+0x2ec>)
 80008be:	f000 fe8f 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80008c8:	4877      	ldr	r0, [pc, #476]	; (8000aa8 <MX_GPIO_Init+0x2f0>)
 80008ca:	f000 fe89 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80008d4:	4875      	ldr	r0, [pc, #468]	; (8000aac <MX_GPIO_Init+0x2f4>)
 80008d6:	f000 fe83 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80008da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ec:	230c      	movs	r3, #12
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f4:	4619      	mov	r1, r3
 80008f6:	486e      	ldr	r0, [pc, #440]	; (8000ab0 <MX_GPIO_Init+0x2f8>)
 80008f8:	f000 fcc6 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80008fc:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800090e:	2305      	movs	r3, #5
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4619      	mov	r1, r3
 8000918:	4865      	ldr	r0, [pc, #404]	; (8000ab0 <MX_GPIO_Init+0x2f8>)
 800091a:	f000 fcb5 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800091e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000930:	230e      	movs	r3, #14
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000938:	4619      	mov	r1, r3
 800093a:	485d      	ldr	r0, [pc, #372]	; (8000ab0 <MX_GPIO_Init+0x2f8>)
 800093c:	f000 fca4 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000940:	2301      	movs	r3, #1
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000950:	230c      	movs	r3, #12
 8000952:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	4851      	ldr	r0, [pc, #324]	; (8000aa0 <MX_GPIO_Init+0x2e8>)
 800095c:	f000 fc94 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000960:	2316      	movs	r3, #22
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	484a      	ldr	r0, [pc, #296]	; (8000aa0 <MX_GPIO_Init+0x2e8>)
 8000978:	f000 fc86 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800097c:	f248 0307 	movw	r3, #32775	; 0x8007
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000982:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	4844      	ldr	r0, [pc, #272]	; (8000aa4 <MX_GPIO_Init+0x2ec>)
 8000994:	f000 fc78 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000998:	f641 0358 	movw	r3, #6232	; 0x1858
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009aa:	230e      	movs	r3, #14
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	483b      	ldr	r0, [pc, #236]	; (8000aa4 <MX_GPIO_Init+0x2ec>)
 80009b6:	f000 fc67 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	4834      	ldr	r0, [pc, #208]	; (8000aa4 <MX_GPIO_Init+0x2ec>)
 80009d2:	f000 fc59 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009d6:	2320      	movs	r3, #32
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	482d      	ldr	r0, [pc, #180]	; (8000aa0 <MX_GPIO_Init+0x2e8>)
 80009ec:	f000 fc4c 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80009f0:	2303      	movs	r3, #3
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a00:	2309      	movs	r3, #9
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	482a      	ldr	r0, [pc, #168]	; (8000ab4 <MX_GPIO_Init+0x2fc>)
 8000a0c:	f000 fc3c 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a10:	2304      	movs	r3, #4
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4824      	ldr	r0, [pc, #144]	; (8000ab4 <MX_GPIO_Init+0x2fc>)
 8000a24:	f000 fc30 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a28:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	4819      	ldr	r0, [pc, #100]	; (8000aac <MX_GPIO_Init+0x2f4>)
 8000a46:	f000 fc1f 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a4a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <MX_GPIO_Init+0x300>)
 8000a68:	f000 fc0e 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a6c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a7e:	230e      	movs	r3, #14
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <MX_GPIO_Init+0x2fc>)
 8000a8a:	f000 fbfd 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a8e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a98:	e010      	b.n	8000abc <MX_GPIO_Init+0x304>
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40021800 	.word	0x40021800
 8000ab0:	40021400 	.word	0x40021400
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000ac4:	230c      	movs	r3, #12
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	4619      	mov	r1, r3
 8000ace:	486b      	ldr	r0, [pc, #428]	; (8000c7c <MX_GPIO_Init+0x4c4>)
 8000ad0:	f000 fbda 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4864      	ldr	r0, [pc, #400]	; (8000c7c <MX_GPIO_Init+0x4c4>)
 8000aea:	f000 fbcd 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000aee:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b00:	230c      	movs	r3, #12
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	485d      	ldr	r0, [pc, #372]	; (8000c80 <MX_GPIO_Init+0x4c8>)
 8000b0c:	f000 fbbc 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4856      	ldr	r0, [pc, #344]	; (8000c80 <MX_GPIO_Init+0x4c8>)
 8000b26:	f000 fbaf 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	484f      	ldr	r0, [pc, #316]	; (8000c80 <MX_GPIO_Init+0x4c8>)
 8000b44:	f000 fba0 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b48:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b5a:	230e      	movs	r3, #14
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	4847      	ldr	r0, [pc, #284]	; (8000c84 <MX_GPIO_Init+0x4cc>)
 8000b66:	f000 fb8f 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b6a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b7c:	230e      	movs	r3, #14
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4840      	ldr	r0, [pc, #256]	; (8000c88 <MX_GPIO_Init+0x4d0>)
 8000b88:	f000 fb7e 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b92:	2312      	movs	r3, #18
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4837      	ldr	r0, [pc, #220]	; (8000c88 <MX_GPIO_Init+0x4d0>)
 8000baa:	f000 fb6d 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb4:	2312      	movs	r3, #18
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4830      	ldr	r0, [pc, #192]	; (8000c8c <MX_GPIO_Init+0x4d4>)
 8000bcc:	f000 fb5c 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bd0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be2:	2307      	movs	r3, #7
 8000be4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	4619      	mov	r1, r3
 8000bec:	4827      	ldr	r0, [pc, #156]	; (8000c8c <MX_GPIO_Init+0x4d4>)
 8000bee:	f000 fb4b 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000bf2:	2348      	movs	r3, #72	; 0x48
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c02:	230e      	movs	r3, #14
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481c      	ldr	r0, [pc, #112]	; (8000c80 <MX_GPIO_Init+0x4c8>)
 8000c0e:	f000 fb3b 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c24:	2309      	movs	r3, #9
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4815      	ldr	r0, [pc, #84]	; (8000c84 <MX_GPIO_Init+0x4cc>)
 8000c30:	f000 fb2a 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c34:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_GPIO_Init+0x4cc>)
 8000c4e:	f000 fb1b 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c52:	2360      	movs	r3, #96	; 0x60
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c62:	230c      	movs	r3, #12
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <MX_GPIO_Init+0x4c4>)
 8000c6e:	f000 fb0b 	bl	8001288 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c72:	bf00      	nop
 8000c74:	3738      	adds	r7, #56	; 0x38
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	40020c00 	.word	0x40020c00
 8000c84:	40021800 	.word	0x40021800
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <notifywait_handler>:
/* USER CODE BEGIN 4 */

#define NOTIFY_BIT		0x01

static void notifywait_handler(void *pvParam)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0a0      	sub	sp, #128	; 0x80
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	6078      	str	r0, [r7, #4]

	uint32_t ulNotifiedValue = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	673b      	str	r3, [r7, #112]	; 0x70
	BaseType_t xReturn = pdFALSE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	677b      	str	r3, [r7, #116]	; 0x74
	char segger_buf[100];

	while(1)
	{
		// wait on wait event 0, Dont clear bits on entry, clear all bits on exit
		xReturn = xTaskNotifyWaitIndexed(0, 0x00, ULONG_MAX, &ulNotifiedValue, pdMS_TO_TICKS(740));
 8000ca0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ca4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8000ca8:	9200      	str	r2, [sp, #0]
 8000caa:	f04f 32ff 	mov.w	r2, #4294967295
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f002 fa9b 	bl	80031ec <xTaskGenericNotifyWait>
 8000cb6:	6778      	str	r0, [r7, #116]	; 0x74
		if (pdTRUE == xReturn) {
 8000cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d127      	bne.n	8000d0e <notifywait_handler+0x7e>

			if(ulNotifiedValue & NOTIFY_BIT) {
 8000cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0eb      	beq.n	8000ca0 <notifywait_handler+0x10>

				memset(segger_buf, 0, sizeof(segger_buf));
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	2264      	movs	r2, #100	; 0x64
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f005 fd97 	bl	8006804 <memset>
				snprintf(segger_buf, sizeof(segger_buf), "notifywait_handler: ulNotifiedValue %02lx", ulNotifiedValue);
 8000cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000cd8:	f107 000c 	add.w	r0, r7, #12
 8000cdc:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <notifywait_handler+0xa8>)
 8000cde:	2164      	movs	r1, #100	; 0x64
 8000ce0:	f005 fd4c 	bl	800677c <sniprintf>
				SEGGER_SYSVIEW_PrintfTarget(segger_buf);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f005 fca9 	bl	8006640 <SEGGER_SYSVIEW_PrintfTarget>

				HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf4:	4811      	ldr	r0, [pc, #68]	; (8000d3c <notifywait_handler+0xac>)
 8000cf6:	f000 fc73 	bl	80015e0 <HAL_GPIO_WritePin>
				vTaskDelay(pdMS_TO_TICKS(250));
 8000cfa:	20fa      	movs	r0, #250	; 0xfa
 8000cfc:	f001 fe7c 	bl	80029f8 <vTaskDelay>
				HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d06:	480d      	ldr	r0, [pc, #52]	; (8000d3c <notifywait_handler+0xac>)
 8000d08:	f000 fc6a 	bl	80015e0 <HAL_GPIO_WritePin>
 8000d0c:	e7c8      	b.n	8000ca0 <notifywait_handler+0x10>
			}
		} else {
			memset(segger_buf, 0, sizeof(segger_buf));
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	2264      	movs	r2, #100	; 0x64
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f005 fd74 	bl	8006804 <memset>
			snprintf(segger_buf, sizeof(segger_buf), "notifywait_handler: Timeout");
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <notifywait_handler+0xb0>)
 8000d22:	2164      	movs	r1, #100	; 0x64
 8000d24:	4618      	mov	r0, r3
 8000d26:	f005 fd29 	bl	800677c <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(segger_buf);
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 fc86 	bl	8006640 <SEGGER_SYSVIEW_PrintfTarget>
		xReturn = xTaskNotifyWaitIndexed(0, 0x00, ULONG_MAX, &ulNotifiedValue, pdMS_TO_TICKS(740));
 8000d34:	e7b4      	b.n	8000ca0 <notifywait_handler+0x10>
 8000d36:	bf00      	nop
 8000d38:	08007148 	.word	0x08007148
 8000d3c:	40021800 	.word	0x40021800
 8000d40:	08007174 	.word	0x08007174

08000d44 <notify_handler>:
}



static void notify_handler(void *pvParam)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	BaseType_t xWasDelayed;

	xLastWakeTime = xTaskGetTickCount ();
 8000d4c:	f001 fff6 	bl	8002d3c <xTaskGetTickCount>
 8000d50:	4603      	mov	r3, r0
 8000d52:	60fb      	str	r3, [r7, #12]

	while(1) {
		xWasDelayed = xTaskDelayUntil(&xLastWakeTime,pdMS_TO_TICKS(1000));
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 fdc9 	bl	80028f4 <xTaskDelayUntil>
 8000d62:	6178      	str	r0, [r7, #20]
		configASSERT(pdPASS == xWasDelayed);
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d00a      	beq.n	8000d80 <notify_handler+0x3c>
        __asm volatile
 8000d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6e:	f383 8811 	msr	BASEPRI, r3
 8000d72:	f3bf 8f6f 	isb	sy
 8000d76:	f3bf 8f4f 	dsb	sy
 8000d7a:	613b      	str	r3, [r7, #16]
    }
 8000d7c:	bf00      	nop
 8000d7e:	e7fe      	b.n	8000d7e <notify_handler+0x3a>
		SEGGER_SYSVIEW_PrintfTarget("notify_handler");
 8000d80:	4806      	ldr	r0, [pc, #24]	; (8000d9c <notify_handler+0x58>)
 8000d82:	f005 fc5d 	bl	8006640 <SEGGER_SYSVIEW_PrintfTarget>

		// pass the handler of the taskwait handler, set bit 1
		xTaskNotifyIndexed( xNotifyWaitTaskHandle, 0, NOTIFY_BIT, eSetBits);
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <notify_handler+0x5c>)
 8000d88:	6818      	ldr	r0, [r3, #0]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	2201      	movs	r2, #1
 8000d92:	2100      	movs	r1, #0
 8000d94:	f002 fab2 	bl	80032fc <xTaskGenericNotify>
		xWasDelayed = xTaskDelayUntil(&xLastWakeTime,pdMS_TO_TICKS(1000));
 8000d98:	e7dc      	b.n	8000d54 <notify_handler+0x10>
 8000d9a:	bf00      	nop
 8000d9c:	08007138 	.word	0x08007138
 8000da0:	2000008c 	.word	0x2000008c

08000da4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d101      	bne.n	8000dba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000db6:	f000 f965 	bl	8001084 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40001000 	.word	0x40001000

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000e12:	f002 fd59 	bl	80038c8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800

08000e24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08e      	sub	sp, #56	; 0x38
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <HAL_InitTick+0xe4>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	4a32      	ldr	r2, [pc, #200]	; (8000f08 <HAL_InitTick+0xe4>)
 8000e3e:	f043 0310 	orr.w	r3, r3, #16
 8000e42:	6413      	str	r3, [r2, #64]	; 0x40
 8000e44:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <HAL_InitTick+0xe4>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f003 0310 	and.w	r3, r3, #16
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e50:	f107 0210 	add.w	r2, r7, #16
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 f85e 	bl	8001f1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e60:	6a3b      	ldr	r3, [r7, #32]
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d103      	bne.n	8000e72 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e6a:	f001 f843 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8000e6e:	6378      	str	r0, [r7, #52]	; 0x34
 8000e70:	e004      	b.n	8000e7c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e72:	f001 f83f 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8000e76:	4603      	mov	r3, r0
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7e:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <HAL_InitTick+0xe8>)
 8000e80:	fba2 2303 	umull	r2, r3, r2, r3
 8000e84:	0c9b      	lsrs	r3, r3, #18
 8000e86:	3b01      	subs	r3, #1
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <HAL_InitTick+0xec>)
 8000e8c:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <HAL_InitTick+0xf0>)
 8000e8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_InitTick+0xec>)
 8000e92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e96:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e98:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <HAL_InitTick+0xec>)
 8000e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_InitTick+0xec>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <HAL_InitTick+0xec>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_InitTick+0xec>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000eb0:	4817      	ldr	r0, [pc, #92]	; (8000f10 <HAL_InitTick+0xec>)
 8000eb2:	f001 f865 	bl	8001f80 <HAL_TIM_Base_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ebc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d11b      	bne.n	8000efc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ec4:	4812      	ldr	r0, [pc, #72]	; (8000f10 <HAL_InitTick+0xec>)
 8000ec6:	f001 f8b5 	bl	8002034 <HAL_TIM_Base_Start_IT>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ed0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d111      	bne.n	8000efc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ed8:	2036      	movs	r0, #54	; 0x36
 8000eda:	f000 f9c7 	bl	800126c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d808      	bhi.n	8000ef6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	2036      	movs	r0, #54	; 0x36
 8000eea:	f000 f9a3 	bl	8001234 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_InitTick+0xf4>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	e002      	b.n	8000efc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000efc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3738      	adds	r7, #56	; 0x38
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	431bde83 	.word	0x431bde83
 8000f10:	20000090 	.word	0x20000090
 8000f14:	40001000 	.word	0x40001000
 8000f18:	20000004 	.word	0x20000004

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <TIM6_DAC_IRQHandler+0x10>)
 8000f4e:	f001 f8e1 	bl	8002114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000090 	.word	0x20000090

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f005 fc42 	bl	8006814 <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <_sbrk+0x64>)
 8000fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20030000 	.word	0x20030000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	200000d8 	.word	0x200000d8
 8000fc4:	200145d0 	.word	0x200145d0

08000fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <SystemInit+0x20>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <SystemInit+0x20>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001024 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff0:	f7ff ffea 	bl	8000fc8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800101a:	f005 fc01 	bl	8006820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fb05 	bl	800062c <main>
  bx  lr    
 8001022:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001024:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001030:	080072f4 	.word	0x080072f4
  ldr r2, =_sbss
 8001034:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001038:	200145d0 	.word	0x200145d0

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_Init+0x40>)
 800104a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_Init+0x40>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_Init+0x40>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f8d8 	bl	800121e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	200f      	movs	r0, #15
 8001070:	f7ff fed8 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff feae 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	200000dc 	.word	0x200000dc

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200000dc 	.word	0x200000dc

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	; (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	; (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff4c 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001246:	f7ff ff61 	bl	800110c <__NVIC_GetPriorityGrouping>
 800124a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	6978      	ldr	r0, [r7, #20]
 8001252:	f7ff ffb1 	bl	80011b8 <NVIC_EncodePriority>
 8001256:	4602      	mov	r2, r0
 8001258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff80 	bl	8001164 <__NVIC_SetPriority>
}
 8001264:	bf00      	nop
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff54 	bl	8001128 <__NVIC_EnableIRQ>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	e177      	b.n	8001594 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a4:	2201      	movs	r2, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	429a      	cmp	r2, r3
 80012be:	f040 8166 	bne.w	800158e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d005      	beq.n	80012da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d130      	bne.n	800133c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 0201 	and.w	r2, r3, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b03      	cmp	r3, #3
 8001346:	d017      	beq.n	8001378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d123      	bne.n	80013cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	69b9      	ldr	r1, [r7, #24]
 80013c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0203 	and.w	r2, r3, #3
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80c0 	beq.w	800158e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b66      	ldr	r3, [pc, #408]	; (80015ac <HAL_GPIO_Init+0x324>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a65      	ldr	r2, [pc, #404]	; (80015ac <HAL_GPIO_Init+0x324>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b63      	ldr	r3, [pc, #396]	; (80015ac <HAL_GPIO_Init+0x324>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142a:	4a61      	ldr	r2, [pc, #388]	; (80015b0 <HAL_GPIO_Init+0x328>)
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a58      	ldr	r2, [pc, #352]	; (80015b4 <HAL_GPIO_Init+0x32c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d037      	beq.n	80014c6 <HAL_GPIO_Init+0x23e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a57      	ldr	r2, [pc, #348]	; (80015b8 <HAL_GPIO_Init+0x330>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d031      	beq.n	80014c2 <HAL_GPIO_Init+0x23a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a56      	ldr	r2, [pc, #344]	; (80015bc <HAL_GPIO_Init+0x334>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d02b      	beq.n	80014be <HAL_GPIO_Init+0x236>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a55      	ldr	r2, [pc, #340]	; (80015c0 <HAL_GPIO_Init+0x338>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d025      	beq.n	80014ba <HAL_GPIO_Init+0x232>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a54      	ldr	r2, [pc, #336]	; (80015c4 <HAL_GPIO_Init+0x33c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d01f      	beq.n	80014b6 <HAL_GPIO_Init+0x22e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a53      	ldr	r2, [pc, #332]	; (80015c8 <HAL_GPIO_Init+0x340>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d019      	beq.n	80014b2 <HAL_GPIO_Init+0x22a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a52      	ldr	r2, [pc, #328]	; (80015cc <HAL_GPIO_Init+0x344>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0x226>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a51      	ldr	r2, [pc, #324]	; (80015d0 <HAL_GPIO_Init+0x348>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d00d      	beq.n	80014aa <HAL_GPIO_Init+0x222>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a50      	ldr	r2, [pc, #320]	; (80015d4 <HAL_GPIO_Init+0x34c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d007      	beq.n	80014a6 <HAL_GPIO_Init+0x21e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4f      	ldr	r2, [pc, #316]	; (80015d8 <HAL_GPIO_Init+0x350>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d101      	bne.n	80014a2 <HAL_GPIO_Init+0x21a>
 800149e:	2309      	movs	r3, #9
 80014a0:	e012      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014a2:	230a      	movs	r3, #10
 80014a4:	e010      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014a6:	2308      	movs	r3, #8
 80014a8:	e00e      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014aa:	2307      	movs	r3, #7
 80014ac:	e00c      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014ae:	2306      	movs	r3, #6
 80014b0:	e00a      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014b2:	2305      	movs	r3, #5
 80014b4:	e008      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014b6:	2304      	movs	r3, #4
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014ba:	2303      	movs	r3, #3
 80014bc:	e004      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014be:	2302      	movs	r3, #2
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x240>
 80014c6:	2300      	movs	r3, #0
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	f002 0203 	and.w	r2, r2, #3
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4093      	lsls	r3, r2
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d8:	4935      	ldr	r1, [pc, #212]	; (80015b0 <HAL_GPIO_Init+0x328>)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <HAL_GPIO_Init+0x354>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800150a:	4a34      	ldr	r2, [pc, #208]	; (80015dc <HAL_GPIO_Init+0x354>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001510:	4b32      	ldr	r3, [pc, #200]	; (80015dc <HAL_GPIO_Init+0x354>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001534:	4a29      	ldr	r2, [pc, #164]	; (80015dc <HAL_GPIO_Init+0x354>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800153a:	4b28      	ldr	r3, [pc, #160]	; (80015dc <HAL_GPIO_Init+0x354>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155e:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <HAL_GPIO_Init+0x354>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_GPIO_Init+0x354>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001588:	4a14      	ldr	r2, [pc, #80]	; (80015dc <HAL_GPIO_Init+0x354>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3301      	adds	r3, #1
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	f67f ae84 	bls.w	80012a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40013800 	.word	0x40013800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40021400 	.word	0x40021400
 80015cc:	40021800 	.word	0x40021800
 80015d0:	40021c00 	.word	0x40021c00
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40022400 	.word	0x40022400
 80015dc:	40013c00 	.word	0x40013c00

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	041a      	lsls	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	619a      	str	r2, [r3, #24]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e267      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d075      	beq.n	800171e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001632:	4b88      	ldr	r3, [pc, #544]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b04      	cmp	r3, #4
 800163c:	d00c      	beq.n	8001658 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163e:	4b85      	ldr	r3, [pc, #532]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001646:	2b08      	cmp	r3, #8
 8001648:	d112      	bne.n	8001670 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164a:	4b82      	ldr	r3, [pc, #520]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001656:	d10b      	bne.n	8001670 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	4b7e      	ldr	r3, [pc, #504]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d05b      	beq.n	800171c <HAL_RCC_OscConfig+0x108>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d157      	bne.n	800171c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e242      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x74>
 800167a:	4b76      	ldr	r3, [pc, #472]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a75      	ldr	r2, [pc, #468]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e01d      	b.n	80016c4 <HAL_RCC_OscConfig+0xb0>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0x98>
 8001692:	4b70      	ldr	r3, [pc, #448]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a6f      	ldr	r2, [pc, #444]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b6d      	ldr	r3, [pc, #436]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6c      	ldr	r2, [pc, #432]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0xb0>
 80016ac:	4b69      	ldr	r3, [pc, #420]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a68      	ldr	r2, [pc, #416]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b66      	ldr	r3, [pc, #408]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a65      	ldr	r2, [pc, #404]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fcee 	bl	80010ac <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fcea 	bl	80010ac <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e207      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0xc0>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fcda 	bl	80010ac <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff fcd6 	bl	80010ac <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1f3      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	4b51      	ldr	r3, [pc, #324]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0xe8>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d063      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800172a:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00b      	beq.n	800174e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001736:	4b47      	ldr	r3, [pc, #284]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800173e:	2b08      	cmp	r3, #8
 8001740:	d11c      	bne.n	800177c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001742:	4b44      	ldr	r3, [pc, #272]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d116      	bne.n	800177c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	4b41      	ldr	r3, [pc, #260]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_RCC_OscConfig+0x152>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e1c7      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001766:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4937      	ldr	r1, [pc, #220]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	e03a      	b.n	80017f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001784:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_RCC_OscConfig+0x244>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff fc8f 	bl	80010ac <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff fc8b 	bl	80010ac <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e1a8      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4925      	ldr	r1, [pc, #148]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <HAL_RCC_OscConfig+0x244>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fc6e 	bl	80010ac <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d4:	f7ff fc6a 	bl	80010ac <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e187      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d036      	beq.n	800186c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d016      	beq.n	8001834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_RCC_OscConfig+0x248>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff fc4e 	bl	80010ac <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fc4a 	bl	80010ac <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e167      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_OscConfig+0x240>)
 8001828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x200>
 8001832:	e01b      	b.n	800186c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_RCC_OscConfig+0x248>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183a:	f7ff fc37 	bl	80010ac <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	e00e      	b.n	8001860 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001842:	f7ff fc33 	bl	80010ac <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d907      	bls.n	8001860 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e150      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
 8001854:	40023800 	.word	0x40023800
 8001858:	42470000 	.word	0x42470000
 800185c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	4b88      	ldr	r3, [pc, #544]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ea      	bne.n	8001842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8097 	beq.w	80019a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187e:	4b81      	ldr	r3, [pc, #516]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b7d      	ldr	r3, [pc, #500]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a7c      	ldr	r2, [pc, #496]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b7a      	ldr	r3, [pc, #488]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a6:	2301      	movs	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018aa:	4b77      	ldr	r3, [pc, #476]	; (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d118      	bne.n	80018e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b6:	4b74      	ldr	r3, [pc, #464]	; (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a73      	ldr	r2, [pc, #460]	; (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c2:	f7ff fbf3 	bl	80010ac <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ca:	f7ff fbef 	bl	80010ac <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e10c      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <HAL_RCC_OscConfig+0x474>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x2ea>
 80018f0:	4b64      	ldr	r3, [pc, #400]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f4:	4a63      	ldr	r2, [pc, #396]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6713      	str	r3, [r2, #112]	; 0x70
 80018fc:	e01c      	b.n	8001938 <HAL_RCC_OscConfig+0x324>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b05      	cmp	r3, #5
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x30c>
 8001906:	4b5f      	ldr	r3, [pc, #380]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	4a5e      	ldr	r2, [pc, #376]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6713      	str	r3, [r2, #112]	; 0x70
 8001912:	4b5c      	ldr	r3, [pc, #368]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	4a5b      	ldr	r2, [pc, #364]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6713      	str	r3, [r2, #112]	; 0x70
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0x324>
 8001920:	4b58      	ldr	r3, [pc, #352]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001924:	4a57      	ldr	r2, [pc, #348]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	6713      	str	r3, [r2, #112]	; 0x70
 800192c:	4b55      	ldr	r3, [pc, #340]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a54      	ldr	r2, [pc, #336]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001932:	f023 0304 	bic.w	r3, r3, #4
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d015      	beq.n	800196c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff fbb4 	bl	80010ac <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001946:	e00a      	b.n	800195e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff fbb0 	bl	80010ac <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e0cb      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195e:	4b49      	ldr	r3, [pc, #292]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0ee      	beq.n	8001948 <HAL_RCC_OscConfig+0x334>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196c:	f7ff fb9e 	bl	80010ac <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff fb9a 	bl	80010ac <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e0b5      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198a:	4b3e      	ldr	r3, [pc, #248]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1ee      	bne.n	8001974 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199c:	4b39      	ldr	r3, [pc, #228]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	4a38      	ldr	r2, [pc, #224]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 80019a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80a1 	beq.w	8001af4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019b2:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d05c      	beq.n	8001a78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d141      	bne.n	8001a4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <HAL_RCC_OscConfig+0x478>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fb6e 	bl	80010ac <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff fb6a 	bl	80010ac <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e087      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	019b      	lsls	r3, r3, #6
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	041b      	lsls	r3, r3, #16
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	491b      	ldr	r1, [pc, #108]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_RCC_OscConfig+0x478>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7ff fb43 	bl	80010ac <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7ff fb3f 	bl	80010ac <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e05c      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x416>
 8001a48:	e054      	b.n	8001af4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_RCC_OscConfig+0x478>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fb2c 	bl	80010ac <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff fb28 	bl	80010ac <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e045      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x444>
 8001a76:	e03d      	b.n	8001af4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d107      	bne.n	8001a90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e038      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_RCC_OscConfig+0x4ec>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d028      	beq.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d121      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d11a      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ac6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d111      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0cc      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d90c      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b65      	ldr	r3, [pc, #404]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b8      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	494d      	ldr	r1, [pc, #308]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d044      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d119      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc2:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e06f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e067      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f023 0203 	bic.w	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4934      	ldr	r1, [pc, #208]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf4:	f7ff fa5a 	bl	80010ac <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7ff fa56 	bl	80010ac <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e04f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 020c 	and.w	r2, r3, #12
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d1eb      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d20c      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e032      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c8a:	f000 f821 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	490a      	ldr	r1, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f8ba 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	0800725c 	.word	0x0800725c
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cd4:	b094      	sub	sp, #80	; 0x50
 8001cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	647b      	str	r3, [r7, #68]	; 0x44
 8001cdc:	2300      	movs	r3, #0
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce8:	4b79      	ldr	r3, [pc, #484]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d00d      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x40>
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	f200 80e1 	bhi.w	8001ebc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x34>
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d003      	beq.n	8001d0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d02:	e0db      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4b73      	ldr	r3, [pc, #460]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d08:	e0db      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d0a:	4b73      	ldr	r3, [pc, #460]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d0e:	e0d8      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d10:	4b6f      	ldr	r3, [pc, #444]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d1a:	4b6d      	ldr	r3, [pc, #436]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d063      	beq.n	8001dee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d26:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	099b      	lsrs	r3, r3, #6
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d42:	4622      	mov	r2, r4
 8001d44:	462b      	mov	r3, r5
 8001d46:	f04f 0000 	mov.w	r0, #0
 8001d4a:	f04f 0100 	mov.w	r1, #0
 8001d4e:	0159      	lsls	r1, r3, #5
 8001d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d54:	0150      	lsls	r0, r2, #5
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	1a51      	subs	r1, r2, r1
 8001d5e:	6139      	str	r1, [r7, #16]
 8001d60:	4629      	mov	r1, r5
 8001d62:	eb63 0301 	sbc.w	r3, r3, r1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d74:	4659      	mov	r1, fp
 8001d76:	018b      	lsls	r3, r1, #6
 8001d78:	4651      	mov	r1, sl
 8001d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d7e:	4651      	mov	r1, sl
 8001d80:	018a      	lsls	r2, r1, #6
 8001d82:	4651      	mov	r1, sl
 8001d84:	ebb2 0801 	subs.w	r8, r2, r1
 8001d88:	4659      	mov	r1, fp
 8001d8a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001da2:	4690      	mov	r8, r2
 8001da4:	4699      	mov	r9, r3
 8001da6:	4623      	mov	r3, r4
 8001da8:	eb18 0303 	adds.w	r3, r8, r3
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	462b      	mov	r3, r5
 8001db0:	eb49 0303 	adc.w	r3, r9, r3
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	024b      	lsls	r3, r1, #9
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dcc:	4621      	mov	r1, r4
 8001dce:	024a      	lsls	r2, r1, #9
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ddc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001de0:	f7fe faa6 	bl	8000330 <__aeabi_uldivmod>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4613      	mov	r3, r2
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dec:	e058      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dee:	4b38      	ldr	r3, [pc, #224]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	2200      	movs	r2, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	4611      	mov	r1, r2
 8001dfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dfe:	623b      	str	r3, [r7, #32]
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
 8001e04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e08:	4642      	mov	r2, r8
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	f04f 0000 	mov.w	r0, #0
 8001e10:	f04f 0100 	mov.w	r1, #0
 8001e14:	0159      	lsls	r1, r3, #5
 8001e16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e1a:	0150      	lsls	r0, r2, #5
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4641      	mov	r1, r8
 8001e22:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e26:	4649      	mov	r1, r9
 8001e28:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e40:	ebb2 040a 	subs.w	r4, r2, sl
 8001e44:	eb63 050b 	sbc.w	r5, r3, fp
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	00eb      	lsls	r3, r5, #3
 8001e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e56:	00e2      	lsls	r2, r4, #3
 8001e58:	4614      	mov	r4, r2
 8001e5a:	461d      	mov	r5, r3
 8001e5c:	4643      	mov	r3, r8
 8001e5e:	18e3      	adds	r3, r4, r3
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	464b      	mov	r3, r9
 8001e64:	eb45 0303 	adc.w	r3, r5, r3
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e76:	4629      	mov	r1, r5
 8001e78:	028b      	lsls	r3, r1, #10
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e80:	4621      	mov	r1, r4
 8001e82:	028a      	lsls	r2, r1, #10
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	61fa      	str	r2, [r7, #28]
 8001e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e94:	f7fe fa4c 	bl	8000330 <__aeabi_uldivmod>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	0c1b      	lsrs	r3, r3, #16
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001eb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eba:	e002      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ebe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3750      	adds	r7, #80	; 0x50
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	00f42400 	.word	0x00f42400
 8001ed8:	007a1200 	.word	0x007a1200

08001edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ef8:	f7ff fff0 	bl	8001edc <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	0a9b      	lsrs	r3, r3, #10
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	; (8001f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	0800726c 	.word	0x0800726c

08001f1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	220f      	movs	r2, #15
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0203 	and.w	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_RCC_GetClockConfig+0x60>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 020f 	and.w	r2, r3, #15
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	601a      	str	r2, [r3, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40023c00 	.word	0x40023c00

08001f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e041      	b.n	8002016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f839 	bl	800201e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 f9c0 	bl	8002344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d001      	beq.n	800204c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e04e      	b.n	80020ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a23      	ldr	r2, [pc, #140]	; (80020f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d022      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x80>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002076:	d01d      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x80>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <HAL_TIM_Base_Start_IT+0xc8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d018      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x80>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a1e      	ldr	r2, [pc, #120]	; (8002100 <HAL_TIM_Base_Start_IT+0xcc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d013      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x80>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1c      	ldr	r2, [pc, #112]	; (8002104 <HAL_TIM_Base_Start_IT+0xd0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00e      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x80>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1b      	ldr	r2, [pc, #108]	; (8002108 <HAL_TIM_Base_Start_IT+0xd4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d009      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x80>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a19      	ldr	r2, [pc, #100]	; (800210c <HAL_TIM_Base_Start_IT+0xd8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d004      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x80>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_TIM_Base_Start_IT+0xdc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d111      	bne.n	80020d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d010      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0201 	orr.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d6:	e007      	b.n	80020e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40000400 	.word	0x40000400
 8002100:	40000800 	.word	0x40000800
 8002104:	40000c00 	.word	0x40000c00
 8002108:	40010400 	.word	0x40010400
 800210c:	40014000 	.word	0x40014000
 8002110:	40001800 	.word	0x40001800

08002114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d020      	beq.n	8002178 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01b      	beq.n	8002178 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0202 	mvn.w	r2, #2
 8002148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f8d2 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
 8002164:	e005      	b.n	8002172 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f8c4 	bl	80022f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f8d5 	bl	800231c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d020      	beq.n	80021c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01b      	beq.n	80021c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0204 	mvn.w	r2, #4
 8002194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2202      	movs	r2, #2
 800219a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f8ac 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
 80021b0:	e005      	b.n	80021be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f89e 	bl	80022f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f8af 	bl	800231c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d020      	beq.n	8002210 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01b      	beq.n	8002210 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0208 	mvn.w	r2, #8
 80021e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2204      	movs	r2, #4
 80021e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f886 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
 80021fc:	e005      	b.n	800220a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f878 	bl	80022f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f889 	bl	800231c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	d020      	beq.n	800225c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01b      	beq.n	800225c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0210 	mvn.w	r2, #16
 800222c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2208      	movs	r2, #8
 8002232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f860 	bl	8002308 <HAL_TIM_IC_CaptureCallback>
 8002248:	e005      	b.n	8002256 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f852 	bl	80022f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f863 	bl	800231c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00c      	beq.n	8002280 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0201 	mvn.w	r2, #1
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fd92 	bl	8000da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00c      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f906 	bl	80024b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00c      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f834 	bl	8002330 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0220 	mvn.w	r2, #32
 80022e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f8d8 	bl	800249c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a46      	ldr	r2, [pc, #280]	; (8002470 <TIM_Base_SetConfig+0x12c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d013      	beq.n	8002384 <TIM_Base_SetConfig+0x40>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002362:	d00f      	beq.n	8002384 <TIM_Base_SetConfig+0x40>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a43      	ldr	r2, [pc, #268]	; (8002474 <TIM_Base_SetConfig+0x130>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00b      	beq.n	8002384 <TIM_Base_SetConfig+0x40>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a42      	ldr	r2, [pc, #264]	; (8002478 <TIM_Base_SetConfig+0x134>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <TIM_Base_SetConfig+0x40>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a41      	ldr	r2, [pc, #260]	; (800247c <TIM_Base_SetConfig+0x138>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d003      	beq.n	8002384 <TIM_Base_SetConfig+0x40>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a40      	ldr	r2, [pc, #256]	; (8002480 <TIM_Base_SetConfig+0x13c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d108      	bne.n	8002396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a35      	ldr	r2, [pc, #212]	; (8002470 <TIM_Base_SetConfig+0x12c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d02b      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a4:	d027      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a32      	ldr	r2, [pc, #200]	; (8002474 <TIM_Base_SetConfig+0x130>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d023      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a31      	ldr	r2, [pc, #196]	; (8002478 <TIM_Base_SetConfig+0x134>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01f      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a30      	ldr	r2, [pc, #192]	; (800247c <TIM_Base_SetConfig+0x138>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01b      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a2f      	ldr	r2, [pc, #188]	; (8002480 <TIM_Base_SetConfig+0x13c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d017      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a2e      	ldr	r2, [pc, #184]	; (8002484 <TIM_Base_SetConfig+0x140>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a2d      	ldr	r2, [pc, #180]	; (8002488 <TIM_Base_SetConfig+0x144>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00f      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a2c      	ldr	r2, [pc, #176]	; (800248c <TIM_Base_SetConfig+0x148>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00b      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a2b      	ldr	r2, [pc, #172]	; (8002490 <TIM_Base_SetConfig+0x14c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a2a      	ldr	r2, [pc, #168]	; (8002494 <TIM_Base_SetConfig+0x150>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d003      	beq.n	80023f6 <TIM_Base_SetConfig+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a29      	ldr	r2, [pc, #164]	; (8002498 <TIM_Base_SetConfig+0x154>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d108      	bne.n	8002408 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a10      	ldr	r2, [pc, #64]	; (8002470 <TIM_Base_SetConfig+0x12c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d003      	beq.n	800243c <TIM_Base_SetConfig+0xf8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <TIM_Base_SetConfig+0x13c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d103      	bne.n	8002444 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d105      	bne.n	8002462 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f023 0201 	bic.w	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	611a      	str	r2, [r3, #16]
  }
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40010000 	.word	0x40010000
 8002474:	40000400 	.word	0x40000400
 8002478:	40000800 	.word	0x40000800
 800247c:	40000c00 	.word	0x40000c00
 8002480:	40010400 	.word	0x40010400
 8002484:	40014000 	.word	0x40014000
 8002488:	40014400 	.word	0x40014400
 800248c:	40014800 	.word	0x40014800
 8002490:	40001800 	.word	0x40001800
 8002494:	40001c00 	.word	0x40001c00
 8002498:	40002000 	.word	0x40002000

0800249c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f103 0208 	add.w	r2, r3, #8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295
 80024dc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f103 0208 	add.w	r2, r3, #8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f103 0208 	add.w	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800251e:	b480      	push	{r7}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d103      	bne.n	800253e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e00c      	b.n	8002558 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3308      	adds	r3, #8
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e002      	b.n	800254c <vListInsert+0x2e>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	429a      	cmp	r2, r3
 8002556:	d2f6      	bcs.n	8002546 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6892      	ldr	r2, [r2, #8]
 80025a6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6852      	ldr	r2, [r2, #4]
 80025b0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d103      	bne.n	80025c4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	1e5a      	subs	r2, r3, #1
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08c      	sub	sp, #48	; 0x30
 80025e8:	af04      	add	r7, sp, #16
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f001 fb0f 	bl	8003c1c <pvPortMalloc>
 80025fe:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d013      	beq.n	800262e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002606:	2058      	movs	r0, #88	; 0x58
 8002608:	f001 fb08 	bl	8003c1c <pvPortMalloc>
 800260c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002614:	2258      	movs	r2, #88	; 0x58
 8002616:	2100      	movs	r1, #0
 8002618:	69f8      	ldr	r0, [r7, #28]
 800261a:	f004 f8f3 	bl	8006804 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
 8002624:	e005      	b.n	8002632 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	f001 fbb2 	bl	8003d90 <vPortFree>
 800262c:	e001      	b.n	8002632 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002638:	88fa      	ldrh	r2, [r7, #6]
 800263a:	2300      	movs	r3, #0
 800263c:	9303      	str	r3, [sp, #12]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	9302      	str	r3, [sp, #8]
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f80e 	bl	8002670 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002654:	69f8      	ldr	r0, [r7, #28]
 8002656:	f000 f899 	bl	800278c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800265a:	2301      	movs	r3, #1
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	e002      	b.n	8002666 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002666:	69bb      	ldr	r3, [r7, #24]
    }
 8002668:	4618      	mov	r0, r3
 800266a:	3720      	adds	r7, #32
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	461a      	mov	r2, r3
 8002688:	21a5      	movs	r1, #165	; 0xa5
 800268a:	f004 f8bb 	bl	8006804 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002698:	3b01      	subs	r3, #1
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f023 0307 	bic.w	r3, r3, #7
 80026a6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <prvInitialiseNewTask+0x58>
        __asm volatile
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	617b      	str	r3, [r7, #20]
    }
 80026c4:	bf00      	nop
 80026c6:	e7fe      	b.n	80026c6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d01e      	beq.n	800270c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	e012      	b.n	80026fa <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	4413      	add	r3, r2
 80026da:	7819      	ldrb	r1, [r3, #0]
 80026dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	4413      	add	r3, r2
 80026e2:	3334      	adds	r3, #52	; 0x34
 80026e4:	460a      	mov	r2, r1
 80026e6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	3301      	adds	r3, #1
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	2b09      	cmp	r3, #9
 80026fe:	d9e9      	bls.n	80026d4 <prvInitialiseNewTask+0x64>
 8002700:	e000      	b.n	8002704 <prvInitialiseNewTask+0x94>
            {
                break;
 8002702:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	2b04      	cmp	r3, #4
 8002710:	d90a      	bls.n	8002728 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	613b      	str	r3, [r7, #16]
    }
 8002724:	bf00      	nop
 8002726:	e7fe      	b.n	8002726 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	2b04      	cmp	r3, #4
 800272c:	d901      	bls.n	8002732 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800272e:	2304      	movs	r3, #4
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002736:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800273c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	3304      	adds	r3, #4
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fede 	bl	8002504 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	3318      	adds	r3, #24
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fed9 	bl	8002504 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002756:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	f1c3 0205 	rsb	r2, r3, #5
 800275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002760:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002766:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	68f9      	ldr	r1, [r7, #12]
 800276c:	69b8      	ldr	r0, [r7, #24]
 800276e:	f000 ff79 	bl	8003664 <pxPortInitialiseStack>
 8002772:	4602      	mov	r2, r0
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002782:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002784:	bf00      	nop
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800278c:	b5b0      	push	{r4, r5, r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af02      	add	r7, sp, #8
 8002792:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002794:	f001 f916 	bl	80039c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002798:	4b4f      	ldr	r3, [pc, #316]	; (80028d8 <prvAddNewTaskToReadyList+0x14c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	4a4e      	ldr	r2, [pc, #312]	; (80028d8 <prvAddNewTaskToReadyList+0x14c>)
 80027a0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80027a2:	4b4e      	ldr	r3, [pc, #312]	; (80028dc <prvAddNewTaskToReadyList+0x150>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80027aa:	4a4c      	ldr	r2, [pc, #304]	; (80028dc <prvAddNewTaskToReadyList+0x150>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027b0:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <prvAddNewTaskToReadyList+0x14c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d110      	bne.n	80027da <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80027b8:	f000 fc7e 	bl	80030b8 <prvInitialiseTaskLists>
 80027bc:	e00d      	b.n	80027da <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80027be:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <prvAddNewTaskToReadyList+0x154>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027c6:	4b45      	ldr	r3, [pc, #276]	; (80028dc <prvAddNewTaskToReadyList+0x150>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d802      	bhi.n	80027da <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80027d4:	4a41      	ldr	r2, [pc, #260]	; (80028dc <prvAddNewTaskToReadyList+0x150>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80027da:	4b42      	ldr	r3, [pc, #264]	; (80028e4 <prvAddNewTaskToReadyList+0x158>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3301      	adds	r3, #1
 80027e0:	4a40      	ldr	r2, [pc, #256]	; (80028e4 <prvAddNewTaskToReadyList+0x158>)
 80027e2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027e4:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <prvAddNewTaskToReadyList+0x158>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d016      	beq.n	8002820 <prvAddNewTaskToReadyList+0x94>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 fd67 	bl	80062c8 <SEGGER_SYSVIEW_OnTaskCreate>
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	461d      	mov	r5, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461c      	mov	r4, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	1ae3      	subs	r3, r4, r3
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	462b      	mov	r3, r5
 800281c:	f001 fc7a 	bl	8004114 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	f003 fdd4 	bl	80063d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	2201      	movs	r2, #1
 800282e:	409a      	lsls	r2, r3
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <prvAddNewTaskToReadyList+0x15c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	4a2c      	ldr	r2, [pc, #176]	; (80028e8 <prvAddNewTaskToReadyList+0x15c>)
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283e:	492b      	ldr	r1, [pc, #172]	; (80028ec <prvAddNewTaskToReadyList+0x160>)
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	3304      	adds	r3, #4
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	3204      	adds	r2, #4
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	1d1a      	adds	r2, r3, #4
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <prvAddNewTaskToReadyList+0x160>)
 800287e:	441a      	add	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	615a      	str	r2, [r3, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002888:	4918      	ldr	r1, [pc, #96]	; (80028ec <prvAddNewTaskToReadyList+0x160>)
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	1c59      	adds	r1, r3, #1
 8002898:	4814      	ldr	r0, [pc, #80]	; (80028ec <prvAddNewTaskToReadyList+0x160>)
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4403      	add	r3, r0
 80028a4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80028a6:	f001 f8bd 	bl	8003a24 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <prvAddNewTaskToReadyList+0x154>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00e      	beq.n	80028d0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028b2:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <prvAddNewTaskToReadyList+0x150>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	429a      	cmp	r2, r3
 80028be:	d207      	bcs.n	80028d0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <prvAddNewTaskToReadyList+0x164>)
 80028c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bdb0      	pop	{r4, r5, r7, pc}
 80028d8:	200001b8 	.word	0x200001b8
 80028dc:	200000e0 	.word	0x200000e0
 80028e0:	200001c4 	.word	0x200001c4
 80028e4:	200001d4 	.word	0x200001d4
 80028e8:	200001c0 	.word	0x200001c0
 80028ec:	200000e4 	.word	0x200000e4
 80028f0:	e000ed04 	.word	0xe000ed04

080028f4 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80028fe:	2300      	movs	r3, #0
 8002900:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <xTaskDelayUntil+0x2a>
        __asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	617b      	str	r3, [r7, #20]
    }
 800291a:	bf00      	nop
 800291c:	e7fe      	b.n	800291c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <xTaskDelayUntil+0x46>
        __asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	613b      	str	r3, [r7, #16]
    }
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800293a:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <xTaskDelayUntil+0xf8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <xTaskDelayUntil+0x64>
        __asm volatile
 8002942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	60fb      	str	r3, [r7, #12]
    }
 8002954:	bf00      	nop
 8002956:	e7fe      	b.n	8002956 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002958:	f000 f8e2 	bl	8002b20 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800295c:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <xTaskDelayUntil+0xfc>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	4413      	add	r3, r2
 800296a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	429a      	cmp	r2, r3
 8002974:	d20b      	bcs.n	800298e <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	429a      	cmp	r2, r3
 800297e:	d211      	bcs.n	80029a4 <xTaskDelayUntil+0xb0>
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	429a      	cmp	r2, r3
 8002986:	d90d      	bls.n	80029a4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002988:	2301      	movs	r3, #1
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
 800298c:	e00a      	b.n	80029a4 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	429a      	cmp	r2, r3
 8002996:	d303      	bcc.n	80029a0 <xTaskDelayUntil+0xac>
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	429a      	cmp	r2, r3
 800299e:	d901      	bls.n	80029a4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80029a0:	2301      	movs	r3, #1
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d009      	beq.n	80029c4 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80029b0:	2024      	movs	r0, #36	; 0x24
 80029b2:	f002 ffe3 	bl	800597c <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fdd0 	bl	8003564 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80029c4:	f000 f8ba 	bl	8002b3c <xTaskResumeAll>
 80029c8:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <xTaskDelayUntil+0x100>)
 80029d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80029e2:	4618      	mov	r0, r3
 80029e4:	3728      	adds	r7, #40	; 0x28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200001e0 	.word	0x200001e0
 80029f0:	200001bc 	.word	0x200001bc
 80029f4:	e000ed04 	.word	0xe000ed04

080029f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01b      	beq.n	8002a42 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002a0a:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <vTaskDelay+0x68>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <vTaskDelay+0x30>
        __asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	60bb      	str	r3, [r7, #8]
    }
 8002a24:	bf00      	nop
 8002a26:	e7fe      	b.n	8002a26 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002a28:	f000 f87a 	bl	8002b20 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	2023      	movs	r0, #35	; 0x23
 8002a30:	f002 ffc2 	bl	80059b8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a34:	2100      	movs	r1, #0
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fd94 	bl	8003564 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002a3c:	f000 f87e 	bl	8002b3c <xTaskResumeAll>
 8002a40:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d107      	bne.n	8002a58 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <vTaskDelay+0x6c>)
 8002a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200001e0 	.word	0x200001e0
 8002a64:	e000ed04 	.word	0xe000ed04

08002a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002a6e:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <vTaskStartScheduler+0x98>)
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	2300      	movs	r3, #0
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	2300      	movs	r3, #0
 8002a78:	2282      	movs	r2, #130	; 0x82
 8002a7a:	4922      	ldr	r1, [pc, #136]	; (8002b04 <vTaskStartScheduler+0x9c>)
 8002a7c:	4822      	ldr	r0, [pc, #136]	; (8002b08 <vTaskStartScheduler+0xa0>)
 8002a7e:	f7ff fdb1 	bl	80025e4 <xTaskCreate>
 8002a82:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d124      	bne.n	8002ad4 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	60bb      	str	r3, [r7, #8]
    }
 8002a9c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <vTaskStartScheduler+0xa4>)
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <vTaskStartScheduler+0xa8>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <vTaskStartScheduler+0xac>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002ab2:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <vTaskStartScheduler+0xb0>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <vTaskStartScheduler+0x98>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d102      	bne.n	8002ac4 <vTaskStartScheduler+0x5c>
 8002abe:	f003 fbe7 	bl	8006290 <SEGGER_SYSVIEW_OnIdle>
 8002ac2:	e004      	b.n	8002ace <vTaskStartScheduler+0x66>
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <vTaskStartScheduler+0xb0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 fc3f 	bl	800634c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002ace:	f000 fe59 	bl	8003784 <xPortStartScheduler>
 8002ad2:	e00e      	b.n	8002af2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ada:	d10a      	bne.n	8002af2 <vTaskStartScheduler+0x8a>
        __asm volatile
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	607b      	str	r3, [r7, #4]
    }
 8002aee:	bf00      	nop
 8002af0:	e7fe      	b.n	8002af0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <vTaskStartScheduler+0xb4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
}
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200001dc 	.word	0x200001dc
 8002b04:	08007190 	.word	0x08007190
 8002b08:	08003089 	.word	0x08003089
 8002b0c:	200001d8 	.word	0x200001d8
 8002b10:	200001c4 	.word	0x200001c4
 8002b14:	200001bc 	.word	0x200001bc
 8002b18:	200000e0 	.word	0x200000e0
 8002b1c:	2000000c 	.word	0x2000000c

08002b20 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <vTaskSuspendAll+0x18>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	4a03      	ldr	r2, [pc, #12]	; (8002b38 <vTaskSuspendAll+0x18>)
 8002b2c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	200001e0 	.word	0x200001e0

08002b3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b4a:	4b73      	ldr	r3, [pc, #460]	; (8002d18 <xTaskResumeAll+0x1dc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10a      	bne.n	8002b68 <xTaskResumeAll+0x2c>
        __asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	607b      	str	r3, [r7, #4]
    }
 8002b64:	bf00      	nop
 8002b66:	e7fe      	b.n	8002b66 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b68:	f000 ff2c 	bl	80039c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b6c:	4b6a      	ldr	r3, [pc, #424]	; (8002d18 <xTaskResumeAll+0x1dc>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	4a69      	ldr	r2, [pc, #420]	; (8002d18 <xTaskResumeAll+0x1dc>)
 8002b74:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b76:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <xTaskResumeAll+0x1dc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 80c4 	bne.w	8002d08 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b80:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <xTaskResumeAll+0x1e0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80bf 	beq.w	8002d08 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b8a:	e08e      	b.n	8002caa <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b8c:	4b64      	ldr	r3, [pc, #400]	; (8002d20 <xTaskResumeAll+0x1e4>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	6a12      	ldr	r2, [r2, #32]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	69d2      	ldr	r2, [r2, #28]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3318      	adds	r3, #24
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d103      	bne.n	8002bc2 <xTaskResumeAll+0x86>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	6a1a      	ldr	r2, [r3, #32]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	1e5a      	subs	r2, r3, #1
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	68d2      	ldr	r2, [r2, #12]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	6892      	ldr	r2, [r2, #8]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d103      	bne.n	8002c00 <xTaskResumeAll+0xc4>
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2200      	movs	r2, #0
 8002c04:	615a      	str	r2, [r3, #20]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	1e5a      	subs	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 fbdc 	bl	80063d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <xTaskResumeAll+0x1e8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	4a3f      	ldr	r2, [pc, #252]	; (8002d24 <xTaskResumeAll+0x1e8>)
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2e:	493e      	ldr	r1, [pc, #248]	; (8002d28 <xTaskResumeAll+0x1ec>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	3204      	adds	r2, #4
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	1d1a      	adds	r2, r3, #4
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4a2e      	ldr	r2, [pc, #184]	; (8002d28 <xTaskResumeAll+0x1ec>)
 8002c6e:	441a      	add	r2, r3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	615a      	str	r2, [r3, #20]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c78:	492b      	ldr	r1, [pc, #172]	; (8002d28 <xTaskResumeAll+0x1ec>)
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	1c59      	adds	r1, r3, #1
 8002c88:	4827      	ldr	r0, [pc, #156]	; (8002d28 <xTaskResumeAll+0x1ec>)
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4403      	add	r3, r0
 8002c94:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <xTaskResumeAll+0x1f0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d302      	bcc.n	8002caa <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002ca4:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <xTaskResumeAll+0x1f4>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <xTaskResumeAll+0x1e4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f47f af6c 	bne.w	8002b8c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002cba:	f000 fa7b 	bl	80031b4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <xTaskResumeAll+0x1f8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002cca:	f000 f859 	bl	8002d80 <xTaskIncrementTick>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002cd4:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <xTaskResumeAll+0x1f4>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f1      	bne.n	8002cca <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002ce6:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <xTaskResumeAll+0x1f8>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <xTaskResumeAll+0x1f4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <xTaskResumeAll+0x1fc>)
 8002cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d08:	f000 fe8c 	bl	8003a24 <vPortExitCritical>

    return xAlreadyYielded;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200001e0 	.word	0x200001e0
 8002d1c:	200001b8 	.word	0x200001b8
 8002d20:	20000178 	.word	0x20000178
 8002d24:	200001c0 	.word	0x200001c0
 8002d28:	200000e4 	.word	0x200000e4
 8002d2c:	200000e0 	.word	0x200000e0
 8002d30:	200001cc 	.word	0x200001cc
 8002d34:	200001c8 	.word	0x200001c8
 8002d38:	e000ed04 	.word	0xe000ed04

08002d3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <xTaskGetTickCount+0x1c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d48:	687b      	ldr	r3, [r7, #4]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	200001bc 	.word	0x200001bc

08002d5c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d62:	f000 ff1b 	bl	8003b9c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <xTaskGetTickCountFromISR+0x20>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002d70:	683b      	ldr	r3, [r7, #0]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200001bc 	.word	0x200001bc

08002d80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d8a:	4b7f      	ldr	r3, [pc, #508]	; (8002f88 <xTaskIncrementTick+0x208>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 80f0 	bne.w	8002f74 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d94:	4b7d      	ldr	r3, [pc, #500]	; (8002f8c <xTaskIncrementTick+0x20c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d9c:	4a7b      	ldr	r2, [pc, #492]	; (8002f8c <xTaskIncrementTick+0x20c>)
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d120      	bne.n	8002dea <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002da8:	4b79      	ldr	r3, [pc, #484]	; (8002f90 <xTaskIncrementTick+0x210>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	607b      	str	r3, [r7, #4]
    }
 8002dc4:	bf00      	nop
 8002dc6:	e7fe      	b.n	8002dc6 <xTaskIncrementTick+0x46>
 8002dc8:	4b71      	ldr	r3, [pc, #452]	; (8002f90 <xTaskIncrementTick+0x210>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	4b71      	ldr	r3, [pc, #452]	; (8002f94 <xTaskIncrementTick+0x214>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6f      	ldr	r2, [pc, #444]	; (8002f90 <xTaskIncrementTick+0x210>)
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4a6f      	ldr	r2, [pc, #444]	; (8002f94 <xTaskIncrementTick+0x214>)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b6e      	ldr	r3, [pc, #440]	; (8002f98 <xTaskIncrementTick+0x218>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	4a6d      	ldr	r2, [pc, #436]	; (8002f98 <xTaskIncrementTick+0x218>)
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	f000 f9e5 	bl	80031b4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002dea:	4b6c      	ldr	r3, [pc, #432]	; (8002f9c <xTaskIncrementTick+0x21c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a3a      	ldr	r2, [r7, #32]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	f0c0 80aa 	bcc.w	8002f4a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002df6:	4b66      	ldr	r3, [pc, #408]	; (8002f90 <xTaskIncrementTick+0x210>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d104      	bne.n	8002e0a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e00:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <xTaskIncrementTick+0x21c>)
 8002e02:	f04f 32ff 	mov.w	r2, #4294967295
 8002e06:	601a      	str	r2, [r3, #0]
                    break;
 8002e08:	e09f      	b.n	8002f4a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e0a:	4b61      	ldr	r3, [pc, #388]	; (8002f90 <xTaskIncrementTick+0x210>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002e1a:	6a3a      	ldr	r2, [r7, #32]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d203      	bcs.n	8002e2a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e22:	4a5e      	ldr	r2, [pc, #376]	; (8002f9c <xTaskIncrementTick+0x21c>)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002e28:	e08f      	b.n	8002f4a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	68d2      	ldr	r2, [r2, #12]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	6892      	ldr	r2, [r2, #8]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d103      	bne.n	8002e58 <xTaskIncrementTick+0xd8>
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	615a      	str	r2, [r3, #20]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	1e5a      	subs	r2, r3, #1
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01e      	beq.n	8002eae <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	6a12      	ldr	r2, [r2, #32]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	69d2      	ldr	r2, [r2, #28]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	3318      	adds	r3, #24
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d103      	bne.n	8002e9e <xTaskIncrementTick+0x11e>
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	6a1a      	ldr	r2, [r3, #32]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	1e5a      	subs	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 fa8d 	bl	80063d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	2201      	movs	r2, #1
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	4b38      	ldr	r3, [pc, #224]	; (8002fa0 <xTaskIncrementTick+0x220>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	4a36      	ldr	r2, [pc, #216]	; (8002fa0 <xTaskIncrementTick+0x220>)
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ecc:	4935      	ldr	r1, [pc, #212]	; (8002fa4 <xTaskIncrementTick+0x224>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3304      	adds	r3, #4
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	60da      	str	r2, [r3, #12]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	3204      	adds	r2, #4
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	1d1a      	adds	r2, r3, #4
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <xTaskIncrementTick+0x224>)
 8002f0c:	441a      	add	r2, r3
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	615a      	str	r2, [r3, #20]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f16:	4923      	ldr	r1, [pc, #140]	; (8002fa4 <xTaskIncrementTick+0x224>)
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	1c59      	adds	r1, r3, #1
 8002f26:	481f      	ldr	r0, [pc, #124]	; (8002fa4 <xTaskIncrementTick+0x224>)
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4403      	add	r3, r0
 8002f32:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <xTaskIncrementTick+0x228>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	f67f af59 	bls.w	8002df6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002f44:	2301      	movs	r3, #1
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f48:	e755      	b.n	8002df6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <xTaskIncrementTick+0x228>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	4914      	ldr	r1, [pc, #80]	; (8002fa4 <xTaskIncrementTick+0x224>)
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d901      	bls.n	8002f66 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8002f62:	2301      	movs	r3, #1
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <xTaskIncrementTick+0x22c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
 8002f72:	e004      	b.n	8002f7e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <xTaskIncrementTick+0x230>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <xTaskIncrementTick+0x230>)
 8002f7c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3728      	adds	r7, #40	; 0x28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200001e0 	.word	0x200001e0
 8002f8c:	200001bc 	.word	0x200001bc
 8002f90:	20000170 	.word	0x20000170
 8002f94:	20000174 	.word	0x20000174
 8002f98:	200001d0 	.word	0x200001d0
 8002f9c:	200001d8 	.word	0x200001d8
 8002fa0:	200001c0 	.word	0x200001c0
 8002fa4:	200000e4 	.word	0x200000e4
 8002fa8:	200000e0 	.word	0x200000e0
 8002fac:	200001cc 	.word	0x200001cc
 8002fb0:	200001c8 	.word	0x200001c8

08002fb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fba:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <vTaskSwitchContext+0xbc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <vTaskSwitchContext+0xc0>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002fc8:	e04d      	b.n	8003066 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002fca:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <vTaskSwitchContext+0xc0>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd0:	4b29      	ldr	r3, [pc, #164]	; (8003078 <vTaskSwitchContext+0xc4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	f1c3 031f 	rsb	r3, r3, #31
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	4925      	ldr	r1, [pc, #148]	; (800307c <vTaskSwitchContext+0xc8>)
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	607b      	str	r3, [r7, #4]
    }
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <vTaskSwitchContext+0x5a>
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4a18      	ldr	r2, [pc, #96]	; (800307c <vTaskSwitchContext+0xc8>)
 800301c:	4413      	add	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	3308      	adds	r3, #8
 8003032:	429a      	cmp	r2, r3
 8003034:	d104      	bne.n	8003040 <vTaskSwitchContext+0x8c>
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	4a0e      	ldr	r2, [pc, #56]	; (8003080 <vTaskSwitchContext+0xcc>)
 8003048:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <vTaskSwitchContext+0xcc>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <vTaskSwitchContext+0xd0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d102      	bne.n	800305c <vTaskSwitchContext+0xa8>
 8003056:	f003 f91b 	bl	8006290 <SEGGER_SYSVIEW_OnIdle>
}
 800305a:	e004      	b.n	8003066 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <vTaskSwitchContext+0xcc>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f003 f973 	bl	800634c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003066:	bf00      	nop
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200001e0 	.word	0x200001e0
 8003074:	200001cc 	.word	0x200001cc
 8003078:	200001c0 	.word	0x200001c0
 800307c:	200000e4 	.word	0x200000e4
 8003080:	200000e0 	.word	0x200000e0
 8003084:	200001dc 	.word	0x200001dc

08003088 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003090:	f000 f852 	bl	8003138 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <prvIdleTask+0x28>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d9f9      	bls.n	8003090 <prvIdleTask+0x8>
            {
                taskYIELD();
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <prvIdleTask+0x2c>)
 800309e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80030ac:	e7f0      	b.n	8003090 <prvIdleTask+0x8>
 80030ae:	bf00      	nop
 80030b0:	200000e4 	.word	0x200000e4
 80030b4:	e000ed04 	.word	0xe000ed04

080030b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	e00c      	b.n	80030de <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4a12      	ldr	r2, [pc, #72]	; (8003118 <prvInitialiseTaskLists+0x60>)
 80030d0:	4413      	add	r3, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff f9f6 	bl	80024c4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3301      	adds	r3, #1
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d9ef      	bls.n	80030c4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80030e4:	480d      	ldr	r0, [pc, #52]	; (800311c <prvInitialiseTaskLists+0x64>)
 80030e6:	f7ff f9ed 	bl	80024c4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80030ea:	480d      	ldr	r0, [pc, #52]	; (8003120 <prvInitialiseTaskLists+0x68>)
 80030ec:	f7ff f9ea 	bl	80024c4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80030f0:	480c      	ldr	r0, [pc, #48]	; (8003124 <prvInitialiseTaskLists+0x6c>)
 80030f2:	f7ff f9e7 	bl	80024c4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80030f6:	480c      	ldr	r0, [pc, #48]	; (8003128 <prvInitialiseTaskLists+0x70>)
 80030f8:	f7ff f9e4 	bl	80024c4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80030fc:	480b      	ldr	r0, [pc, #44]	; (800312c <prvInitialiseTaskLists+0x74>)
 80030fe:	f7ff f9e1 	bl	80024c4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <prvInitialiseTaskLists+0x78>)
 8003104:	4a05      	ldr	r2, [pc, #20]	; (800311c <prvInitialiseTaskLists+0x64>)
 8003106:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <prvInitialiseTaskLists+0x7c>)
 800310a:	4a05      	ldr	r2, [pc, #20]	; (8003120 <prvInitialiseTaskLists+0x68>)
 800310c:	601a      	str	r2, [r3, #0]
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200000e4 	.word	0x200000e4
 800311c:	20000148 	.word	0x20000148
 8003120:	2000015c 	.word	0x2000015c
 8003124:	20000178 	.word	0x20000178
 8003128:	2000018c 	.word	0x2000018c
 800312c:	200001a4 	.word	0x200001a4
 8003130:	20000170 	.word	0x20000170
 8003134:	20000174 	.word	0x20000174

08003138 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800313e:	e019      	b.n	8003174 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003140:	f000 fc40 	bl	80039c4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003144:	4b10      	ldr	r3, [pc, #64]	; (8003188 <prvCheckTasksWaitingTermination+0x50>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3304      	adds	r3, #4
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fa1d 	bl	8002590 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <prvCheckTasksWaitingTermination+0x54>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3b01      	subs	r3, #1
 800315c:	4a0b      	ldr	r2, [pc, #44]	; (800318c <prvCheckTasksWaitingTermination+0x54>)
 800315e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <prvCheckTasksWaitingTermination+0x58>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3b01      	subs	r3, #1
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <prvCheckTasksWaitingTermination+0x58>)
 8003168:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800316a:	f000 fc5b 	bl	8003a24 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f810 	bl	8003194 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <prvCheckTasksWaitingTermination+0x58>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e1      	bne.n	8003140 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	2000018c 	.word	0x2000018c
 800318c:	200001b8 	.word	0x200001b8
 8003190:	200001a0 	.word	0x200001a0

08003194 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fdf5 	bl	8003d90 <vPortFree>
            vPortFree( pxTCB );
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fdf2 	bl	8003d90 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <prvResetNextTaskUnblockTime+0x30>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <prvResetNextTaskUnblockTime+0x34>)
 80031c4:	f04f 32ff 	mov.w	r2, #4294967295
 80031c8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80031ca:	e005      	b.n	80031d8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <prvResetNextTaskUnblockTime+0x30>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <prvResetNextTaskUnblockTime+0x34>)
 80031d6:	6013      	str	r3, [r2, #0]
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000170 	.word	0x20000170
 80031e8:	200001d8 	.word	0x200001d8

080031ec <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	613b      	str	r3, [r7, #16]
    }
 8003212:	bf00      	nop
 8003214:	e7fe      	b.n	8003214 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003216:	f000 fbd5 	bl	80039c4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800321a:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <xTaskGenericNotifyWait+0x108>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	3354      	adds	r3, #84	; 0x54
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d022      	beq.n	8003272 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800322c:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <xTaskGenericNotifyWait+0x108>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	3214      	adds	r2, #20
 8003234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	43d2      	mvns	r2, r2
 800323c:	4011      	ands	r1, r2
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	3214      	adds	r2, #20
 8003242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003246:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <xTaskGenericNotifyWait+0x108>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4413      	add	r3, r2
 800324e:	3354      	adds	r3, #84	; 0x54
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800325a:	2101      	movs	r1, #1
 800325c:	6a38      	ldr	r0, [r7, #32]
 800325e:	f000 f981 	bl	8003564 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003262:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <xTaskGenericNotifyWait+0x10c>)
 8003264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003272:	f000 fbd7 	bl	8003a24 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003276:	f000 fba5 	bl	80039c4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	2040      	movs	r0, #64	; 0x40
 8003288:	f002 fc2c 	bl	8005ae4 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <xTaskGenericNotifyWait+0x108>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	3214      	adds	r2, #20
 800329a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80032a2:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <xTaskGenericNotifyWait+0x108>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	3354      	adds	r3, #84	; 0x54
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d002      	beq.n	80032ba <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	e00e      	b.n	80032d8 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80032ba:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <xTaskGenericNotifyWait+0x108>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	3214      	adds	r2, #20
 80032c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	43d2      	mvns	r2, r2
 80032ca:	4011      	ands	r1, r2
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	3214      	adds	r2, #20
 80032d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80032d4:	2301      	movs	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <xTaskGenericNotifyWait+0x108>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	3354      	adds	r3, #84	; 0x54
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80032e6:	f000 fb9d 	bl	8003a24 <vPortExitCritical>

        return xReturn;
 80032ea:	697b      	ldr	r3, [r7, #20]
    }
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	200000e0 	.word	0x200000e0
 80032f8:	e000ed04 	.word	0xe000ed04

080032fc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b090      	sub	sp, #64	; 0x40
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800330a:	2301      	movs	r3, #1
 800330c:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <xTaskGenericNotify+0x2e>
        __asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	623b      	str	r3, [r7, #32]
    }
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	61fb      	str	r3, [r7, #28]
    }
 8003342:	bf00      	nop
 8003344:	e7fe      	b.n	8003344 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 800334a:	f000 fb3b 	bl	80039c4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800334e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003350:	2b00      	cmp	r3, #0
 8003352:	d006      	beq.n	8003362 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	3214      	adds	r2, #20
 800335a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800335e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003360:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4413      	add	r3, r2
 8003368:	3354      	adds	r3, #84	; 0x54
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4413      	add	r3, r2
 8003376:	3354      	adds	r3, #84	; 0x54
 8003378:	2202      	movs	r2, #2
 800337a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	2b04      	cmp	r3, #4
 8003380:	d83b      	bhi.n	80033fa <xTaskGenericNotify+0xfe>
 8003382:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <xTaskGenericNotify+0x8c>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	08003419 	.word	0x08003419
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033b9 	.word	0x080033b9
 8003394:	080033d1 	.word	0x080033d1
 8003398:	080033df 	.word	0x080033df
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	3214      	adds	r2, #20
 80033a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	ea42 0103 	orr.w	r1, r2, r3
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	3214      	adds	r2, #20
 80033b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80033b6:	e032      	b.n	800341e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	3214      	adds	r2, #20
 80033be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c2:	1c59      	adds	r1, r3, #1
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	3214      	adds	r2, #20
 80033ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80033ce:	e026      	b.n	800341e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	3214      	adds	r2, #20
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80033dc:	e01f      	b.n	800341e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80033de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d006      	beq.n	80033f4 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	3214      	adds	r2, #20
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80033f2:	e014      	b.n	800341e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80033f8:	e011      	b.n	800341e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80033fa:	4b55      	ldr	r3, [pc, #340]	; (8003550 <xTaskGenericNotify+0x254>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <xTaskGenericNotify+0x120>
        __asm volatile
 8003402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	61bb      	str	r3, [r7, #24]
    }
 8003414:	bf00      	nop
 8003416:	e7fe      	b.n	8003416 <xTaskGenericNotify+0x11a>
                    break;
 8003418:	bf00      	nop
 800341a:	e000      	b.n	800341e <xTaskGenericNotify+0x122>

                    break;
 800341c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	4618      	mov	r0, r3
 8003422:	f003 f817 	bl	8006454 <SEGGER_SYSVIEW_ShrinkId>
 8003426:	4601      	mov	r1, r0
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	4613      	mov	r3, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	203e      	movs	r0, #62	; 0x3e
 8003434:	f002 fb56 	bl	8005ae4 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800343c:	2b01      	cmp	r3, #1
 800343e:	d17f      	bne.n	8003540 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344c:	68d2      	ldr	r2, [r2, #12]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003456:	6892      	ldr	r2, [r2, #8]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	3304      	adds	r3, #4
 8003462:	429a      	cmp	r2, r3
 8003464:	d103      	bne.n	800346e <xTaskGenericNotify+0x172>
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	2200      	movs	r2, #0
 8003472:	615a      	str	r2, [r3, #20]
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	1e5a      	subs	r2, r3, #1
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003480:	4618      	mov	r0, r3
 8003482:	f002 ffa5 	bl	80063d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	2201      	movs	r2, #1
 800348c:	409a      	lsls	r2, r3
 800348e:	4b31      	ldr	r3, [pc, #196]	; (8003554 <xTaskGenericNotify+0x258>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4313      	orrs	r3, r2
 8003494:	4a2f      	ldr	r2, [pc, #188]	; (8003554 <xTaskGenericNotify+0x258>)
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	492e      	ldr	r1, [pc, #184]	; (8003558 <xTaskGenericNotify+0x25c>)
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	3304      	adds	r3, #4
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c2:	3204      	adds	r2, #4
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	1d1a      	adds	r2, r3, #4
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	609a      	str	r2, [r3, #8]
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4a1f      	ldr	r2, [pc, #124]	; (8003558 <xTaskGenericNotify+0x25c>)
 80034dc:	441a      	add	r2, r3
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	615a      	str	r2, [r3, #20]
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e6:	491c      	ldr	r1, [pc, #112]	; (8003558 <xTaskGenericNotify+0x25c>)
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	1c59      	adds	r1, r3, #1
 80034f6:	4818      	ldr	r0, [pc, #96]	; (8003558 <xTaskGenericNotify+0x25c>)
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4403      	add	r3, r0
 8003502:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <xTaskGenericNotify+0x226>
        __asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	617b      	str	r3, [r7, #20]
    }
 800351e:	bf00      	nop
 8003520:	e7fe      	b.n	8003520 <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <xTaskGenericNotify+0x260>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	429a      	cmp	r2, r3
 800352e:	d907      	bls.n	8003540 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <xTaskGenericNotify+0x264>)
 8003532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003540:	f000 fa70 	bl	8003a24 <vPortExitCritical>

        return xReturn;
 8003544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003546:	4618      	mov	r0, r3
 8003548:	3738      	adds	r7, #56	; 0x38
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200001bc 	.word	0x200001bc
 8003554:	200001c0 	.word	0x200001c0
 8003558:	200000e4 	.word	0x200000e4
 800355c:	200000e0 	.word	0x200000e0
 8003560:	e000ed04 	.word	0xe000ed04

08003564 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800356e:	4b36      	ldr	r3, [pc, #216]	; (8003648 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003574:	4b35      	ldr	r3, [pc, #212]	; (800364c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3304      	adds	r3, #4
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f808 	bl	8002590 <uxListRemove>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003586:	4b31      	ldr	r3, [pc, #196]	; (800364c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	2201      	movs	r2, #1
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	4b2e      	ldr	r3, [pc, #184]	; (8003650 <prvAddCurrentTaskToDelayedList+0xec>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4013      	ands	r3, r2
 800359a:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <prvAddCurrentTaskToDelayedList+0xec>)
 800359c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d124      	bne.n	80035f0 <prvAddCurrentTaskToDelayedList+0x8c>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d021      	beq.n	80035f0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035ac:	4b29      	ldr	r3, [pc, #164]	; (8003654 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	4b26      	ldr	r3, [pc, #152]	; (800364c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	6892      	ldr	r2, [r2, #8]
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	4b21      	ldr	r3, [pc, #132]	; (800364c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	3204      	adds	r2, #4
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	4b1e      	ldr	r3, [pc, #120]	; (800364c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	1d1a      	adds	r2, r3, #4
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	609a      	str	r2, [r3, #8]
 80035da:	4b1c      	ldr	r3, [pc, #112]	; (800364c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035e0:	615a      	str	r2, [r3, #20]
 80035e2:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3301      	adds	r3, #1
 80035e8:	4a1a      	ldr	r2, [pc, #104]	; (8003654 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80035ee:	e026      	b.n	800363e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	429a      	cmp	r2, r3
 8003606:	d209      	bcs.n	800361c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003608:	4b13      	ldr	r3, [pc, #76]	; (8003658 <prvAddCurrentTaskToDelayedList+0xf4>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <prvAddCurrentTaskToDelayedList+0xe8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3304      	adds	r3, #4
 8003612:	4619      	mov	r1, r3
 8003614:	4610      	mov	r0, r2
 8003616:	f7fe ff82 	bl	800251e <vListInsert>
}
 800361a:	e010      	b.n	800363e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <prvAddCurrentTaskToDelayedList+0xf8>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3304      	adds	r3, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f7fe ff78 	bl	800251e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800362e:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	429a      	cmp	r2, r3
 8003636:	d202      	bcs.n	800363e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003638:	4a09      	ldr	r2, [pc, #36]	; (8003660 <prvAddCurrentTaskToDelayedList+0xfc>)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6013      	str	r3, [r2, #0]
}
 800363e:	bf00      	nop
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200001bc 	.word	0x200001bc
 800364c:	200000e0 	.word	0x200000e0
 8003650:	200001c0 	.word	0x200001c0
 8003654:	200001a4 	.word	0x200001a4
 8003658:	20000174 	.word	0x20000174
 800365c:	20000170 	.word	0x20000170
 8003660:	200001d8 	.word	0x200001d8

08003664 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3b04      	subs	r3, #4
 8003674:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800367c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3b04      	subs	r3, #4
 8003682:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f023 0201 	bic.w	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3b04      	subs	r3, #4
 8003692:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003694:	4a0c      	ldr	r2, [pc, #48]	; (80036c8 <pxPortInitialiseStack+0x64>)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3b14      	subs	r3, #20
 800369e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3b04      	subs	r3, #4
 80036aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f06f 0202 	mvn.w	r2, #2
 80036b2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3b20      	subs	r3, #32
 80036b8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80036ba:	68fb      	ldr	r3, [r7, #12]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	080036cd 	.word	0x080036cd

080036cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <prvTaskExitError+0x54>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d00a      	beq.n	80036f6 <prvTaskExitError+0x2a>
        __asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	60fb      	str	r3, [r7, #12]
    }
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <prvTaskExitError+0x28>
        __asm volatile
 80036f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	60bb      	str	r3, [r7, #8]
    }
 8003708:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800370a:	bf00      	nop
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0fc      	beq.n	800370c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003712:	bf00      	nop
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	20000010 	.word	0x20000010
	...

08003730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003730:	4b07      	ldr	r3, [pc, #28]	; (8003750 <pxCurrentTCBConst2>)
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	6808      	ldr	r0, [r1, #0]
 8003736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800373a:	f380 8809 	msr	PSP, r0
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f04f 0000 	mov.w	r0, #0
 8003746:	f380 8811 	msr	BASEPRI, r0
 800374a:	4770      	bx	lr
 800374c:	f3af 8000 	nop.w

08003750 <pxCurrentTCBConst2>:
 8003750:	200000e0 	.word	0x200000e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop

08003758 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003758:	4808      	ldr	r0, [pc, #32]	; (800377c <prvPortStartFirstTask+0x24>)
 800375a:	6800      	ldr	r0, [r0, #0]
 800375c:	6800      	ldr	r0, [r0, #0]
 800375e:	f380 8808 	msr	MSP, r0
 8003762:	f04f 0000 	mov.w	r0, #0
 8003766:	f380 8814 	msr	CONTROL, r0
 800376a:	b662      	cpsie	i
 800376c:	b661      	cpsie	f
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	df00      	svc	0
 8003778:	bf00      	nop
 800377a:	0000      	.short	0x0000
 800377c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop

08003784 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800378a:	4b46      	ldr	r3, [pc, #280]	; (80038a4 <xPortStartScheduler+0x120>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a46      	ldr	r2, [pc, #280]	; (80038a8 <xPortStartScheduler+0x124>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d10a      	bne.n	80037aa <xPortStartScheduler+0x26>
        __asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	613b      	str	r3, [r7, #16]
    }
 80037a6:	bf00      	nop
 80037a8:	e7fe      	b.n	80037a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80037aa:	4b3e      	ldr	r3, [pc, #248]	; (80038a4 <xPortStartScheduler+0x120>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a3f      	ldr	r2, [pc, #252]	; (80038ac <xPortStartScheduler+0x128>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d10a      	bne.n	80037ca <xPortStartScheduler+0x46>
        __asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	60fb      	str	r3, [r7, #12]
    }
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80037ca:	4b39      	ldr	r3, [pc, #228]	; (80038b0 <xPortStartScheduler+0x12c>)
 80037cc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	22ff      	movs	r2, #255	; 0xff
 80037da:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <xPortStartScheduler+0x130>)
 80037f0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037f2:	4b31      	ldr	r3, [pc, #196]	; (80038b8 <xPortStartScheduler+0x134>)
 80037f4:	2207      	movs	r2, #7
 80037f6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037f8:	e009      	b.n	800380e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80037fa:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <xPortStartScheduler+0x134>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3b01      	subs	r3, #1
 8003800:	4a2d      	ldr	r2, [pc, #180]	; (80038b8 <xPortStartScheduler+0x134>)
 8003802:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	b2db      	uxtb	r3, r3
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	b2db      	uxtb	r3, r3
 800380c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	2b80      	cmp	r3, #128	; 0x80
 8003818:	d0ef      	beq.n	80037fa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800381a:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <xPortStartScheduler+0x134>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f1c3 0307 	rsb	r3, r3, #7
 8003822:	2b04      	cmp	r3, #4
 8003824:	d00a      	beq.n	800383c <xPortStartScheduler+0xb8>
        __asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	60bb      	str	r3, [r7, #8]
    }
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800383c:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <xPortStartScheduler+0x134>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <xPortStartScheduler+0x134>)
 8003844:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003846:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <xPortStartScheduler+0x134>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800384e:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <xPortStartScheduler+0x134>)
 8003850:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	b2da      	uxtb	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800385a:	4b18      	ldr	r3, [pc, #96]	; (80038bc <xPortStartScheduler+0x138>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a17      	ldr	r2, [pc, #92]	; (80038bc <xPortStartScheduler+0x138>)
 8003860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003864:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <xPortStartScheduler+0x138>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a14      	ldr	r2, [pc, #80]	; (80038bc <xPortStartScheduler+0x138>)
 800386c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003870:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003872:	f000 f963 	bl	8003b3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <xPortStartScheduler+0x13c>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800387c:	f000 f982 	bl	8003b84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003880:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <xPortStartScheduler+0x140>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a0f      	ldr	r2, [pc, #60]	; (80038c4 <xPortStartScheduler+0x140>)
 8003886:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800388a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800388c:	f7ff ff64 	bl	8003758 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003890:	f7ff fb90 	bl	8002fb4 <vTaskSwitchContext>
    prvTaskExitError();
 8003894:	f7ff ff1a 	bl	80036cc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	e000ed00 	.word	0xe000ed00
 80038a8:	410fc271 	.word	0x410fc271
 80038ac:	410fc270 	.word	0x410fc270
 80038b0:	e000e400 	.word	0xe000e400
 80038b4:	200001e4 	.word	0x200001e4
 80038b8:	200001e8 	.word	0x200001e8
 80038bc:	e000ed20 	.word	0xe000ed20
 80038c0:	20000010 	.word	0x20000010
 80038c4:	e000ef34 	.word	0xe000ef34

080038c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80038ce:	4b37      	ldr	r3, [pc, #220]	; (80039ac <vInitPrioGroupValue+0xe4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a37      	ldr	r2, [pc, #220]	; (80039b0 <vInitPrioGroupValue+0xe8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10a      	bne.n	80038ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	613b      	str	r3, [r7, #16]
    }
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80038ee:	4b2f      	ldr	r3, [pc, #188]	; (80039ac <vInitPrioGroupValue+0xe4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a30      	ldr	r2, [pc, #192]	; (80039b4 <vInitPrioGroupValue+0xec>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d10a      	bne.n	800390e <vInitPrioGroupValue+0x46>
        __asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	60fb      	str	r3, [r7, #12]
    }
 800390a:	bf00      	nop
 800390c:	e7fe      	b.n	800390c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800390e:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <vInitPrioGroupValue+0xf0>)
 8003910:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	22ff      	movs	r2, #255	; 0xff
 800391e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b22      	ldr	r3, [pc, #136]	; (80039bc <vInitPrioGroupValue+0xf4>)
 8003934:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003936:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <vInitPrioGroupValue+0xf8>)
 8003938:	2207      	movs	r2, #7
 800393a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800393c:	e009      	b.n	8003952 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <vInitPrioGroupValue+0xf8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3b01      	subs	r3, #1
 8003944:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <vInitPrioGroupValue+0xf8>)
 8003946:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	b2db      	uxtb	r3, r3
 8003950:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b80      	cmp	r3, #128	; 0x80
 800395c:	d0ef      	beq.n	800393e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800395e:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <vInitPrioGroupValue+0xf8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f1c3 0307 	rsb	r3, r3, #7
 8003966:	2b04      	cmp	r3, #4
 8003968:	d00a      	beq.n	8003980 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	60bb      	str	r3, [r7, #8]
    }
 800397c:	bf00      	nop
 800397e:	e7fe      	b.n	800397e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003980:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <vInitPrioGroupValue+0xf8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <vInitPrioGroupValue+0xf8>)
 8003988:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800398a:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <vInitPrioGroupValue+0xf8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003992:	4a0b      	ldr	r2, [pc, #44]	; (80039c0 <vInitPrioGroupValue+0xf8>)
 8003994:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	e000ed00 	.word	0xe000ed00
 80039b0:	410fc271 	.word	0x410fc271
 80039b4:	410fc270 	.word	0x410fc270
 80039b8:	e000e400 	.word	0xe000e400
 80039bc:	200001e4 	.word	0x200001e4
 80039c0:	200001e8 	.word	0x200001e8

080039c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
        __asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	607b      	str	r3, [r7, #4]
    }
 80039dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <vPortEnterCritical+0x58>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	4a0d      	ldr	r2, [pc, #52]	; (8003a1c <vPortEnterCritical+0x58>)
 80039e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <vPortEnterCritical+0x58>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d10f      	bne.n	8003a10 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <vPortEnterCritical+0x5c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <vPortEnterCritical+0x4c>
        __asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	603b      	str	r3, [r7, #0]
    }
 8003a0c:	bf00      	nop
 8003a0e:	e7fe      	b.n	8003a0e <vPortEnterCritical+0x4a>
    }
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	20000010 	.word	0x20000010
 8003a20:	e000ed04 	.word	0xe000ed04

08003a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <vPortExitCritical+0x50>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <vPortExitCritical+0x24>
        __asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	607b      	str	r3, [r7, #4]
    }
 8003a44:	bf00      	nop
 8003a46:	e7fe      	b.n	8003a46 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <vPortExitCritical+0x50>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	4a09      	ldr	r2, [pc, #36]	; (8003a74 <vPortExitCritical+0x50>)
 8003a50:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <vPortExitCritical+0x50>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <vPortExitCritical+0x42>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003a64:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000010 	.word	0x20000010
	...

08003a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003a80:	f3ef 8009 	mrs	r0, PSP
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <pxCurrentTCBConst>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	f01e 0f10 	tst.w	lr, #16
 8003a90:	bf08      	it	eq
 8003a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9a:	6010      	str	r0, [r2, #0]
 8003a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003aa4:	f380 8811 	msr	BASEPRI, r0
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f7ff fa80 	bl	8002fb4 <vTaskSwitchContext>
 8003ab4:	f04f 0000 	mov.w	r0, #0
 8003ab8:	f380 8811 	msr	BASEPRI, r0
 8003abc:	bc09      	pop	{r0, r3}
 8003abe:	6819      	ldr	r1, [r3, #0]
 8003ac0:	6808      	ldr	r0, [r1, #0]
 8003ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac6:	f01e 0f10 	tst.w	lr, #16
 8003aca:	bf08      	it	eq
 8003acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ad0:	f380 8809 	msr	PSP, r0
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	f3af 8000 	nop.w

08003ae0 <pxCurrentTCBConst>:
 8003ae0:	200000e0 	.word	0x200000e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop

08003ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
        __asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	607b      	str	r3, [r7, #4]
    }
 8003b00:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003b02:	f002 fb4b 	bl	800619c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003b06:	f7ff f93b 	bl	8002d80 <xTaskIncrementTick>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d006      	beq.n	8003b1e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003b10:	f002 fba2 	bl	8006258 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b14:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <SysTick_Handler+0x50>)
 8003b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e001      	b.n	8003b22 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003b1e:	f002 fb7f 	bl	8006220 <SEGGER_SYSVIEW_RecordExitISR>
 8003b22:	2300      	movs	r3, #0
 8003b24:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f383 8811 	msr	BASEPRI, r3
    }
 8003b2c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <vPortSetupTimerInterrupt+0x34>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b46:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <vPortSetupTimerInterrupt+0x38>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <vPortSetupTimerInterrupt+0x3c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <vPortSetupTimerInterrupt+0x40>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	099b      	lsrs	r3, r3, #6
 8003b58:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <vPortSetupTimerInterrupt+0x44>)
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <vPortSetupTimerInterrupt+0x34>)
 8003b60:	2207      	movs	r2, #7
 8003b62:	601a      	str	r2, [r3, #0]
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	e000e010 	.word	0xe000e010
 8003b74:	e000e018 	.word	0xe000e018
 8003b78:	20000000 	.word	0x20000000
 8003b7c:	10624dd3 	.word	0x10624dd3
 8003b80:	e000e014 	.word	0xe000e014

08003b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b94 <vPortEnableVFP+0x10>
 8003b88:	6801      	ldr	r1, [r0, #0]
 8003b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b8e:	6001      	str	r1, [r0, #0]
 8003b90:	4770      	bx	lr
 8003b92:	0000      	.short	0x0000
 8003b94:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003b98:	bf00      	nop
 8003b9a:	bf00      	nop

08003b9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003ba2:	f3ef 8305 	mrs	r3, IPSR
 8003ba6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b0f      	cmp	r3, #15
 8003bac:	d914      	bls.n	8003bd8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003bae:	4a17      	ldr	r2, [pc, #92]	; (8003c0c <vPortValidateInterruptPriority+0x70>)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003bb8:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <vPortValidateInterruptPriority+0x74>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	7afa      	ldrb	r2, [r7, #11]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d20a      	bcs.n	8003bd8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	607b      	str	r3, [r7, #4]
    }
 8003bd4:	bf00      	nop
 8003bd6:	e7fe      	b.n	8003bd6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <vPortValidateInterruptPriority+0x78>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003be0:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <vPortValidateInterruptPriority+0x7c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d90a      	bls.n	8003bfe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	603b      	str	r3, [r7, #0]
    }
 8003bfa:	bf00      	nop
 8003bfc:	e7fe      	b.n	8003bfc <vPortValidateInterruptPriority+0x60>
    }
 8003bfe:	bf00      	nop
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	e000e3f0 	.word	0xe000e3f0
 8003c10:	200001e4 	.word	0x200001e4
 8003c14:	e000ed0c 	.word	0xe000ed0c
 8003c18:	200001e8 	.word	0x200001e8

08003c1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	; 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003c28:	f7fe ff7a 	bl	8002b20 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003c2c:	4b53      	ldr	r3, [pc, #332]	; (8003d7c <pvPortMalloc+0x160>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003c34:	f000 f908 	bl	8003e48 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d012      	beq.n	8003c64 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003c3e:	2208      	movs	r2, #8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	3308      	adds	r3, #8
 8003c4a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d804      	bhi.n	8003c60 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	e001      	b.n	8003c64 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	db70      	blt.n	8003d4c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d06d      	beq.n	8003d4c <pvPortMalloc+0x130>
 8003c70:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <pvPortMalloc+0x164>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d868      	bhi.n	8003d4c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003c7a:	4b42      	ldr	r3, [pc, #264]	; (8003d84 <pvPortMalloc+0x168>)
 8003c7c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003c7e:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <pvPortMalloc+0x168>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c84:	e004      	b.n	8003c90 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d903      	bls.n	8003ca2 <pvPortMalloc+0x86>
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f1      	bne.n	8003c86 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003ca2:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <pvPortMalloc+0x160>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d04f      	beq.n	8003d4c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	4413      	add	r3, r2
 8003cb4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	1ad2      	subs	r2, r2, r3
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d91f      	bls.n	8003d0e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <pvPortMalloc+0xda>
        __asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	613b      	str	r3, [r7, #16]
    }
 8003cf2:	bf00      	nop
 8003cf4:	e7fe      	b.n	8003cf4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d08:	6978      	ldr	r0, [r7, #20]
 8003d0a:	f000 f8f9 	bl	8003f00 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d0e:	4b1c      	ldr	r3, [pc, #112]	; (8003d80 <pvPortMalloc+0x164>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <pvPortMalloc+0x164>)
 8003d1a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d1c:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <pvPortMalloc+0x164>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b19      	ldr	r3, [pc, #100]	; (8003d88 <pvPortMalloc+0x16c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d203      	bcs.n	8003d30 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d28:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <pvPortMalloc+0x164>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a16      	ldr	r2, [pc, #88]	; (8003d88 <pvPortMalloc+0x16c>)
 8003d2e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003d42:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <pvPortMalloc+0x170>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3301      	adds	r3, #1
 8003d48:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <pvPortMalloc+0x170>)
 8003d4a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003d4c:	f7fe fef6 	bl	8002b3c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <pvPortMalloc+0x154>
        __asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	60fb      	str	r3, [r7, #12]
    }
 8003d6c:	bf00      	nop
 8003d6e:	e7fe      	b.n	8003d6e <pvPortMalloc+0x152>
    return pvReturn;
 8003d70:	69fb      	ldr	r3, [r7, #28]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3728      	adds	r7, #40	; 0x28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20012df4 	.word	0x20012df4
 8003d80:	20012df8 	.word	0x20012df8
 8003d84:	20012dec 	.word	0x20012dec
 8003d88:	20012dfc 	.word	0x20012dfc
 8003d8c:	20012e00 	.word	0x20012e00

08003d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d049      	beq.n	8003e36 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003da2:	2308      	movs	r3, #8
 8003da4:	425b      	negs	r3, r3
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4413      	add	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	db0a      	blt.n	8003dce <vPortFree+0x3e>
        __asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	60fb      	str	r3, [r7, #12]
    }
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <vPortFree+0x5c>
        __asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	60bb      	str	r3, [r7, #8]
    }
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	0fdb      	lsrs	r3, r3, #31
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01c      	beq.n	8003e36 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d118      	bne.n	8003e36 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003e10:	f7fe fe86 	bl	8002b20 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <vPortFree+0xb0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	4a08      	ldr	r2, [pc, #32]	; (8003e40 <vPortFree+0xb0>)
 8003e20:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e22:	6938      	ldr	r0, [r7, #16]
 8003e24:	f000 f86c 	bl	8003f00 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <vPortFree+0xb4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	4a05      	ldr	r2, [pc, #20]	; (8003e44 <vPortFree+0xb4>)
 8003e30:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003e32:	f7fe fe83 	bl	8002b3c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003e36:	bf00      	nop
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20012df8 	.word	0x20012df8
 8003e44:	20012e04 	.word	0x20012e04

08003e48 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e4e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003e52:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <prvHeapInit+0xa4>)
 8003e56:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3307      	adds	r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0307 	bic.w	r3, r3, #7
 8003e6e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	4a1d      	ldr	r2, [pc, #116]	; (8003eec <prvHeapInit+0xa4>)
 8003e78:	4413      	add	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e80:	4a1b      	ldr	r2, [pc, #108]	; (8003ef0 <prvHeapInit+0xa8>)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003e86:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <prvHeapInit+0xa8>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	4413      	add	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003e94:	2208      	movs	r2, #8
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0307 	bic.w	r3, r3, #7
 8003ea2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <prvHeapInit+0xac>)
 8003ea8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003eaa:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <prvHeapInit+0xac>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003eb2:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <prvHeapInit+0xac>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	1ad2      	subs	r2, r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <prvHeapInit+0xac>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <prvHeapInit+0xb0>)
 8003ed6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4a07      	ldr	r2, [pc, #28]	; (8003efc <prvHeapInit+0xb4>)
 8003ede:	6013      	str	r3, [r2, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	200001ec 	.word	0x200001ec
 8003ef0:	20012dec 	.word	0x20012dec
 8003ef4:	20012df4 	.word	0x20012df4
 8003ef8:	20012dfc 	.word	0x20012dfc
 8003efc:	20012df8 	.word	0x20012df8

08003f00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f08:	4b28      	ldr	r3, [pc, #160]	; (8003fac <prvInsertBlockIntoFreeList+0xac>)
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	e002      	b.n	8003f14 <prvInsertBlockIntoFreeList+0x14>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d8f7      	bhi.n	8003f0e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4413      	add	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d108      	bne.n	8003f42 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	441a      	add	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	441a      	add	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d118      	bne.n	8003f88 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <prvInsertBlockIntoFreeList+0xb0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d00d      	beq.n	8003f7e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	441a      	add	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	e008      	b.n	8003f90 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f7e:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <prvInsertBlockIntoFreeList+0xb0>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e003      	b.n	8003f90 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d002      	beq.n	8003f9e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20012dec 	.word	0x20012dec
 8003fb0:	20012df4 	.word	0x20012df4

08003fb4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003fb8:	4803      	ldr	r0, [pc, #12]	; (8003fc8 <_cbSendSystemDesc+0x14>)
 8003fba:	f002 f899 	bl	80060f0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003fbe:	4803      	ldr	r0, [pc, #12]	; (8003fcc <_cbSendSystemDesc+0x18>)
 8003fc0:	f002 f896 	bl	80060f0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003fc4:	bf00      	nop
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	08007198 	.word	0x08007198
 8003fcc:	080071d8 	.word	0x080071d8

08003fd0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <SEGGER_SYSVIEW_Conf+0x20>)
 8003fda:	6819      	ldr	r1, [r3, #0]
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <SEGGER_SYSVIEW_Conf+0x24>)
 8003fde:	4a06      	ldr	r2, [pc, #24]	; (8003ff8 <SEGGER_SYSVIEW_Conf+0x28>)
 8003fe0:	f001 fc78 	bl	80058d4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003fe4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003fe8:	f001 fcb8 	bl	800595c <SEGGER_SYSVIEW_SetRAMBase>
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000000 	.word	0x20000000
 8003ff4:	08003fb5 	.word	0x08003fb5
 8003ff8:	08007274 	.word	0x08007274

08003ffc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004002:	2300      	movs	r3, #0
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	e033      	b.n	8004070 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004008:	491e      	ldr	r1, [pc, #120]	; (8004084 <_cbSendTaskList+0x88>)
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	491a      	ldr	r1, [pc, #104]	; (8004084 <_cbSendTaskList+0x88>)
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	3304      	adds	r3, #4
 8004028:	6819      	ldr	r1, [r3, #0]
 800402a:	4c16      	ldr	r4, [pc, #88]	; (8004084 <_cbSendTaskList+0x88>)
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4423      	add	r3, r4
 8004038:	3308      	adds	r3, #8
 800403a:	681c      	ldr	r4, [r3, #0]
 800403c:	4d11      	ldr	r5, [pc, #68]	; (8004084 <_cbSendTaskList+0x88>)
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	442b      	add	r3, r5
 800404a:	330c      	adds	r3, #12
 800404c:	681d      	ldr	r5, [r3, #0]
 800404e:	4e0d      	ldr	r6, [pc, #52]	; (8004084 <_cbSendTaskList+0x88>)
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4433      	add	r3, r6
 800405c:	3310      	adds	r3, #16
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	462b      	mov	r3, r5
 8004064:	4622      	mov	r2, r4
 8004066:	f000 f8bd 	bl	80041e4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3301      	adds	r3, #1
 800406e:	607b      	str	r3, [r7, #4]
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <_cbSendTaskList+0x8c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	429a      	cmp	r2, r3
 8004078:	d3c6      	bcc.n	8004008 <_cbSendTaskList+0xc>
  }
}
 800407a:	bf00      	nop
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004084:	20012e08 	.word	0x20012e08
 8004088:	20012ea8 	.word	0x20012ea8

0800408c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800408c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004094:	f7fe fe62 	bl	8002d5c <xTaskGetTickCountFromISR>
 8004098:	4603      	mov	r3, r0
 800409a:	2200      	movs	r2, #0
 800409c:	469a      	mov	sl, r3
 800409e:	4693      	mov	fp, r2
 80040a0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80040a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	f04f 0a00 	mov.w	sl, #0
 80040b0:	f04f 0b00 	mov.w	fp, #0
 80040b4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80040b8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80040bc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80040c0:	4652      	mov	r2, sl
 80040c2:	465b      	mov	r3, fp
 80040c4:	1a14      	subs	r4, r2, r0
 80040c6:	eb63 0501 	sbc.w	r5, r3, r1
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	00ab      	lsls	r3, r5, #2
 80040d4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80040d8:	00a2      	lsls	r2, r4, #2
 80040da:	4614      	mov	r4, r2
 80040dc:	461d      	mov	r5, r3
 80040de:	eb14 0800 	adds.w	r8, r4, r0
 80040e2:	eb45 0901 	adc.w	r9, r5, r1
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040fa:	4690      	mov	r8, r2
 80040fc:	4699      	mov	r9, r3
 80040fe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004102:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004114 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004122:	2205      	movs	r2, #5
 8004124:	492b      	ldr	r1, [pc, #172]	; (80041d4 <SYSVIEW_AddTask+0xc0>)
 8004126:	68b8      	ldr	r0, [r7, #8]
 8004128:	f002 fb5c 	bl	80067e4 <memcmp>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d04b      	beq.n	80041ca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004132:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <SYSVIEW_AddTask+0xc4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b07      	cmp	r3, #7
 8004138:	d903      	bls.n	8004142 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800413a:	4828      	ldr	r0, [pc, #160]	; (80041dc <SYSVIEW_AddTask+0xc8>)
 800413c:	f002 fa94 	bl	8006668 <SEGGER_SYSVIEW_Warn>
    return;
 8004140:	e044      	b.n	80041cc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004142:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <SYSVIEW_AddTask+0xc4>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4926      	ldr	r1, [pc, #152]	; (80041e0 <SYSVIEW_AddTask+0xcc>)
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004156:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <SYSVIEW_AddTask+0xc4>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4921      	ldr	r1, [pc, #132]	; (80041e0 <SYSVIEW_AddTask+0xcc>)
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	3304      	adds	r3, #4
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800416c:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <SYSVIEW_AddTask+0xc4>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	491b      	ldr	r1, [pc, #108]	; (80041e0 <SYSVIEW_AddTask+0xcc>)
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	3308      	adds	r3, #8
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <SYSVIEW_AddTask+0xc4>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4916      	ldr	r1, [pc, #88]	; (80041e0 <SYSVIEW_AddTask+0xcc>)
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	330c      	adds	r3, #12
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004198:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <SYSVIEW_AddTask+0xc4>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4910      	ldr	r1, [pc, #64]	; (80041e0 <SYSVIEW_AddTask+0xcc>)
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	3310      	adds	r3, #16
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80041ae:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <SYSVIEW_AddTask+0xc4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3301      	adds	r3, #1
 80041b4:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <SYSVIEW_AddTask+0xc4>)
 80041b6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f80e 	bl	80041e4 <SYSVIEW_SendTaskInfo>
 80041c8:	e000      	b.n	80041cc <SYSVIEW_AddTask+0xb8>
    return;
 80041ca:	bf00      	nop

}
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	080071e8 	.word	0x080071e8
 80041d8:	20012ea8 	.word	0x20012ea8
 80041dc:	080071f0 	.word	0x080071f0
 80041e0:	20012e08 	.word	0x20012e08

080041e4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80041f2:	f107 0314 	add.w	r3, r7, #20
 80041f6:	2214      	movs	r2, #20
 80041f8:	2100      	movs	r1, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f002 fb02 	bl	8006804 <memset>
  TaskInfo.TaskID     = TaskID;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004214:	f107 0314 	add.w	r3, r7, #20
 8004218:	4618      	mov	r0, r3
 800421a:	f001 fe71 	bl	8005f00 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800421e:	bf00      	nop
 8004220:	3728      	adds	r7, #40	; 0x28
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <__NVIC_EnableIRQ>:
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004236:	2b00      	cmp	r3, #0
 8004238:	db0b      	blt.n	8004252 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	f003 021f 	and.w	r2, r3, #31
 8004240:	4907      	ldr	r1, [pc, #28]	; (8004260 <__NVIC_EnableIRQ+0x38>)
 8004242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	2001      	movs	r0, #1
 800424a:	fa00 f202 	lsl.w	r2, r0, r2
 800424e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	e000e100 	.word	0xe000e100

08004264 <__NVIC_SetPriority>:
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	6039      	str	r1, [r7, #0]
 800426e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004274:	2b00      	cmp	r3, #0
 8004276:	db0a      	blt.n	800428e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	b2da      	uxtb	r2, r3
 800427c:	490c      	ldr	r1, [pc, #48]	; (80042b0 <__NVIC_SetPriority+0x4c>)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	0112      	lsls	r2, r2, #4
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	440b      	add	r3, r1
 8004288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800428c:	e00a      	b.n	80042a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4908      	ldr	r1, [pc, #32]	; (80042b4 <__NVIC_SetPriority+0x50>)
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	3b04      	subs	r3, #4
 800429c:	0112      	lsls	r2, r2, #4
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	440b      	add	r3, r1
 80042a2:	761a      	strb	r2, [r3, #24]
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	e000e100 	.word	0xe000e100
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80042be:	f002 fa2f 	bl	8006720 <SEGGER_SYSVIEW_IsStarted>
 80042c2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80042ca:	f001 fc9d 	bl	8005c08 <SEGGER_SYSVIEW_Start>
  }
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80042e2:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <_cbOnUARTRx+0x3c>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d806      	bhi.n	80042f8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <_cbOnUARTRx+0x3c>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	3301      	adds	r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <_cbOnUARTRx+0x3c>)
 80042f4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80042f6:	e009      	b.n	800430c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80042f8:	f7ff ffde 	bl	80042b8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <_cbOnUARTRx+0x3c>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4618      	mov	r0, r3
 8004302:	1dfb      	adds	r3, r7, #7
 8004304:	2201      	movs	r2, #1
 8004306:	4619      	mov	r1, r3
 8004308:	f000 fb9e 	bl	8004a48 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800430c:	bf00      	nop
}
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20000014 	.word	0x20000014

08004318 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004320:	4b14      	ldr	r3, [pc, #80]	; (8004374 <_cbOnUARTTx+0x5c>)
 8004322:	785b      	ldrb	r3, [r3, #1]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d80f      	bhi.n	8004348 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004328:	4b12      	ldr	r3, [pc, #72]	; (8004374 <_cbOnUARTTx+0x5c>)
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	461a      	mov	r2, r3
 800432e:	4b12      	ldr	r3, [pc, #72]	; (8004378 <_cbOnUARTTx+0x60>)
 8004330:	5c9a      	ldrb	r2, [r3, r2]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <_cbOnUARTTx+0x5c>)
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	3301      	adds	r3, #1
 800433c:	b2da      	uxtb	r2, r3
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <_cbOnUARTTx+0x5c>)
 8004340:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004342:	2301      	movs	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004346:	e00f      	b.n	8004368 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <_cbOnUARTTx+0x5c>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fa1d 	bl	8004790 <SEGGER_RTT_ReadUpBufferNoLock>
 8004356:	4603      	mov	r3, r0
 8004358:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	da02      	bge.n	8004366 <_cbOnUARTTx+0x4e>
    r = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e000      	b.n	8004368 <_cbOnUARTTx+0x50>
  }
Done:
 8004366:	bf00      	nop
  return r;
 8004368:	68fb      	ldr	r3, [r7, #12]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000014 	.word	0x20000014
 8004378:	0800727c 	.word	0x0800727c

0800437c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004384:	4a04      	ldr	r2, [pc, #16]	; (8004398 <SEGGER_UART_init+0x1c>)
 8004386:	4905      	ldr	r1, [pc, #20]	; (800439c <SEGGER_UART_init+0x20>)
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f863 	bl	8004454 <HIF_UART_Init>
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	080042d9 	.word	0x080042d9
 800439c:	08004319 	.word	0x08004319

080043a0 <USART1_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART1_IRQHandler(void);
void USART1_IRQHandler(void) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80043a6:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <USART1_IRQHandler+0x80>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d011      	beq.n	80043da <USART1_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80043b6:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <USART1_IRQHandler+0x84>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f003 030b 	and.w	r3, r3, #11
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d108      	bne.n	80043da <USART1_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80043c8:	4b17      	ldr	r3, [pc, #92]	; (8004428 <USART1_IRQHandler+0x88>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d004      	beq.n	80043da <USART1_IRQHandler+0x3a>
        _cbOnRx(v);
 80043d0:	4b15      	ldr	r3, [pc, #84]	; (8004428 <USART1_IRQHandler+0x88>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	79fa      	ldrb	r2, [r7, #7]
 80043d6:	4610      	mov	r0, r2
 80043d8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01a      	beq.n	800441a <USART1_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80043e4:	4b11      	ldr	r3, [pc, #68]	; (800442c <USART1_IRQHandler+0x8c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d015      	beq.n	8004418 <USART1_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80043ec:	4b0f      	ldr	r3, [pc, #60]	; (800442c <USART1_IRQHandler+0x8c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	1dfa      	adds	r2, r7, #7
 80043f2:	4610      	mov	r0, r2
 80043f4:	4798      	blx	r3
 80043f6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <USART1_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <USART1_IRQHandler+0x90>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a0b      	ldr	r2, [pc, #44]	; (8004430 <USART1_IRQHandler+0x90>)
 8004404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e006      	b.n	800441a <USART1_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <USART1_IRQHandler+0x80>)
 800440e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004410:	79fa      	ldrb	r2, [r7, #7]
 8004412:	4b04      	ldr	r3, [pc, #16]	; (8004424 <USART1_IRQHandler+0x84>)
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	e000      	b.n	800441a <USART1_IRQHandler+0x7a>
      return;
 8004418:	bf00      	nop
    }
  }
}
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40011000 	.word	0x40011000
 8004424:	40011004 	.word	0x40011004
 8004428:	20012eac 	.word	0x20012eac
 800442c:	20012eb0 	.word	0x20012eb0
 8004430:	4001100c 	.word	0x4001100c

08004434 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a04      	ldr	r2, [pc, #16]	; (8004450 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800443e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004442:	6013      	str	r3, [r2, #0]
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	4001100c 	.word	0x4001100c

08004454 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  //
  // Configure USART RX/TX pins for alternate function AF7
  //

  //RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
  RCC_APB2ENR |= (1 <<  4);        // Enable USART1 clock // PK: change for stm32f429 disc1
 8004460:	4b2e      	ldr	r3, [pc, #184]	; (800451c <HIF_UART_Init+0xc8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2d      	ldr	r2, [pc, #180]	; (800451c <HIF_UART_Init+0xc8>)
 8004466:	f043 0310 	orr.w	r3, r3, #16
 800446a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800446c:	4b2c      	ldr	r3, [pc, #176]	; (8004520 <HIF_UART_Init+0xcc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2b      	ldr	r2, [pc, #172]	; (8004520 <HIF_UART_Init+0xcc>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6013      	str	r3, [r2, #0]

  v  = GPIO_AFRH;	// v  = GPIO_AFRL;	// PK: Changed for stm32f429
 8004478:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <HIF_UART_Init+0xd0>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	613b      	str	r3, [r7, #16]
  //v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
  //v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
  v &= ~((15UL << 4) | (15UL << 8));
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004484:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << 4) | (7UL << 8));
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 800448c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800448e:	4a26      	ldr	r2, [pc, #152]	; (8004528 <HIF_UART_Init+0xd4>)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004494:	4b25      	ldr	r3, [pc, #148]	; (800452c <HIF_UART_Init+0xd8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80044a0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 80044a8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80044aa:	4a20      	ldr	r2, [pc, #128]	; (800452c <HIF_UART_Init+0xd8>)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80044b0:	4b1f      	ldr	r3, [pc, #124]	; (8004530 <HIF_UART_Init+0xdc>)
 80044b2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80044b6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80044b8:	4b1e      	ldr	r3, [pc, #120]	; (8004534 <HIF_UART_Init+0xe0>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80044be:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <HIF_UART_Init+0xe4>)
 80044c0:	2280      	movs	r2, #128	; 0x80
 80044c2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80044ca:	4a1c      	ldr	r2, [pc, #112]	; (800453c <HIF_UART_Init+0xe8>)
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d2:	3301      	adds	r3, #1
 80044d4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	085b      	lsrs	r3, r3, #1
 80044da:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e2:	d302      	bcc.n	80044ea <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80044e4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80044e8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	4a12      	ldr	r2, [pc, #72]	; (8004540 <HIF_UART_Init+0xec>)
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80044fa:	4a12      	ldr	r2, [pc, #72]	; (8004544 <HIF_UART_Init+0xf0>)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004500:	4a11      	ldr	r2, [pc, #68]	; (8004548 <HIF_UART_Init+0xf4>)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004506:	2106      	movs	r1, #6
 8004508:	2025      	movs	r0, #37	; 0x25
 800450a:	f7ff feab 	bl	8004264 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800450e:	2025      	movs	r0, #37	; 0x25
 8004510:	f7ff fe8a 	bl	8004228 <__NVIC_EnableIRQ>
}
 8004514:	bf00      	nop
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40023844 	.word	0x40023844
 8004520:	40023830 	.word	0x40023830
 8004524:	40020024 	.word	0x40020024
 8004528:	40020020 	.word	0x40020020
 800452c:	40020000 	.word	0x40020000
 8004530:	4001100c 	.word	0x4001100c
 8004534:	40011010 	.word	0x40011010
 8004538:	40011014 	.word	0x40011014
 800453c:	0a037a00 	.word	0x0a037a00
 8004540:	40011008 	.word	0x40011008
 8004544:	20012eac 	.word	0x20012eac
 8004548:	20012eb0 	.word	0x20012eb0

0800454c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004552:	4b26      	ldr	r3, [pc, #152]	; (80045ec <_DoInit+0xa0>)
 8004554:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004556:	22a8      	movs	r2, #168	; 0xa8
 8004558:	2100      	movs	r1, #0
 800455a:	6838      	ldr	r0, [r7, #0]
 800455c:	f002 f952 	bl	8006804 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2203      	movs	r2, #3
 8004564:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2203      	movs	r2, #3
 800456a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4a20      	ldr	r2, [pc, #128]	; (80045f0 <_DoInit+0xa4>)
 8004570:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	4a1f      	ldr	r2, [pc, #124]	; (80045f4 <_DoInit+0xa8>)
 8004576:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800457e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2200      	movs	r2, #0
 8004584:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2200      	movs	r2, #0
 800458a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2200      	movs	r2, #0
 8004590:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	4a16      	ldr	r2, [pc, #88]	; (80045f0 <_DoInit+0xa4>)
 8004596:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <_DoInit+0xac>)
 800459c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2210      	movs	r2, #16
 80045a2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2200      	movs	r2, #0
 80045ae:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2200      	movs	r2, #0
 80045b4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80045b6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	e00c      	b.n	80045da <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f1c3 030f 	rsb	r3, r3, #15
 80045c6:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <_DoInit+0xb0>)
 80045c8:	5cd1      	ldrb	r1, [r2, r3]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4413      	add	r3, r2
 80045d0:	460a      	mov	r2, r1
 80045d2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3301      	adds	r3, #1
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b0f      	cmp	r3, #15
 80045de:	d9ef      	bls.n	80045c0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80045e0:	f3bf 8f5f 	dmb	sy
}
 80045e4:	bf00      	nop
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20012eb4 	.word	0x20012eb4
 80045f0:	08007240 	.word	0x08007240
 80045f4:	20012f5c 	.word	0x20012f5c
 80045f8:	2001335c 	.word	0x2001335c
 80045fc:	08007280 	.word	0x08007280

08004600 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800460c:	2300      	movs	r3, #0
 800460e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	429a      	cmp	r2, r3
 8004622:	d905      	bls.n	8004630 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
 800462e:	e007      	b.n	8004640 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	69b9      	ldr	r1, [r7, #24]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	1acb      	subs	r3, r1, r3
 800463a:	4413      	add	r3, r2
 800463c:	3b01      	subs	r3, #1
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464a:	4293      	cmp	r3, r2
 800464c:	bf28      	it	cs
 800464e:	4613      	movcs	r3, r2
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4293      	cmp	r3, r2
 8004658:	bf28      	it	cs
 800465a:	4613      	movcs	r3, r2
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	6978      	ldr	r0, [r7, #20]
 800466e:	f002 f8fd 	bl	800686c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004672:	6a3a      	ldr	r2, [r7, #32]
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	4413      	add	r3, r2
 8004678:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	4413      	add	r3, r2
 8004680:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	4413      	add	r3, r2
 8004690:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	429a      	cmp	r2, r3
 800469a:	d101      	bne.n	80046a0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800469c:	2300      	movs	r3, #0
 800469e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046a0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1b2      	bne.n	8004616 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80046b0:	6a3b      	ldr	r3, [r7, #32]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3728      	adds	r7, #40	; 0x28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b088      	sub	sp, #32
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d911      	bls.n	8004702 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	4413      	add	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	6938      	ldr	r0, [r7, #16]
 80046ee:	f002 f8bd 	bl	800686c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046f2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	441a      	add	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004700:	e01f      	b.n	8004742 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	6938      	ldr	r0, [r7, #16]
 8004716:	f002 f8a9 	bl	800686c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	4413      	add	r3, r2
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4619      	mov	r1, r3
 8004732:	6938      	ldr	r0, [r7, #16]
 8004734:	f002 f89a 	bl	800686c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004738:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	60da      	str	r2, [r3, #12]
}
 8004742:	bf00      	nop
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800474a:	b480      	push	{r7}
 800474c:	b087      	sub	sp, #28
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	429a      	cmp	r2, r3
 8004764:	d808      	bhi.n	8004778 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1ad2      	subs	r2, r2, r3
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4413      	add	r3, r2
 8004772:	3b01      	subs	r3, #1
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	e004      	b.n	8004782 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004782:	697b      	ldr	r3, [r7, #20]
}
 8004784:	4618      	mov	r0, r3
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	; 0x30
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800479c:	4b3e      	ldr	r3, [pc, #248]	; (8004898 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800479e:	623b      	str	r3, [r7, #32]
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b53      	cmp	r3, #83	; 0x53
 80047a8:	d001      	beq.n	80047ae <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80047aa:	f7ff fecf 	bl	800454c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	4613      	mov	r3, r2
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	4413      	add	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4a37      	ldr	r2, [pc, #220]	; (8004898 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80047bc:	4413      	add	r3, r2
 80047be:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80047d0:	2300      	movs	r3, #0
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80047d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d92b      	bls.n	8004834 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4293      	cmp	r3, r2
 80047ec:	bf28      	it	cs
 80047ee:	4613      	movcs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	4413      	add	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	6939      	ldr	r1, [r7, #16]
 8004800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004802:	f002 f833 	bl	800686c <memcpy>
    NumBytesRead += NumBytesRem;
 8004806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	4413      	add	r3, r2
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800480e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	4413      	add	r3, r2
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800481e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4413      	add	r3, r2
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800482c:	429a      	cmp	r2, r3
 800482e:	d101      	bne.n	8004834 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004830:	2300      	movs	r3, #0
 8004832:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4293      	cmp	r3, r2
 8004842:	bf28      	it	cs
 8004844:	4613      	movcs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d019      	beq.n	8004882 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	4413      	add	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	6939      	ldr	r1, [r7, #16]
 800485c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800485e:	f002 f805 	bl	800686c <memcpy>
    NumBytesRead += NumBytesRem;
 8004862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	4413      	add	r3, r2
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800486a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	4413      	add	r3, r2
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800487a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	4413      	add	r3, r2
 8004880:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800488c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004890:	4618      	mov	r0, r3
 8004892:	3730      	adds	r7, #48	; 0x30
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20012eb4 	.word	0x20012eb4

0800489c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b08c      	sub	sp, #48	; 0x30
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80048a8:	4b3e      	ldr	r3, [pc, #248]	; (80049a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80048aa:	623b      	str	r3, [r7, #32]
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b53      	cmp	r3, #83	; 0x53
 80048b4:	d001      	beq.n	80048ba <SEGGER_RTT_ReadNoLock+0x1e>
 80048b6:	f7ff fe49 	bl	800454c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4613      	mov	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	3360      	adds	r3, #96	; 0x60
 80048c6:	4a37      	ldr	r2, [pc, #220]	; (80049a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80048c8:	4413      	add	r3, r2
 80048ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80048dc:	2300      	movs	r3, #0
 80048de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80048e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d92b      	bls.n	8004940 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4293      	cmp	r3, r2
 80048f8:	bf28      	it	cs
 80048fa:	4613      	movcs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	4413      	add	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	6939      	ldr	r1, [r7, #16]
 800490c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800490e:	f001 ffad 	bl	800686c <memcpy>
    NumBytesRead += NumBytesRem;
 8004912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	4413      	add	r3, r2
 8004918:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800491a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	4413      	add	r3, r2
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800492a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	4413      	add	r3, r2
 8004930:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004938:	429a      	cmp	r2, r3
 800493a:	d101      	bne.n	8004940 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800493c:	2300      	movs	r3, #0
 800493e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4293      	cmp	r3, r2
 800494e:	bf28      	it	cs
 8004950:	4613      	movcs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d019      	beq.n	800498e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	4413      	add	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	6939      	ldr	r1, [r7, #16]
 8004968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800496a:	f001 ff7f 	bl	800686c <memcpy>
    NumBytesRead += NumBytesRem;
 800496e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	4413      	add	r3, r2
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4413      	add	r3, r2
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	4413      	add	r3, r2
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004998:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800499c:	4618      	mov	r0, r3
 800499e:	3730      	adds	r7, #48	; 0x30
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20012eb4 	.word	0x20012eb4

080049a8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4613      	mov	r3, r2
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	4413      	add	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	3360      	adds	r3, #96	; 0x60
 80049c4:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80049c6:	4413      	add	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d029      	beq.n	8004a26 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d82e      	bhi.n	8004a34 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d013      	beq.n	8004a06 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80049de:	e029      	b.n	8004a34 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80049e0:	6978      	ldr	r0, [r7, #20]
 80049e2:	f7ff feb2 	bl	800474a <_GetAvailWriteSpace>
 80049e6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d202      	bcs.n	80049f6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80049f4:	e021      	b.n	8004a3a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	69b9      	ldr	r1, [r7, #24]
 80049fe:	6978      	ldr	r0, [r7, #20]
 8004a00:	f7ff fe5b 	bl	80046ba <_WriteNoCheck>
    break;
 8004a04:	e019      	b.n	8004a3a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004a06:	6978      	ldr	r0, [r7, #20]
 8004a08:	f7ff fe9f 	bl	800474a <_GetAvailWriteSpace>
 8004a0c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4293      	cmp	r3, r2
 8004a14:	bf28      	it	cs
 8004a16:	4613      	movcs	r3, r2
 8004a18:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	69b9      	ldr	r1, [r7, #24]
 8004a1e:	6978      	ldr	r0, [r7, #20]
 8004a20:	f7ff fe4b 	bl	80046ba <_WriteNoCheck>
    break;
 8004a24:	e009      	b.n	8004a3a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	69b9      	ldr	r1, [r7, #24]
 8004a2a:	6978      	ldr	r0, [r7, #20]
 8004a2c:	f7ff fde8 	bl	8004600 <_WriteBlocking>
 8004a30:	61f8      	str	r0, [r7, #28]
    break;
 8004a32:	e002      	b.n	8004a3a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
    break;
 8004a38:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20012eb4 	.word	0x20012eb4

08004a48 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004a54:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004a56:	61fb      	str	r3, [r7, #28]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b53      	cmp	r3, #83	; 0x53
 8004a60:	d001      	beq.n	8004a66 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004a62:	f7ff fd73 	bl	800454c <_DoInit>
  SEGGER_RTT_LOCK();
 8004a66:	f3ef 8311 	mrs	r3, BASEPRI
 8004a6a:	f04f 0120 	mov.w	r1, #32
 8004a6e:	f381 8811 	msr	BASEPRI, r1
 8004a72:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff ff95 	bl	80049a8 <SEGGER_RTT_WriteDownBufferNoLock>
 8004a7e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004a86:	697b      	ldr	r3, [r7, #20]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20012eb4 	.word	0x20012eb4

08004a94 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004aa2:	4b3d      	ldr	r3, [pc, #244]	; (8004b98 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b53      	cmp	r3, #83	; 0x53
 8004aae:	d001      	beq.n	8004ab4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004ab0:	f7ff fd4c 	bl	800454c <_DoInit>
  SEGGER_RTT_LOCK();
 8004ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab8:	f04f 0120 	mov.w	r1, #32
 8004abc:	f381 8811 	msr	BASEPRI, r1
 8004ac0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ac2:	4b35      	ldr	r3, [pc, #212]	; (8004b98 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004ac4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004aca:	6939      	ldr	r1, [r7, #16]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	4413      	add	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	440b      	add	r3, r1
 8004ada:	3304      	adds	r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d008      	beq.n	8004af4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	dbeb      	blt.n	8004aca <SEGGER_RTT_AllocUpBuffer+0x36>
 8004af2:	e000      	b.n	8004af6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004af4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	da3f      	bge.n	8004b80 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004b00:	6939      	ldr	r1, [r7, #16]
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	440b      	add	r3, r1
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004b14:	6939      	ldr	r1, [r7, #16]
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4413      	add	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	440b      	add	r3, r1
 8004b24:	3304      	adds	r3, #4
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004b2a:	6939      	ldr	r1, [r7, #16]
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4413      	add	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	440b      	add	r3, r1
 8004b38:	3320      	adds	r3, #32
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004b3e:	6939      	ldr	r1, [r7, #16]
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	4613      	mov	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4413      	add	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3328      	adds	r3, #40	; 0x28
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004b52:	6939      	ldr	r1, [r7, #16]
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	4613      	mov	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	4413      	add	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	440b      	add	r3, r1
 8004b60:	3324      	adds	r3, #36	; 0x24
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004b66:	6939      	ldr	r1, [r7, #16]
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	4413      	add	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	440b      	add	r3, r1
 8004b74:	332c      	adds	r3, #44	; 0x2c
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b7a:	f3bf 8f5f 	dmb	sy
 8004b7e:	e002      	b.n	8004b86 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004b80:	f04f 33ff 	mov.w	r3, #4294967295
 8004b84:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20012eb4 	.word	0x20012eb4

08004b9c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08a      	sub	sp, #40	; 0x28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004baa:	4b21      	ldr	r3, [pc, #132]	; (8004c30 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b53      	cmp	r3, #83	; 0x53
 8004bb6:	d001      	beq.n	8004bbc <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004bb8:	f7ff fcc8 	bl	800454c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004bbc:	4b1c      	ldr	r3, [pc, #112]	; (8004c30 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004bbe:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d82c      	bhi.n	8004c20 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8004bca:	f04f 0120 	mov.w	r1, #32
 8004bce:	f381 8811 	msr	BASEPRI, r1
 8004bd2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	4413      	add	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	3360      	adds	r3, #96	; 0x60
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00e      	beq.n	8004c0a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2200      	movs	r2, #0
 8004c02:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2200      	movs	r2, #0
 8004c08:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c10:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1e:	e002      	b.n	8004c26 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004c20:	f04f 33ff 	mov.w	r3, #4294967295
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3728      	adds	r7, #40	; 0x28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	20012eb4 	.word	0x20012eb4

08004c34 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	60fa      	str	r2, [r7, #12]
 8004c4a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b80      	cmp	r3, #128	; 0x80
 8004c50:	d90a      	bls.n	8004c68 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004c56:	e007      	b.n	8004c68 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	1c53      	adds	r3, r2, #1
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1c59      	adds	r1, r3, #1
 8004c62:	60f9      	str	r1, [r7, #12]
 8004c64:	7812      	ldrb	r2, [r2, #0]
 8004c66:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	1e5a      	subs	r2, r3, #1
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <_EncodeStr+0x46>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1ee      	bne.n	8004c58 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004c86:	68fb      	ldr	r3, [r7, #12]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3307      	adds	r3, #7
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004cb2:	4b34      	ldr	r3, [pc, #208]	; (8004d84 <_HandleIncomingPacket+0xd8>)
 8004cb4:	7e1b      	ldrb	r3, [r3, #24]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	1cfb      	adds	r3, r7, #3
 8004cba:	2201      	movs	r2, #1
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	f7ff fded 	bl	800489c <SEGGER_RTT_ReadNoLock>
 8004cc2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d057      	beq.n	8004d7a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	2b80      	cmp	r3, #128	; 0x80
 8004cce:	d031      	beq.n	8004d34 <_HandleIncomingPacket+0x88>
 8004cd0:	2b80      	cmp	r3, #128	; 0x80
 8004cd2:	dc40      	bgt.n	8004d56 <_HandleIncomingPacket+0xaa>
 8004cd4:	2b07      	cmp	r3, #7
 8004cd6:	dc15      	bgt.n	8004d04 <_HandleIncomingPacket+0x58>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	dd3c      	ble.n	8004d56 <_HandleIncomingPacket+0xaa>
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	2b06      	cmp	r3, #6
 8004ce0:	d839      	bhi.n	8004d56 <_HandleIncomingPacket+0xaa>
 8004ce2:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <_HandleIncomingPacket+0x3c>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004d0b 	.word	0x08004d0b
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d17 	.word	0x08004d17
 8004cf4:	08004d1d 	.word	0x08004d1d
 8004cf8:	08004d23 	.word	0x08004d23
 8004cfc:	08004d29 	.word	0x08004d29
 8004d00:	08004d2f 	.word	0x08004d2f
 8004d04:	2b7f      	cmp	r3, #127	; 0x7f
 8004d06:	d033      	beq.n	8004d70 <_HandleIncomingPacket+0xc4>
 8004d08:	e025      	b.n	8004d56 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004d0a:	f000 ff7d 	bl	8005c08 <SEGGER_SYSVIEW_Start>
      break;
 8004d0e:	e034      	b.n	8004d7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004d10:	f001 f836 	bl	8005d80 <SEGGER_SYSVIEW_Stop>
      break;
 8004d14:	e031      	b.n	8004d7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004d16:	f001 fa0f 	bl	8006138 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004d1a:	e02e      	b.n	8004d7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004d1c:	f001 f9d4 	bl	80060c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004d20:	e02b      	b.n	8004d7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004d22:	f001 f853 	bl	8005dcc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004d26:	e028      	b.n	8004d7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004d28:	f001 fc4c 	bl	80065c4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004d2c:	e025      	b.n	8004d7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004d2e:	f001 fc2b 	bl	8006588 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004d32:	e022      	b.n	8004d7a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d34:	4b13      	ldr	r3, [pc, #76]	; (8004d84 <_HandleIncomingPacket+0xd8>)
 8004d36:	7e1b      	ldrb	r3, [r3, #24]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	1cfb      	adds	r3, r7, #3
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	4619      	mov	r1, r3
 8004d40:	f7ff fdac 	bl	800489c <SEGGER_RTT_ReadNoLock>
 8004d44:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d013      	beq.n	8004d74 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 fb90 	bl	8006474 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004d54:	e00e      	b.n	8004d74 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	b25b      	sxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	da0c      	bge.n	8004d78 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d5e:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <_HandleIncomingPacket+0xd8>)
 8004d60:	7e1b      	ldrb	r3, [r3, #24]
 8004d62:	4618      	mov	r0, r3
 8004d64:	1cfb      	adds	r3, r7, #3
 8004d66:	2201      	movs	r2, #1
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f7ff fd97 	bl	800489c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004d6e:	e003      	b.n	8004d78 <_HandleIncomingPacket+0xcc>
      break;
 8004d70:	bf00      	nop
 8004d72:	e002      	b.n	8004d7a <_HandleIncomingPacket+0xce>
      break;
 8004d74:	bf00      	nop
 8004d76:	e000      	b.n	8004d7a <_HandleIncomingPacket+0xce>
      break;
 8004d78:	bf00      	nop
    }
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20014374 	.word	0x20014374

08004d88 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08c      	sub	sp, #48	; 0x30
 8004d8c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004d8e:	2301      	movs	r3, #1
 8004d90:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004d92:	1d3b      	adds	r3, r7, #4
 8004d94:	3301      	adds	r3, #1
 8004d96:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d9c:	4b32      	ldr	r3, [pc, #200]	; (8004e68 <_TrySendOverflowPacket+0xe0>)
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da2:	e00b      	b.n	8004dbc <_TrySendOverflowPacket+0x34>
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004daa:	1c59      	adds	r1, r3, #1
 8004dac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004dae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	09db      	lsrs	r3, r3, #7
 8004dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8004dc0:	d8f0      	bhi.n	8004da4 <_TrySendOverflowPacket+0x1c>
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004dd2:	4b26      	ldr	r3, [pc, #152]	; (8004e6c <_TrySendOverflowPacket+0xe4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004dd8:	4b23      	ldr	r3, [pc, #140]	; (8004e68 <_TrySendOverflowPacket+0xe0>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	623b      	str	r3, [r7, #32]
 8004dea:	e00b      	b.n	8004e04 <_TrySendOverflowPacket+0x7c>
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	1c59      	adds	r1, r3, #1
 8004df4:	6279      	str	r1, [r7, #36]	; 0x24
 8004df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	09db      	lsrs	r3, r3, #7
 8004e02:	623b      	str	r3, [r7, #32]
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	2b7f      	cmp	r3, #127	; 0x7f
 8004e08:	d8f0      	bhi.n	8004dec <_TrySendOverflowPacket+0x64>
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004e1a:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <_TrySendOverflowPacket+0xe0>)
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	1d3b      	adds	r3, r7, #4
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	1d3b      	adds	r3, r7, #4
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	f7fb f9e0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e30:	4603      	mov	r3, r0
 8004e32:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004e34:	f7ff fafe 	bl	8004434 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d009      	beq.n	8004e52 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <_TrySendOverflowPacket+0xe0>)
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004e44:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <_TrySendOverflowPacket+0xe0>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <_TrySendOverflowPacket+0xe0>)
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	e004      	b.n	8004e5c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <_TrySendOverflowPacket+0xe0>)
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	3301      	adds	r3, #1
 8004e58:	4a03      	ldr	r2, [pc, #12]	; (8004e68 <_TrySendOverflowPacket+0xe0>)
 8004e5a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004e5c:	693b      	ldr	r3, [r7, #16]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3730      	adds	r7, #48	; 0x30
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20014374 	.word	0x20014374
 8004e6c:	e0001004 	.word	0xe0001004

08004e70 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08a      	sub	sp, #40	; 0x28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004e7c:	4b96      	ldr	r3, [pc, #600]	; (80050d8 <_SendPacket+0x268>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d010      	beq.n	8004ea6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004e84:	4b94      	ldr	r3, [pc, #592]	; (80050d8 <_SendPacket+0x268>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 8130 	beq.w	80050ee <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004e8e:	4b92      	ldr	r3, [pc, #584]	; (80050d8 <_SendPacket+0x268>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d109      	bne.n	8004eaa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004e96:	f7ff ff77 	bl	8004d88 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004e9a:	4b8f      	ldr	r3, [pc, #572]	; (80050d8 <_SendPacket+0x268>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	f040 8127 	bne.w	80050f2 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8004ea4:	e001      	b.n	8004eaa <_SendPacket+0x3a>
    goto Send;
 8004ea6:	bf00      	nop
 8004ea8:	e000      	b.n	8004eac <_SendPacket+0x3c>
Send:
 8004eaa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b1f      	cmp	r3, #31
 8004eb0:	d809      	bhi.n	8004ec6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004eb2:	4b89      	ldr	r3, [pc, #548]	; (80050d8 <_SendPacket+0x268>)
 8004eb4:	69da      	ldr	r2, [r3, #28]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f040 8118 	bne.w	80050f6 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b17      	cmp	r3, #23
 8004eca:	d807      	bhi.n	8004edc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	e0c4      	b.n	8005066 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee8:	d912      	bls.n	8004f10 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	09da      	lsrs	r2, r3, #7
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	3a01      	subs	r2, #1
 8004f02:	60fa      	str	r2, [r7, #12]
 8004f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	e006      	b.n	8004f1e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b7e      	cmp	r3, #126	; 0x7e
 8004f22:	d807      	bhi.n	8004f34 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	e098      	b.n	8005066 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f3a:	d212      	bcs.n	8004f62 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	09da      	lsrs	r2, r3, #7
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	3a01      	subs	r2, #1
 8004f54:	60fa      	str	r2, [r7, #12]
 8004f56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	e081      	b.n	8005066 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f68:	d21d      	bcs.n	8004fa6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	0b9a      	lsrs	r2, r3, #14
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	09db      	lsrs	r3, r3, #7
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	3a01      	subs	r2, #1
 8004f84:	60fa      	str	r2, [r7, #12]
 8004f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	3a01      	subs	r2, #1
 8004f98:	60fa      	str	r2, [r7, #12]
 8004f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	e05f      	b.n	8005066 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fac:	d228      	bcs.n	8005000 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	0d5a      	lsrs	r2, r3, #21
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	0b9b      	lsrs	r3, r3, #14
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	3a01      	subs	r2, #1
 8004fc8:	60fa      	str	r2, [r7, #12]
 8004fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	09db      	lsrs	r3, r3, #7
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	3a01      	subs	r2, #1
 8004fde:	60fa      	str	r2, [r7, #12]
 8004fe0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	3a01      	subs	r2, #1
 8004ff2:	60fa      	str	r2, [r7, #12]
 8004ff4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	e032      	b.n	8005066 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	0f1a      	lsrs	r2, r3, #28
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	3b01      	subs	r3, #1
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	0d5b      	lsrs	r3, r3, #21
 8005014:	b2db      	uxtb	r3, r3
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	3a01      	subs	r2, #1
 800501a:	60fa      	str	r2, [r7, #12]
 800501c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005020:	b2da      	uxtb	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	0b9b      	lsrs	r3, r3, #14
 800502a:	b2db      	uxtb	r3, r3
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	3a01      	subs	r2, #1
 8005030:	60fa      	str	r2, [r7, #12]
 8005032:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005036:	b2da      	uxtb	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	09db      	lsrs	r3, r3, #7
 8005040:	b2db      	uxtb	r3, r3
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	3a01      	subs	r2, #1
 8005046:	60fa      	str	r2, [r7, #12]
 8005048:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800504c:	b2da      	uxtb	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	3a01      	subs	r2, #1
 800505a:	60fa      	str	r2, [r7, #12]
 800505c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005060:	b2da      	uxtb	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005066:	4b1d      	ldr	r3, [pc, #116]	; (80050dc <_SendPacket+0x26c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800506c:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <_SendPacket+0x268>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	623b      	str	r3, [r7, #32]
 800507e:	e00b      	b.n	8005098 <_SendPacket+0x228>
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	1c59      	adds	r1, r3, #1
 8005088:	6279      	str	r1, [r7, #36]	; 0x24
 800508a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	09db      	lsrs	r3, r3, #7
 8005096:	623b      	str	r3, [r7, #32]
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	2b7f      	cmp	r3, #127	; 0x7f
 800509c:	d8f0      	bhi.n	8005080 <_SendPacket+0x210>
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	627a      	str	r2, [r7, #36]	; 0x24
 80050a4:	6a3a      	ldr	r2, [r7, #32]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80050ae:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <_SendPacket+0x268>)
 80050b0:	785b      	ldrb	r3, [r3, #1]
 80050b2:	4618      	mov	r0, r3
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	68f9      	ldr	r1, [r7, #12]
 80050be:	f7fb f897 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80050c2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80050c4:	f7ff f9b6 	bl	8004434 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d008      	beq.n	80050e0 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80050ce:	4a02      	ldr	r2, [pc, #8]	; (80050d8 <_SendPacket+0x268>)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	60d3      	str	r3, [r2, #12]
 80050d4:	e010      	b.n	80050f8 <_SendPacket+0x288>
 80050d6:	bf00      	nop
 80050d8:	20014374 	.word	0x20014374
 80050dc:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80050e0:	4b19      	ldr	r3, [pc, #100]	; (8005148 <_SendPacket+0x2d8>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	4b17      	ldr	r3, [pc, #92]	; (8005148 <_SendPacket+0x2d8>)
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	e004      	b.n	80050f8 <_SendPacket+0x288>
    goto SendDone;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <_SendPacket+0x288>
      goto SendDone;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <_SendPacket+0x288>
      goto SendDone;
 80050f6:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80050f8:	4b13      	ldr	r3, [pc, #76]	; (8005148 <_SendPacket+0x2d8>)
 80050fa:	7e1b      	ldrb	r3, [r3, #24]
 80050fc:	4619      	mov	r1, r3
 80050fe:	4a13      	ldr	r2, [pc, #76]	; (800514c <_SendPacket+0x2dc>)
 8005100:	460b      	mov	r3, r1
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	440b      	add	r3, r1
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	4413      	add	r3, r2
 800510a:	336c      	adds	r3, #108	; 0x6c
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <_SendPacket+0x2d8>)
 8005110:	7e1b      	ldrb	r3, [r3, #24]
 8005112:	4618      	mov	r0, r3
 8005114:	490d      	ldr	r1, [pc, #52]	; (800514c <_SendPacket+0x2dc>)
 8005116:	4603      	mov	r3, r0
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	4403      	add	r3, r0
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	440b      	add	r3, r1
 8005120:	3370      	adds	r3, #112	; 0x70
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d00b      	beq.n	8005140 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <_SendPacket+0x2d8>)
 800512a:	789b      	ldrb	r3, [r3, #2]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d107      	bne.n	8005140 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <_SendPacket+0x2d8>)
 8005132:	2201      	movs	r2, #1
 8005134:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005136:	f7ff fdb9 	bl	8004cac <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800513a:	4b03      	ldr	r3, [pc, #12]	; (8005148 <_SendPacket+0x2d8>)
 800513c:	2200      	movs	r2, #0
 800513e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005140:	bf00      	nop
 8005142:	3728      	adds	r7, #40	; 0x28
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20014374 	.word	0x20014374
 800514c:	20012eb4 	.word	0x20012eb4

08005150 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b08a      	sub	sp, #40	; 0x28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	3301      	adds	r3, #1
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d80a      	bhi.n	8005180 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	1c59      	adds	r1, r3, #1
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6051      	str	r1, [r2, #4]
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	2b80      	cmp	r3, #128	; 0x80
 8005186:	d15a      	bne.n	800523e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	623b      	str	r3, [r7, #32]
 80051a8:	e00b      	b.n	80051c2 <_StoreChar+0x72>
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	1c59      	adds	r1, r3, #1
 80051b2:	6279      	str	r1, [r7, #36]	; 0x24
 80051b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	09db      	lsrs	r3, r3, #7
 80051c0:	623b      	str	r3, [r7, #32]
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	2b7f      	cmp	r3, #127	; 0x7f
 80051c6:	d8f0      	bhi.n	80051aa <_StoreChar+0x5a>
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	627a      	str	r2, [r7, #36]	; 0x24
 80051ce:	6a3a      	ldr	r2, [r7, #32]
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	61fb      	str	r3, [r7, #28]
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
 80051e0:	e00b      	b.n	80051fa <_StoreChar+0xaa>
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	1c59      	adds	r1, r3, #1
 80051ea:	61f9      	str	r1, [r7, #28]
 80051ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	09db      	lsrs	r3, r3, #7
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b7f      	cmp	r3, #127	; 0x7f
 80051fe:	d8f0      	bhi.n	80051e2 <_StoreChar+0x92>
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	61fa      	str	r2, [r7, #28]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	221a      	movs	r2, #26
 8005216:	6939      	ldr	r1, [r7, #16]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fe29 	bl	8004e70 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff fd36 	bl	8004c94 <_PreparePacket>
 8005228:	4602      	mov	r2, r0
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	611a      	str	r2, [r3, #16]
  }
}
 800523e:	bf00      	nop
 8005240:	3728      	adds	r7, #40	; 0x28
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005248:	b580      	push	{r7, lr}
 800524a:	b08a      	sub	sp, #40	; 0x28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800525a:	2301      	movs	r3, #1
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800525e:	2301      	movs	r3, #1
 8005260:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005262:	e007      	b.n	8005274 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005264:	6a3a      	ldr	r2, [r7, #32]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	fbb2 f3f3 	udiv	r3, r2, r3
 800526c:	623b      	str	r3, [r7, #32]
    Width++;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	3301      	adds	r3, #1
 8005272:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005274:	6a3a      	ldr	r2, [r7, #32]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	429a      	cmp	r2, r3
 800527a:	d2f3      	bcs.n	8005264 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	429a      	cmp	r2, r3
 8005282:	d901      	bls.n	8005288 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d11f      	bne.n	80052d2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01c      	beq.n	80052d2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <_PrintUnsigned+0x66>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d102      	bne.n	80052ae <_PrintUnsigned+0x66>
        c = '0';
 80052a8:	2330      	movs	r3, #48	; 0x30
 80052aa:	76fb      	strb	r3, [r7, #27]
 80052ac:	e001      	b.n	80052b2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80052ae:	2320      	movs	r3, #32
 80052b0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052b2:	e007      	b.n	80052c4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80052b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b6:	3b01      	subs	r3, #1
 80052b8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80052ba:	7efb      	ldrb	r3, [r7, #27]
 80052bc:	4619      	mov	r1, r3
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7ff ff46 	bl	8005150 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <_PrintUnsigned+0x8a>
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d3f0      	bcc.n	80052b4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d903      	bls.n	80052e0 <_PrintUnsigned+0x98>
      NumDigits--;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	3b01      	subs	r3, #1
 80052dc:	603b      	str	r3, [r7, #0]
 80052de:	e009      	b.n	80052f4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d200      	bcs.n	80052f4 <_PrintUnsigned+0xac>
        break;
 80052f2:	e005      	b.n	8005300 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	fb02 f303 	mul.w	r3, r2, r3
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80052fe:	e7e8      	b.n	80052d2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005318:	4a15      	ldr	r2, [pc, #84]	; (8005370 <_PrintUnsigned+0x128>)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	4413      	add	r3, r2
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	4619      	mov	r1, r3
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f7ff ff14 	bl	8005150 <_StoreChar>
    Digit /= Base;
 8005328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005330:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1e3      	bne.n	8005300 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d011      	beq.n	8005366 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00e      	beq.n	8005366 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005348:	e006      	b.n	8005358 <_PrintUnsigned+0x110>
        FieldWidth--;
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	3b01      	subs	r3, #1
 800534e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005350:	2120      	movs	r1, #32
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f7ff fefc 	bl	8005150 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <_PrintUnsigned+0x11e>
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	429a      	cmp	r2, r3
 8005364:	d3f1      	bcc.n	800534a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005366:	bf00      	nop
 8005368:	3728      	adds	r7, #40	; 0x28
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	080072a0 	.word	0x080072a0

08005374 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	bfb8      	it	lt
 8005388:	425b      	neglt	r3, r3
 800538a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800538c:	2301      	movs	r3, #1
 800538e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005390:	e007      	b.n	80053a2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	fb92 f3f3 	sdiv	r3, r2, r3
 800539a:	613b      	str	r3, [r7, #16]
    Width++;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	3301      	adds	r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	daf3      	bge.n	8005392 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d901      	bls.n	80053b6 <_PrintInt+0x42>
    Width = NumDigits;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <_PrintInt+0x5e>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	db04      	blt.n	80053cc <_PrintInt+0x58>
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <_PrintInt+0x5e>
    FieldWidth--;
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <_PrintInt+0x6e>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d016      	beq.n	8005410 <_PrintInt+0x9c>
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d111      	bne.n	8005410 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00e      	beq.n	8005410 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053f2:	e006      	b.n	8005402 <_PrintInt+0x8e>
        FieldWidth--;
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80053fa:	2120      	movs	r1, #32
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7ff fea7 	bl	8005150 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <_PrintInt+0x9c>
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	429a      	cmp	r2, r3
 800540e:	d3f1      	bcc.n	80053f4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	da07      	bge.n	8005426 <_PrintInt+0xb2>
    v = -v;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	425b      	negs	r3, r3
 800541a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800541c:	212d      	movs	r1, #45	; 0x2d
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7ff fe96 	bl	8005150 <_StoreChar>
 8005424:	e008      	b.n	8005438 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005430:	212b      	movs	r1, #43	; 0x2b
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff fe8c 	bl	8005150 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d019      	beq.n	8005476 <_PrintInt+0x102>
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d114      	bne.n	8005476 <_PrintInt+0x102>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d111      	bne.n	8005476 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00e      	beq.n	8005476 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005458:	e006      	b.n	8005468 <_PrintInt+0xf4>
        FieldWidth--;
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	3b01      	subs	r3, #1
 800545e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005460:	2130      	movs	r1, #48	; 0x30
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff fe74 	bl	8005150 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <_PrintInt+0x102>
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	429a      	cmp	r2, r3
 8005474:	d3f1      	bcc.n	800545a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f7ff fedf 	bl	8005248 <_PrintUnsigned>
}
 800548a:	bf00      	nop
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b098      	sub	sp, #96	; 0x60
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80054a0:	f3ef 8311 	mrs	r3, BASEPRI
 80054a4:	f04f 0120 	mov.w	r1, #32
 80054a8:	f381 8811 	msr	BASEPRI, r1
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ae:	48b7      	ldr	r0, [pc, #732]	; (800578c <_VPrintTarget+0x2f8>)
 80054b0:	f7ff fbf0 	bl	8004c94 <_PreparePacket>
 80054b4:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80054b6:	4bb5      	ldr	r3, [pc, #724]	; (800578c <_VPrintTarget+0x2f8>)
 80054b8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80054ba:	2300      	movs	r3, #0
 80054bc:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	3301      	adds	r3, #1
 80054c6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3301      	adds	r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80054da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 81a8 	beq.w	8005834 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80054e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054e8:	2b25      	cmp	r3, #37	; 0x25
 80054ea:	f040 8195 	bne.w	8005818 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80054ee:	2300      	movs	r3, #0
 80054f0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80054f2:	2301      	movs	r3, #1
 80054f4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80054fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005502:	3b23      	subs	r3, #35	; 0x23
 8005504:	2b0d      	cmp	r3, #13
 8005506:	d83f      	bhi.n	8005588 <_VPrintTarget+0xf4>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <_VPrintTarget+0x7c>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	08005579 	.word	0x08005579
 8005514:	08005589 	.word	0x08005589
 8005518:	08005589 	.word	0x08005589
 800551c:	08005589 	.word	0x08005589
 8005520:	08005589 	.word	0x08005589
 8005524:	08005589 	.word	0x08005589
 8005528:	08005589 	.word	0x08005589
 800552c:	08005589 	.word	0x08005589
 8005530:	08005569 	.word	0x08005569
 8005534:	08005589 	.word	0x08005589
 8005538:	08005549 	.word	0x08005549
 800553c:	08005589 	.word	0x08005589
 8005540:	08005589 	.word	0x08005589
 8005544:	08005559 	.word	0x08005559
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3301      	adds	r3, #1
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	e01a      	b.n	800558e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555a:	f043 0302 	orr.w	r3, r3, #2
 800555e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3301      	adds	r3, #1
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	e012      	b.n	800558e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800556a:	f043 0304 	orr.w	r3, r3, #4
 800556e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3301      	adds	r3, #1
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e00a      	b.n	800558e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800557a:	f043 0308 	orr.w	r3, r3, #8
 800557e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3301      	adds	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e002      	b.n	800558e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005588:	2300      	movs	r3, #0
 800558a:	653b      	str	r3, [r7, #80]	; 0x50
 800558c:	bf00      	nop
        }
      } while (v);
 800558e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1b0      	bne.n	80054f6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005594:	2300      	movs	r3, #0
 8005596:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80055a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055a4:	2b2f      	cmp	r3, #47	; 0x2f
 80055a6:	d912      	bls.n	80055ce <_VPrintTarget+0x13a>
 80055a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055ac:	2b39      	cmp	r3, #57	; 0x39
 80055ae:	d80e      	bhi.n	80055ce <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3301      	adds	r3, #1
 80055b4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80055b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	461a      	mov	r2, r3
 80055c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055c6:	4413      	add	r3, r2
 80055c8:	3b30      	subs	r3, #48	; 0x30
 80055ca:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80055cc:	e7e4      	b.n	8005598 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80055ce:	2300      	movs	r3, #0
 80055d0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80055da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055de:	2b2e      	cmp	r3, #46	; 0x2e
 80055e0:	d11d      	bne.n	800561e <_VPrintTarget+0x18a>
        sFormat++;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3301      	adds	r3, #1
 80055e6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80055f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055f4:	2b2f      	cmp	r3, #47	; 0x2f
 80055f6:	d912      	bls.n	800561e <_VPrintTarget+0x18a>
 80055f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055fc:	2b39      	cmp	r3, #57	; 0x39
 80055fe:	d80e      	bhi.n	800561e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3301      	adds	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	461a      	mov	r2, r3
 8005612:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005616:	4413      	add	r3, r2
 8005618:	3b30      	subs	r3, #48	; 0x30
 800561a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800561c:	e7e4      	b.n	80055e8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005626:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800562a:	2b6c      	cmp	r3, #108	; 0x6c
 800562c:	d003      	beq.n	8005636 <_VPrintTarget+0x1a2>
 800562e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005632:	2b68      	cmp	r3, #104	; 0x68
 8005634:	d107      	bne.n	8005646 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3301      	adds	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005644:	e7ef      	b.n	8005626 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005646:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800564a:	2b25      	cmp	r3, #37	; 0x25
 800564c:	f000 80d8 	beq.w	8005800 <_VPrintTarget+0x36c>
 8005650:	2b25      	cmp	r3, #37	; 0x25
 8005652:	f2c0 80dc 	blt.w	800580e <_VPrintTarget+0x37a>
 8005656:	2b78      	cmp	r3, #120	; 0x78
 8005658:	f300 80d9 	bgt.w	800580e <_VPrintTarget+0x37a>
 800565c:	2b58      	cmp	r3, #88	; 0x58
 800565e:	f2c0 80d6 	blt.w	800580e <_VPrintTarget+0x37a>
 8005662:	3b58      	subs	r3, #88	; 0x58
 8005664:	2b20      	cmp	r3, #32
 8005666:	f200 80d2 	bhi.w	800580e <_VPrintTarget+0x37a>
 800566a:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <_VPrintTarget+0x1dc>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	08005767 	.word	0x08005767
 8005674:	0800580f 	.word	0x0800580f
 8005678:	0800580f 	.word	0x0800580f
 800567c:	0800580f 	.word	0x0800580f
 8005680:	0800580f 	.word	0x0800580f
 8005684:	0800580f 	.word	0x0800580f
 8005688:	0800580f 	.word	0x0800580f
 800568c:	0800580f 	.word	0x0800580f
 8005690:	0800580f 	.word	0x0800580f
 8005694:	0800580f 	.word	0x0800580f
 8005698:	0800580f 	.word	0x0800580f
 800569c:	080056f5 	.word	0x080056f5
 80056a0:	0800571b 	.word	0x0800571b
 80056a4:	0800580f 	.word	0x0800580f
 80056a8:	0800580f 	.word	0x0800580f
 80056ac:	0800580f 	.word	0x0800580f
 80056b0:	0800580f 	.word	0x0800580f
 80056b4:	0800580f 	.word	0x0800580f
 80056b8:	0800580f 	.word	0x0800580f
 80056bc:	0800580f 	.word	0x0800580f
 80056c0:	0800580f 	.word	0x0800580f
 80056c4:	0800580f 	.word	0x0800580f
 80056c8:	0800580f 	.word	0x0800580f
 80056cc:	0800580f 	.word	0x0800580f
 80056d0:	080057db 	.word	0x080057db
 80056d4:	0800580f 	.word	0x0800580f
 80056d8:	0800580f 	.word	0x0800580f
 80056dc:	08005791 	.word	0x08005791
 80056e0:	0800580f 	.word	0x0800580f
 80056e4:	08005741 	.word	0x08005741
 80056e8:	0800580f 	.word	0x0800580f
 80056ec:	0800580f 	.word	0x0800580f
 80056f0:	08005767 	.word	0x08005767
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	1d19      	adds	r1, r3, #4
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6011      	str	r1, [r2, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005708:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800570c:	f107 0310 	add.w	r3, r7, #16
 8005710:	4611      	mov	r1, r2
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fd1c 	bl	8005150 <_StoreChar>
        break;
 8005718:	e07a      	b.n	8005810 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	1d19      	adds	r1, r3, #4
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6011      	str	r1, [r2, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005728:	f107 0010 	add.w	r0, r7, #16
 800572c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800572e:	9301      	str	r3, [sp, #4]
 8005730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005736:	220a      	movs	r2, #10
 8005738:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800573a:	f7ff fe1b 	bl	8005374 <_PrintInt>
        break;
 800573e:	e067      	b.n	8005810 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	1d19      	adds	r1, r3, #4
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6011      	str	r1, [r2, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800574e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005750:	f107 0010 	add.w	r0, r7, #16
 8005754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575e:	220a      	movs	r2, #10
 8005760:	f7ff fd72 	bl	8005248 <_PrintUnsigned>
        break;
 8005764:	e054      	b.n	8005810 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	1d19      	adds	r1, r3, #4
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6011      	str	r1, [r2, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005774:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005776:	f107 0010 	add.w	r0, r7, #16
 800577a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005784:	2210      	movs	r2, #16
 8005786:	f7ff fd5f 	bl	8005248 <_PrintUnsigned>
        break;
 800578a:	e041      	b.n	8005810 <_VPrintTarget+0x37c>
 800578c:	200143a4 	.word	0x200143a4
      case 's':
        s = va_arg(*pParamList, const char*);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	1d19      	adds	r1, r3, #4
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6011      	str	r1, [r2, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 800579e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <_VPrintTarget+0x314>
          s = "(null)";
 80057a4:	4b4a      	ldr	r3, [pc, #296]	; (80058d0 <_VPrintTarget+0x43c>)
 80057a6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 80057a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 80057b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b2:	3301      	adds	r3, #1
 80057b4:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 80057b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80057be:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80057c2:	f107 0310 	add.w	r3, r7, #16
 80057c6:	4611      	mov	r1, r2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fcc1 	bl	8005150 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	2b7f      	cmp	r3, #127	; 0x7f
 80057d2:	d9e9      	bls.n	80057a8 <_VPrintTarget+0x314>
        break;
 80057d4:	e01c      	b.n	8005810 <_VPrintTarget+0x37c>
            break;
 80057d6:	bf00      	nop
        break;
 80057d8:	e01a      	b.n	8005810 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	1d19      	adds	r1, r3, #4
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6011      	str	r1, [r2, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80057e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057ea:	f107 0010 	add.w	r0, r7, #16
 80057ee:	2300      	movs	r3, #0
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	2308      	movs	r3, #8
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	2308      	movs	r3, #8
 80057f8:	2210      	movs	r2, #16
 80057fa:	f7ff fd25 	bl	8005248 <_PrintUnsigned>
        break;
 80057fe:	e007      	b.n	8005810 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005800:	f107 0310 	add.w	r3, r7, #16
 8005804:	2125      	movs	r1, #37	; 0x25
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fca2 	bl	8005150 <_StoreChar>
        break;
 800580c:	e000      	b.n	8005810 <_VPrintTarget+0x37c>
      default:
        break;
 800580e:	bf00      	nop
      }
      sFormat++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3301      	adds	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	e007      	b.n	8005828 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005818:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800581c:	f107 0310 	add.w	r3, r7, #16
 8005820:	4611      	mov	r1, r2
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff fc94 	bl	8005150 <_StoreChar>
    }
  } while (*sFormat);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	f47f ae4d 	bne.w	80054cc <_VPrintTarget+0x38>
 8005832:	e000      	b.n	8005836 <_VPrintTarget+0x3a2>
      break;
 8005834:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d041      	beq.n	80058c0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800583c:	6a3a      	ldr	r2, [r7, #32]
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	63bb      	str	r3, [r7, #56]	; 0x38
 800584c:	e00b      	b.n	8005866 <_VPrintTarget+0x3d2>
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	b2da      	uxtb	r2, r3
 8005852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005854:	1c59      	adds	r1, r3, #1
 8005856:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005858:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	09db      	lsrs	r3, r3, #7
 8005864:	63bb      	str	r3, [r7, #56]	; 0x38
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	2b7f      	cmp	r3, #127	; 0x7f
 800586a:	d8f0      	bhi.n	800584e <_VPrintTarget+0x3ba>
 800586c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	637b      	str	r3, [r7, #52]	; 0x34
 8005880:	2300      	movs	r3, #0
 8005882:	633b      	str	r3, [r7, #48]	; 0x30
 8005884:	e00b      	b.n	800589e <_VPrintTarget+0x40a>
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	b2da      	uxtb	r2, r3
 800588a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588c:	1c59      	adds	r1, r3, #1
 800588e:	6379      	str	r1, [r7, #52]	; 0x34
 8005890:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	09db      	lsrs	r3, r3, #7
 800589c:	633b      	str	r3, [r7, #48]	; 0x30
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	2b7f      	cmp	r3, #127	; 0x7f
 80058a2:	d8f0      	bhi.n	8005886 <_VPrintTarget+0x3f2>
 80058a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	637a      	str	r2, [r7, #52]	; 0x34
 80058aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	701a      	strb	r2, [r3, #0]
 80058b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	6979      	ldr	r1, [r7, #20]
 80058b8:	221a      	movs	r2, #26
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff fad8 	bl	8004e70 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80058c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80058c6:	bf00      	nop
 80058c8:	3758      	adds	r7, #88	; 0x58
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	0800724c 	.word	0x0800724c

080058d4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af02      	add	r7, sp, #8
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80058e2:	2300      	movs	r3, #0
 80058e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058e8:	4917      	ldr	r1, [pc, #92]	; (8005948 <SEGGER_SYSVIEW_Init+0x74>)
 80058ea:	4818      	ldr	r0, [pc, #96]	; (800594c <SEGGER_SYSVIEW_Init+0x78>)
 80058ec:	f7ff f8d2 	bl	8004a94 <SEGGER_RTT_AllocUpBuffer>
 80058f0:	4603      	mov	r3, r0
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	4b16      	ldr	r3, [pc, #88]	; (8005950 <SEGGER_SYSVIEW_Init+0x7c>)
 80058f6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80058f8:	4b15      	ldr	r3, [pc, #84]	; (8005950 <SEGGER_SYSVIEW_Init+0x7c>)
 80058fa:	785a      	ldrb	r2, [r3, #1]
 80058fc:	4b14      	ldr	r3, [pc, #80]	; (8005950 <SEGGER_SYSVIEW_Init+0x7c>)
 80058fe:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005900:	4b13      	ldr	r3, [pc, #76]	; (8005950 <SEGGER_SYSVIEW_Init+0x7c>)
 8005902:	7e1b      	ldrb	r3, [r3, #24]
 8005904:	4618      	mov	r0, r3
 8005906:	2300      	movs	r3, #0
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	2308      	movs	r3, #8
 800590c:	4a11      	ldr	r2, [pc, #68]	; (8005954 <SEGGER_SYSVIEW_Init+0x80>)
 800590e:	490f      	ldr	r1, [pc, #60]	; (800594c <SEGGER_SYSVIEW_Init+0x78>)
 8005910:	f7ff f944 	bl	8004b9c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005914:	4b0e      	ldr	r3, [pc, #56]	; (8005950 <SEGGER_SYSVIEW_Init+0x7c>)
 8005916:	2200      	movs	r2, #0
 8005918:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800591a:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <SEGGER_SYSVIEW_Init+0x84>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a0c      	ldr	r2, [pc, #48]	; (8005950 <SEGGER_SYSVIEW_Init+0x7c>)
 8005920:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005922:	4a0b      	ldr	r2, [pc, #44]	; (8005950 <SEGGER_SYSVIEW_Init+0x7c>)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005928:	4a09      	ldr	r2, [pc, #36]	; (8005950 <SEGGER_SYSVIEW_Init+0x7c>)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800592e:	4a08      	ldr	r2, [pc, #32]	; (8005950 <SEGGER_SYSVIEW_Init+0x7c>)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005934:	4a06      	ldr	r2, [pc, #24]	; (8005950 <SEGGER_SYSVIEW_Init+0x7c>)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <SEGGER_SYSVIEW_Init+0x7c>)
 800593c:	2200      	movs	r2, #0
 800593e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005940:	bf00      	nop
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	2001336c 	.word	0x2001336c
 800594c:	08007254 	.word	0x08007254
 8005950:	20014374 	.word	0x20014374
 8005954:	2001436c 	.word	0x2001436c
 8005958:	e0001004 	.word	0xe0001004

0800595c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005964:	4a04      	ldr	r2, [pc, #16]	; (8005978 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6113      	str	r3, [r2, #16]
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	20014374 	.word	0x20014374

0800597c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005984:	f3ef 8311 	mrs	r3, BASEPRI
 8005988:	f04f 0120 	mov.w	r1, #32
 800598c:	f381 8811 	msr	BASEPRI, r1
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	4808      	ldr	r0, [pc, #32]	; (80059b4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005994:	f7ff f97e 	bl	8004c94 <_PreparePacket>
 8005998:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	68b9      	ldr	r1, [r7, #8]
 800599e:	68b8      	ldr	r0, [r7, #8]
 80059a0:	f7ff fa66 	bl	8004e70 <_SendPacket>
  RECORD_END();
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f383 8811 	msr	BASEPRI, r3
}
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	200143a4 	.word	0x200143a4

080059b8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059c2:	f3ef 8311 	mrs	r3, BASEPRI
 80059c6:	f04f 0120 	mov.w	r1, #32
 80059ca:	f381 8811 	msr	BASEPRI, r1
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	4816      	ldr	r0, [pc, #88]	; (8005a2c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80059d2:	f7ff f95f 	bl	8004c94 <_PreparePacket>
 80059d6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	61fb      	str	r3, [r7, #28]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	61bb      	str	r3, [r7, #24]
 80059e4:	e00b      	b.n	80059fe <SEGGER_SYSVIEW_RecordU32+0x46>
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	1c59      	adds	r1, r3, #1
 80059ee:	61f9      	str	r1, [r7, #28]
 80059f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	09db      	lsrs	r3, r3, #7
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b7f      	cmp	r3, #127	; 0x7f
 8005a02:	d8f0      	bhi.n	80059e6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	61fa      	str	r2, [r7, #28]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	68f9      	ldr	r1, [r7, #12]
 8005a18:	6938      	ldr	r0, [r7, #16]
 8005a1a:	f7ff fa29 	bl	8004e70 <_SendPacket>
  RECORD_END();
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f383 8811 	msr	BASEPRI, r3
}
 8005a24:	bf00      	nop
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	200143a4 	.word	0x200143a4

08005a30 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08c      	sub	sp, #48	; 0x30
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a40:	f04f 0120 	mov.w	r1, #32
 8005a44:	f381 8811 	msr	BASEPRI, r1
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	4825      	ldr	r0, [pc, #148]	; (8005ae0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005a4c:	f7ff f922 	bl	8004c94 <_PreparePacket>
 8005a50:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a5e:	e00b      	b.n	8005a78 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	1c59      	adds	r1, r3, #1
 8005a68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	09db      	lsrs	r3, r3, #7
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a7c:	d8f0      	bhi.n	8005a60 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	623b      	str	r3, [r7, #32]
 8005a96:	e00b      	b.n	8005ab0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	1c59      	adds	r1, r3, #1
 8005aa0:	6279      	str	r1, [r7, #36]	; 0x24
 8005aa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	09db      	lsrs	r3, r3, #7
 8005aae:	623b      	str	r3, [r7, #32]
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab4:	d8f0      	bhi.n	8005a98 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	627a      	str	r2, [r7, #36]	; 0x24
 8005abc:	6a3a      	ldr	r2, [r7, #32]
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	6979      	ldr	r1, [r7, #20]
 8005aca:	69b8      	ldr	r0, [r7, #24]
 8005acc:	f7ff f9d0 	bl	8004e70 <_SendPacket>
  RECORD_END();
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f383 8811 	msr	BASEPRI, r3
}
 8005ad6:	bf00      	nop
 8005ad8:	3730      	adds	r7, #48	; 0x30
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	200143a4 	.word	0x200143a4

08005ae4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b090      	sub	sp, #64	; 0x40
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005af2:	f3ef 8311 	mrs	r3, BASEPRI
 8005af6:	f04f 0120 	mov.w	r1, #32
 8005afa:	f381 8811 	msr	BASEPRI, r1
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	4840      	ldr	r0, [pc, #256]	; (8005c04 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005b02:	f7ff f8c7 	bl	8004c94 <_PreparePacket>
 8005b06:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b14:	e00b      	b.n	8005b2e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1c:	1c59      	adds	r1, r3, #1
 8005b1e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	09db      	lsrs	r3, r3, #7
 8005b2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	2b7f      	cmp	r3, #127	; 0x7f
 8005b32:	d8f0      	bhi.n	8005b16 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	637b      	str	r3, [r7, #52]	; 0x34
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b4c:	e00b      	b.n	8005b66 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b54:	1c59      	adds	r1, r3, #1
 8005b56:	6379      	str	r1, [r7, #52]	; 0x34
 8005b58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	701a      	strb	r2, [r3, #0]
 8005b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b62:	09db      	lsrs	r3, r3, #7
 8005b64:	633b      	str	r3, [r7, #48]	; 0x30
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	2b7f      	cmp	r3, #127	; 0x7f
 8005b6a:	d8f0      	bhi.n	8005b4e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	637a      	str	r2, [r7, #52]	; 0x34
 8005b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b84:	e00b      	b.n	8005b9e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	1c59      	adds	r1, r3, #1
 8005b8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	09db      	lsrs	r3, r3, #7
 8005b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba2:	d8f0      	bhi.n	8005b86 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bba:	623b      	str	r3, [r7, #32]
 8005bbc:	e00b      	b.n	8005bd6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	1c59      	adds	r1, r3, #1
 8005bc6:	6279      	str	r1, [r7, #36]	; 0x24
 8005bc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	701a      	strb	r2, [r3, #0]
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	09db      	lsrs	r3, r3, #7
 8005bd4:	623b      	str	r3, [r7, #32]
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bda:	d8f0      	bhi.n	8005bbe <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	627a      	str	r2, [r7, #36]	; 0x24
 8005be2:	6a3a      	ldr	r2, [r7, #32]
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	701a      	strb	r2, [r3, #0]
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	6979      	ldr	r1, [r7, #20]
 8005bf0:	69b8      	ldr	r0, [r7, #24]
 8005bf2:	f7ff f93d 	bl	8004e70 <_SendPacket>
  RECORD_END();
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	f383 8811 	msr	BASEPRI, r3
}
 8005bfc:	bf00      	nop
 8005bfe:	3740      	adds	r7, #64	; 0x40
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	200143a4 	.word	0x200143a4

08005c08 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08c      	sub	sp, #48	; 0x30
 8005c0c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005c0e:	4b59      	ldr	r3, [pc, #356]	; (8005d74 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005c14:	f3ef 8311 	mrs	r3, BASEPRI
 8005c18:	f04f 0120 	mov.w	r1, #32
 8005c1c:	f381 8811 	msr	BASEPRI, r1
 8005c20:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005c22:	4b54      	ldr	r3, [pc, #336]	; (8005d74 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	220a      	movs	r2, #10
 8005c28:	4953      	ldr	r1, [pc, #332]	; (8005d78 <SEGGER_SYSVIEW_Start+0x170>)
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fa fae0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005c36:	f7fe fbfd 	bl	8004434 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005c3a:	200a      	movs	r0, #10
 8005c3c:	f7ff fe9e 	bl	800597c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c40:	f3ef 8311 	mrs	r3, BASEPRI
 8005c44:	f04f 0120 	mov.w	r1, #32
 8005c48:	f381 8811 	msr	BASEPRI, r1
 8005c4c:	60bb      	str	r3, [r7, #8]
 8005c4e:	484b      	ldr	r0, [pc, #300]	; (8005d7c <SEGGER_SYSVIEW_Start+0x174>)
 8005c50:	f7ff f820 	bl	8004c94 <_PreparePacket>
 8005c54:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c5e:	4b45      	ldr	r3, [pc, #276]	; (8005d74 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c64:	e00b      	b.n	8005c7e <SEGGER_SYSVIEW_Start+0x76>
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	1c59      	adds	r1, r3, #1
 8005c6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	09db      	lsrs	r3, r3, #7
 8005c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	2b7f      	cmp	r3, #127	; 0x7f
 8005c82:	d8f0      	bhi.n	8005c66 <SEGGER_SYSVIEW_Start+0x5e>
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c92:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
 8005c98:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	623b      	str	r3, [r7, #32]
 8005c9e:	e00b      	b.n	8005cb8 <SEGGER_SYSVIEW_Start+0xb0>
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	1c59      	adds	r1, r3, #1
 8005ca8:	6279      	str	r1, [r7, #36]	; 0x24
 8005caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	09db      	lsrs	r3, r3, #7
 8005cb6:	623b      	str	r3, [r7, #32]
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	2b7f      	cmp	r3, #127	; 0x7f
 8005cbc:	d8f0      	bhi.n	8005ca0 <SEGGER_SYSVIEW_Start+0x98>
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	627a      	str	r2, [r7, #36]	; 0x24
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	4b28      	ldr	r3, [pc, #160]	; (8005d74 <SEGGER_SYSVIEW_Start+0x16c>)
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	e00b      	b.n	8005cf2 <SEGGER_SYSVIEW_Start+0xea>
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	1c59      	adds	r1, r3, #1
 8005ce2:	61f9      	str	r1, [r7, #28]
 8005ce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	09db      	lsrs	r3, r3, #7
 8005cf0:	61bb      	str	r3, [r7, #24]
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cf6:	d8f0      	bhi.n	8005cda <SEGGER_SYSVIEW_Start+0xd2>
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	61fa      	str	r2, [r7, #28]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
 8005d10:	e00b      	b.n	8005d2a <SEGGER_SYSVIEW_Start+0x122>
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	1c59      	adds	r1, r3, #1
 8005d1a:	6179      	str	r1, [r7, #20]
 8005d1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	09db      	lsrs	r3, r3, #7
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d2e:	d8f0      	bhi.n	8005d12 <SEGGER_SYSVIEW_Start+0x10a>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	617a      	str	r2, [r7, #20]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d40:	2218      	movs	r2, #24
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff f893 	bl	8004e70 <_SendPacket>
      RECORD_END();
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d50:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005d58:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005d5e:	f000 f9eb 	bl	8006138 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005d62:	f000 f9b1 	bl	80060c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005d66:	f000 fc2d 	bl	80065c4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005d6a:	bf00      	nop
 8005d6c:	3730      	adds	r7, #48	; 0x30
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20014374 	.word	0x20014374
 8005d78:	08007294 	.word	0x08007294
 8005d7c:	200143a4 	.word	0x200143a4

08005d80 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d86:	f3ef 8311 	mrs	r3, BASEPRI
 8005d8a:	f04f 0120 	mov.w	r1, #32
 8005d8e:	f381 8811 	msr	BASEPRI, r1
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	480b      	ldr	r0, [pc, #44]	; (8005dc4 <SEGGER_SYSVIEW_Stop+0x44>)
 8005d96:	f7fe ff7d 	bl	8004c94 <_PreparePacket>
 8005d9a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005da4:	220b      	movs	r2, #11
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6838      	ldr	r0, [r7, #0]
 8005daa:	f7ff f861 	bl	8004e70 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005dae:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <SEGGER_SYSVIEW_Stop+0x48>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f383 8811 	msr	BASEPRI, r3
}
 8005dba:	bf00      	nop
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	200143a4 	.word	0x200143a4
 8005dc8:	20014374 	.word	0x20014374

08005dcc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08c      	sub	sp, #48	; 0x30
 8005dd0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd6:	f04f 0120 	mov.w	r1, #32
 8005dda:	f381 8811 	msr	BASEPRI, r1
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	4845      	ldr	r0, [pc, #276]	; (8005ef8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005de2:	f7fe ff57 	bl	8004c94 <_PreparePacket>
 8005de6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005df0:	4b42      	ldr	r3, [pc, #264]	; (8005efc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df6:	e00b      	b.n	8005e10 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	1c59      	adds	r1, r3, #1
 8005e00:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	09db      	lsrs	r3, r3, #7
 8005e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	2b7f      	cmp	r3, #127	; 0x7f
 8005e14:	d8f0      	bhi.n	8005df8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2a:	4b34      	ldr	r3, [pc, #208]	; (8005efc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	623b      	str	r3, [r7, #32]
 8005e30:	e00b      	b.n	8005e4a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	1c59      	adds	r1, r3, #1
 8005e3a:	6279      	str	r1, [r7, #36]	; 0x24
 8005e3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	701a      	strb	r2, [r3, #0]
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	09db      	lsrs	r3, r3, #7
 8005e48:	623b      	str	r3, [r7, #32]
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e4e:	d8f0      	bhi.n	8005e32 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	627a      	str	r2, [r7, #36]	; 0x24
 8005e56:	6a3a      	ldr	r2, [r7, #32]
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	61fb      	str	r3, [r7, #28]
 8005e64:	4b25      	ldr	r3, [pc, #148]	; (8005efc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	e00b      	b.n	8005e84 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	1c59      	adds	r1, r3, #1
 8005e74:	61f9      	str	r1, [r7, #28]
 8005e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	09db      	lsrs	r3, r3, #7
 8005e82:	61bb      	str	r3, [r7, #24]
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	2b7f      	cmp	r3, #127	; 0x7f
 8005e88:	d8f0      	bhi.n	8005e6c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	61fa      	str	r2, [r7, #28]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	e00b      	b.n	8005ebc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	1c59      	adds	r1, r3, #1
 8005eac:	6179      	str	r1, [r7, #20]
 8005eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	09db      	lsrs	r3, r3, #7
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec0:	d8f0      	bhi.n	8005ea4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	617a      	str	r2, [r7, #20]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ed2:	2218      	movs	r2, #24
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	68b8      	ldr	r0, [r7, #8]
 8005ed8:	f7fe ffca 	bl	8004e70 <_SendPacket>
  RECORD_END();
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ee2:	4b06      	ldr	r3, [pc, #24]	; (8005efc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005eea:	4b04      	ldr	r3, [pc, #16]	; (8005efc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	4798      	blx	r3
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	3730      	adds	r7, #48	; 0x30
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	200143a4 	.word	0x200143a4
 8005efc:	20014374 	.word	0x20014374

08005f00 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b092      	sub	sp, #72	; 0x48
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005f08:	f3ef 8311 	mrs	r3, BASEPRI
 8005f0c:	f04f 0120 	mov.w	r1, #32
 8005f10:	f381 8811 	msr	BASEPRI, r1
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	486a      	ldr	r0, [pc, #424]	; (80060c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005f18:	f7fe febc 	bl	8004c94 <_PreparePacket>
 8005f1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	647b      	str	r3, [r7, #68]	; 0x44
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b66      	ldr	r3, [pc, #408]	; (80060c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	643b      	str	r3, [r7, #64]	; 0x40
 8005f32:	e00b      	b.n	8005f4c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3a:	1c59      	adds	r1, r3, #1
 8005f3c:	6479      	str	r1, [r7, #68]	; 0x44
 8005f3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f48:	09db      	lsrs	r3, r3, #7
 8005f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f50:	d8f0      	bhi.n	8005f34 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	647a      	str	r2, [r7, #68]	; 0x44
 8005f58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f6c:	e00b      	b.n	8005f86 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f74:	1c59      	adds	r1, r3, #1
 8005f76:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	09db      	lsrs	r3, r3, #7
 8005f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f88:	2b7f      	cmp	r3, #127	; 0x7f
 8005f8a:	d8f0      	bhi.n	8005f6e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7fe fe45 	bl	8004c34 <_EncodeStr>
 8005faa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005fac:	2209      	movs	r2, #9
 8005fae:	68f9      	ldr	r1, [r7, #12]
 8005fb0:	6938      	ldr	r0, [r7, #16]
 8005fb2:	f7fe ff5d 	bl	8004e70 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4b40      	ldr	r3, [pc, #256]	; (80060c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8005fca:	e00b      	b.n	8005fe4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd2:	1c59      	adds	r1, r3, #1
 8005fd4:	6379      	str	r1, [r7, #52]	; 0x34
 8005fd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	09db      	lsrs	r3, r3, #7
 8005fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe8:	d8f0      	bhi.n	8005fcc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	637a      	str	r2, [r7, #52]	; 0x34
 8005ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
 8006004:	e00b      	b.n	800601e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	b2da      	uxtb	r2, r3
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	1c59      	adds	r1, r3, #1
 800600e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006010:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	09db      	lsrs	r3, r3, #7
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	2b7f      	cmp	r3, #127	; 0x7f
 8006022:	d8f0      	bhi.n	8006006 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	62fa      	str	r2, [r7, #44]	; 0x2c
 800602a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	701a      	strb	r2, [r3, #0]
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	623b      	str	r3, [r7, #32]
 800603e:	e00b      	b.n	8006058 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	b2da      	uxtb	r2, r3
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	1c59      	adds	r1, r3, #1
 8006048:	6279      	str	r1, [r7, #36]	; 0x24
 800604a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	09db      	lsrs	r3, r3, #7
 8006056:	623b      	str	r3, [r7, #32]
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	2b7f      	cmp	r3, #127	; 0x7f
 800605c:	d8f0      	bhi.n	8006040 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	627a      	str	r2, [r7, #36]	; 0x24
 8006064:	6a3a      	ldr	r2, [r7, #32]
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	2300      	movs	r3, #0
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	e00b      	b.n	8006090 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	b2da      	uxtb	r2, r3
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	1c59      	adds	r1, r3, #1
 8006080:	61f9      	str	r1, [r7, #28]
 8006082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	09db      	lsrs	r3, r3, #7
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2b7f      	cmp	r3, #127	; 0x7f
 8006094:	d8f0      	bhi.n	8006078 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	61fa      	str	r2, [r7, #28]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80060a6:	2215      	movs	r2, #21
 80060a8:	68f9      	ldr	r1, [r7, #12]
 80060aa:	6938      	ldr	r0, [r7, #16]
 80060ac:	f7fe fee0 	bl	8004e70 <_SendPacket>
  RECORD_END();
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f383 8811 	msr	BASEPRI, r3
}
 80060b6:	bf00      	nop
 80060b8:	3748      	adds	r7, #72	; 0x48
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	200143a4 	.word	0x200143a4
 80060c4:	20014374 	.word	0x20014374

080060c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80060cc:	4b07      	ldr	r3, [pc, #28]	; (80060ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80060de:	4b03      	ldr	r3, [pc, #12]	; (80060ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	4798      	blx	r3
  }
}
 80060e6:	bf00      	nop
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20014374 	.word	0x20014374

080060f0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060f8:	f3ef 8311 	mrs	r3, BASEPRI
 80060fc:	f04f 0120 	mov.w	r1, #32
 8006100:	f381 8811 	msr	BASEPRI, r1
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	480b      	ldr	r0, [pc, #44]	; (8006134 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006108:	f7fe fdc4 	bl	8004c94 <_PreparePacket>
 800610c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800610e:	2280      	movs	r2, #128	; 0x80
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	6938      	ldr	r0, [r7, #16]
 8006114:	f7fe fd8e 	bl	8004c34 <_EncodeStr>
 8006118:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800611a:	220e      	movs	r2, #14
 800611c:	68f9      	ldr	r1, [r7, #12]
 800611e:	6938      	ldr	r0, [r7, #16]
 8006120:	f7fe fea6 	bl	8004e70 <_SendPacket>
  RECORD_END();
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f383 8811 	msr	BASEPRI, r3
}
 800612a:	bf00      	nop
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	200143a4 	.word	0x200143a4

08006138 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006138:	b590      	push	{r4, r7, lr}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800613e:	4b15      	ldr	r3, [pc, #84]	; (8006194 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01a      	beq.n	800617c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006146:	4b13      	ldr	r3, [pc, #76]	; (8006194 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d015      	beq.n	800617c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006150:	4b10      	ldr	r3, [pc, #64]	; (8006194 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4798      	blx	r3
 8006158:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800615c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800615e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	000a      	movs	r2, r1
 800616c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800616e:	4613      	mov	r3, r2
 8006170:	461a      	mov	r2, r3
 8006172:	4621      	mov	r1, r4
 8006174:	200d      	movs	r0, #13
 8006176:	f7ff fc5b 	bl	8005a30 <SEGGER_SYSVIEW_RecordU32x2>
 800617a:	e006      	b.n	800618a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800617c:	4b06      	ldr	r3, [pc, #24]	; (8006198 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4619      	mov	r1, r3
 8006182:	200c      	movs	r0, #12
 8006184:	f7ff fc18 	bl	80059b8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	bd90      	pop	{r4, r7, pc}
 8006192:	bf00      	nop
 8006194:	20014374 	.word	0x20014374
 8006198:	e0001004 	.word	0xe0001004

0800619c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061a2:	f3ef 8311 	mrs	r3, BASEPRI
 80061a6:	f04f 0120 	mov.w	r1, #32
 80061aa:	f381 8811 	msr	BASEPRI, r1
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	4819      	ldr	r0, [pc, #100]	; (8006218 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80061b2:	f7fe fd6f 	bl	8004c94 <_PreparePacket>
 80061b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80061bc:	4b17      	ldr	r3, [pc, #92]	; (800621c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	e00b      	b.n	80061e8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	1c59      	adds	r1, r3, #1
 80061d8:	6179      	str	r1, [r7, #20]
 80061da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	09db      	lsrs	r3, r3, #7
 80061e6:	613b      	str	r3, [r7, #16]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	2b7f      	cmp	r3, #127	; 0x7f
 80061ec:	d8f0      	bhi.n	80061d0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	617a      	str	r2, [r7, #20]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80061fe:	2202      	movs	r2, #2
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	68b8      	ldr	r0, [r7, #8]
 8006204:	f7fe fe34 	bl	8004e70 <_SendPacket>
  RECORD_END();
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f383 8811 	msr	BASEPRI, r3
}
 800620e:	bf00      	nop
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	200143a4 	.word	0x200143a4
 800621c:	e000ed04 	.word	0xe000ed04

08006220 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006226:	f3ef 8311 	mrs	r3, BASEPRI
 800622a:	f04f 0120 	mov.w	r1, #32
 800622e:	f381 8811 	msr	BASEPRI, r1
 8006232:	607b      	str	r3, [r7, #4]
 8006234:	4807      	ldr	r0, [pc, #28]	; (8006254 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006236:	f7fe fd2d 	bl	8004c94 <_PreparePacket>
 800623a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800623c:	2203      	movs	r2, #3
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6838      	ldr	r0, [r7, #0]
 8006242:	f7fe fe15 	bl	8004e70 <_SendPacket>
  RECORD_END();
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f383 8811 	msr	BASEPRI, r3
}
 800624c:	bf00      	nop
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	200143a4 	.word	0x200143a4

08006258 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800625e:	f3ef 8311 	mrs	r3, BASEPRI
 8006262:	f04f 0120 	mov.w	r1, #32
 8006266:	f381 8811 	msr	BASEPRI, r1
 800626a:	607b      	str	r3, [r7, #4]
 800626c:	4807      	ldr	r0, [pc, #28]	; (800628c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800626e:	f7fe fd11 	bl	8004c94 <_PreparePacket>
 8006272:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006274:	2212      	movs	r2, #18
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6838      	ldr	r0, [r7, #0]
 800627a:	f7fe fdf9 	bl	8004e70 <_SendPacket>
  RECORD_END();
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f383 8811 	msr	BASEPRI, r3
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	200143a4 	.word	0x200143a4

08006290 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006296:	f3ef 8311 	mrs	r3, BASEPRI
 800629a:	f04f 0120 	mov.w	r1, #32
 800629e:	f381 8811 	msr	BASEPRI, r1
 80062a2:	607b      	str	r3, [r7, #4]
 80062a4:	4807      	ldr	r0, [pc, #28]	; (80062c4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80062a6:	f7fe fcf5 	bl	8004c94 <_PreparePacket>
 80062aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80062ac:	2211      	movs	r2, #17
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6838      	ldr	r0, [r7, #0]
 80062b2:	f7fe fddd 	bl	8004e70 <_SendPacket>
  RECORD_END();
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f383 8811 	msr	BASEPRI, r3
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	200143a4 	.word	0x200143a4

080062c8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062d0:	f3ef 8311 	mrs	r3, BASEPRI
 80062d4:	f04f 0120 	mov.w	r1, #32
 80062d8:	f381 8811 	msr	BASEPRI, r1
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	4819      	ldr	r0, [pc, #100]	; (8006344 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80062e0:	f7fe fcd8 	bl	8004c94 <_PreparePacket>
 80062e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062ea:	4b17      	ldr	r3, [pc, #92]	; (8006348 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	e00b      	b.n	8006316 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	b2da      	uxtb	r2, r3
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	1c59      	adds	r1, r3, #1
 8006306:	61f9      	str	r1, [r7, #28]
 8006308:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	09db      	lsrs	r3, r3, #7
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	2b7f      	cmp	r3, #127	; 0x7f
 800631a:	d8f0      	bhi.n	80062fe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	61fa      	str	r2, [r7, #28]
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800632c:	2208      	movs	r2, #8
 800632e:	68f9      	ldr	r1, [r7, #12]
 8006330:	6938      	ldr	r0, [r7, #16]
 8006332:	f7fe fd9d 	bl	8004e70 <_SendPacket>
  RECORD_END();
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f383 8811 	msr	BASEPRI, r3
}
 800633c:	bf00      	nop
 800633e:	3720      	adds	r7, #32
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	200143a4 	.word	0x200143a4
 8006348:	20014374 	.word	0x20014374

0800634c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006354:	f3ef 8311 	mrs	r3, BASEPRI
 8006358:	f04f 0120 	mov.w	r1, #32
 800635c:	f381 8811 	msr	BASEPRI, r1
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	4819      	ldr	r0, [pc, #100]	; (80063c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006364:	f7fe fc96 	bl	8004c94 <_PreparePacket>
 8006368:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800636e:	4b17      	ldr	r3, [pc, #92]	; (80063cc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	61fb      	str	r3, [r7, #28]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	e00b      	b.n	800639a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	b2da      	uxtb	r2, r3
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	1c59      	adds	r1, r3, #1
 800638a:	61f9      	str	r1, [r7, #28]
 800638c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	09db      	lsrs	r3, r3, #7
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b7f      	cmp	r3, #127	; 0x7f
 800639e:	d8f0      	bhi.n	8006382 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	61fa      	str	r2, [r7, #28]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80063b0:	2204      	movs	r2, #4
 80063b2:	68f9      	ldr	r1, [r7, #12]
 80063b4:	6938      	ldr	r0, [r7, #16]
 80063b6:	f7fe fd5b 	bl	8004e70 <_SendPacket>
  RECORD_END();
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f383 8811 	msr	BASEPRI, r3
}
 80063c0:	bf00      	nop
 80063c2:	3720      	adds	r7, #32
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	200143a4 	.word	0x200143a4
 80063cc:	20014374 	.word	0x20014374

080063d0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063d8:	f3ef 8311 	mrs	r3, BASEPRI
 80063dc:	f04f 0120 	mov.w	r1, #32
 80063e0:	f381 8811 	msr	BASEPRI, r1
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	4819      	ldr	r0, [pc, #100]	; (800644c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80063e8:	f7fe fc54 	bl	8004c94 <_PreparePacket>
 80063ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063f2:	4b17      	ldr	r3, [pc, #92]	; (8006450 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	e00b      	b.n	800641e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	b2da      	uxtb	r2, r3
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	1c59      	adds	r1, r3, #1
 800640e:	61f9      	str	r1, [r7, #28]
 8006410:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	09db      	lsrs	r3, r3, #7
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	2b7f      	cmp	r3, #127	; 0x7f
 8006422:	d8f0      	bhi.n	8006406 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	61fa      	str	r2, [r7, #28]
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006434:	2206      	movs	r2, #6
 8006436:	68f9      	ldr	r1, [r7, #12]
 8006438:	6938      	ldr	r0, [r7, #16]
 800643a:	f7fe fd19 	bl	8004e70 <_SendPacket>
  RECORD_END();
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f383 8811 	msr	BASEPRI, r3
}
 8006444:	bf00      	nop
 8006446:	3720      	adds	r7, #32
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	200143a4 	.word	0x200143a4
 8006450:	20014374 	.word	0x20014374

08006454 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800645c:	4b04      	ldr	r3, [pc, #16]	; (8006470 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	1ad3      	subs	r3, r2, r3
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	20014374 	.word	0x20014374

08006474 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006474:	b580      	push	{r7, lr}
 8006476:	b08c      	sub	sp, #48	; 0x30
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800647e:	4b40      	ldr	r3, [pc, #256]	; (8006580 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d077      	beq.n	8006576 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006486:	4b3e      	ldr	r3, [pc, #248]	; (8006580 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800648c:	2300      	movs	r3, #0
 800648e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006490:	e008      	b.n	80064a4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	3301      	adds	r3, #1
 80064a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d3f2      	bcc.n	8006492 <SEGGER_SYSVIEW_SendModule+0x1e>
 80064ac:	e000      	b.n	80064b0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80064ae:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d055      	beq.n	8006562 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064b6:	f3ef 8311 	mrs	r3, BASEPRI
 80064ba:	f04f 0120 	mov.w	r1, #32
 80064be:	f381 8811 	msr	BASEPRI, r1
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	482f      	ldr	r0, [pc, #188]	; (8006584 <SEGGER_SYSVIEW_SendModule+0x110>)
 80064c6:	f7fe fbe5 	bl	8004c94 <_PreparePacket>
 80064ca:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
 80064d4:	79fb      	ldrb	r3, [r7, #7]
 80064d6:	623b      	str	r3, [r7, #32]
 80064d8:	e00b      	b.n	80064f2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	1c59      	adds	r1, r3, #1
 80064e2:	6279      	str	r1, [r7, #36]	; 0x24
 80064e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	09db      	lsrs	r3, r3, #7
 80064f0:	623b      	str	r3, [r7, #32]
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	2b7f      	cmp	r3, #127	; 0x7f
 80064f6:	d8f0      	bhi.n	80064da <SEGGER_SYSVIEW_SendModule+0x66>
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	627a      	str	r2, [r7, #36]	; 0x24
 80064fe:	6a3a      	ldr	r2, [r7, #32]
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	e00b      	b.n	800652c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	b2da      	uxtb	r2, r3
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	1c59      	adds	r1, r3, #1
 800651c:	61f9      	str	r1, [r7, #28]
 800651e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	09db      	lsrs	r3, r3, #7
 800652a:	61bb      	str	r3, [r7, #24]
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2b7f      	cmp	r3, #127	; 0x7f
 8006530:	d8f0      	bhi.n	8006514 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	61fa      	str	r2, [r7, #28]
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2280      	movs	r2, #128	; 0x80
 8006548:	4619      	mov	r1, r3
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f7fe fb72 	bl	8004c34 <_EncodeStr>
 8006550:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006552:	2216      	movs	r2, #22
 8006554:	68f9      	ldr	r1, [r7, #12]
 8006556:	6938      	ldr	r0, [r7, #16]
 8006558:	f7fe fc8a 	bl	8004e70 <_SendPacket>
      RECORD_END();
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d006      	beq.n	8006576 <SEGGER_SYSVIEW_SendModule+0x102>
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	4798      	blx	r3
    }
  }
}
 8006576:	bf00      	nop
 8006578:	3730      	adds	r7, #48	; 0x30
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	2001439c 	.word	0x2001439c
 8006584:	200143a4 	.word	0x200143a4

08006588 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800658e:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00f      	beq.n	80065b6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006596:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f2      	bne.n	800659c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	2001439c 	.word	0x2001439c

080065c4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80065ca:	f3ef 8311 	mrs	r3, BASEPRI
 80065ce:	f04f 0120 	mov.w	r1, #32
 80065d2:	f381 8811 	msr	BASEPRI, r1
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	4817      	ldr	r0, [pc, #92]	; (8006638 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80065da:	f7fe fb5b 	bl	8004c94 <_PreparePacket>
 80065de:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	4b14      	ldr	r3, [pc, #80]	; (800663c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	e00b      	b.n	8006608 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	1c59      	adds	r1, r3, #1
 80065f8:	6179      	str	r1, [r7, #20]
 80065fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	09db      	lsrs	r3, r3, #7
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2b7f      	cmp	r3, #127	; 0x7f
 800660c:	d8f0      	bhi.n	80065f0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	617a      	str	r2, [r7, #20]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800661e:	221b      	movs	r2, #27
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	68b8      	ldr	r0, [r7, #8]
 8006624:	f7fe fc24 	bl	8004e70 <_SendPacket>
  RECORD_END();
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f383 8811 	msr	BASEPRI, r3
}
 800662e:	bf00      	nop
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	200143a4 	.word	0x200143a4
 800663c:	200143a0 	.word	0x200143a0

08006640 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006640:	b40f      	push	{r0, r1, r2, r3}
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006648:	f107 0314 	add.w	r3, r7, #20
 800664c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800664e:	1d3b      	adds	r3, r7, #4
 8006650:	461a      	mov	r2, r3
 8006652:	2100      	movs	r1, #0
 8006654:	6938      	ldr	r0, [r7, #16]
 8006656:	f7fe ff1d 	bl	8005494 <_VPrintTarget>
  va_end(ParamList);
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006664:	b004      	add	sp, #16
 8006666:	4770      	bx	lr

08006668 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006670:	f3ef 8311 	mrs	r3, BASEPRI
 8006674:	f04f 0120 	mov.w	r1, #32
 8006678:	f381 8811 	msr	BASEPRI, r1
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	4827      	ldr	r0, [pc, #156]	; (800671c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006680:	f7fe fb08 	bl	8004c94 <_PreparePacket>
 8006684:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006686:	2280      	movs	r2, #128	; 0x80
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	6938      	ldr	r0, [r7, #16]
 800668c:	f7fe fad2 	bl	8004c34 <_EncodeStr>
 8006690:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
 8006696:	2301      	movs	r3, #1
 8006698:	623b      	str	r3, [r7, #32]
 800669a:	e00b      	b.n	80066b4 <SEGGER_SYSVIEW_Warn+0x4c>
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	1c59      	adds	r1, r3, #1
 80066a4:	6279      	str	r1, [r7, #36]	; 0x24
 80066a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	09db      	lsrs	r3, r3, #7
 80066b2:	623b      	str	r3, [r7, #32]
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	2b7f      	cmp	r3, #127	; 0x7f
 80066b8:	d8f0      	bhi.n	800669c <SEGGER_SYSVIEW_Warn+0x34>
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	627a      	str	r2, [r7, #36]	; 0x24
 80066c0:	6a3a      	ldr	r2, [r7, #32]
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	2300      	movs	r3, #0
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	e00b      	b.n	80066ec <SEGGER_SYSVIEW_Warn+0x84>
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	1c59      	adds	r1, r3, #1
 80066dc:	61f9      	str	r1, [r7, #28]
 80066de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	09db      	lsrs	r3, r3, #7
 80066ea:	61bb      	str	r3, [r7, #24]
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	2b7f      	cmp	r3, #127	; 0x7f
 80066f0:	d8f0      	bhi.n	80066d4 <SEGGER_SYSVIEW_Warn+0x6c>
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	61fa      	str	r2, [r7, #28]
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006702:	221a      	movs	r2, #26
 8006704:	68f9      	ldr	r1, [r7, #12]
 8006706:	6938      	ldr	r0, [r7, #16]
 8006708:	f7fe fbb2 	bl	8004e70 <_SendPacket>
  RECORD_END();
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f383 8811 	msr	BASEPRI, r3
}
 8006712:	bf00      	nop
 8006714:	3728      	adds	r7, #40	; 0x28
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	200143a4 	.word	0x200143a4

08006720 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006724:	4b13      	ldr	r3, [pc, #76]	; (8006774 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006726:	7e1b      	ldrb	r3, [r3, #24]
 8006728:	4619      	mov	r1, r3
 800672a:	4a13      	ldr	r2, [pc, #76]	; (8006778 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800672c:	460b      	mov	r3, r1
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	440b      	add	r3, r1
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	4413      	add	r3, r2
 8006736:	336c      	adds	r3, #108	; 0x6c
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b0e      	ldr	r3, [pc, #56]	; (8006774 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800673c:	7e1b      	ldrb	r3, [r3, #24]
 800673e:	4618      	mov	r0, r3
 8006740:	490d      	ldr	r1, [pc, #52]	; (8006778 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006742:	4603      	mov	r3, r0
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	4403      	add	r3, r0
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	440b      	add	r3, r1
 800674c:	3370      	adds	r3, #112	; 0x70
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	d00b      	beq.n	800676c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006754:	4b07      	ldr	r3, [pc, #28]	; (8006774 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006756:	789b      	ldrb	r3, [r3, #2]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d107      	bne.n	800676c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800675c:	4b05      	ldr	r3, [pc, #20]	; (8006774 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800675e:	2201      	movs	r2, #1
 8006760:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006762:	f7fe faa3 	bl	8004cac <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006766:	4b03      	ldr	r3, [pc, #12]	; (8006774 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006768:	2200      	movs	r2, #0
 800676a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800676c:	4b01      	ldr	r3, [pc, #4]	; (8006774 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800676e:	781b      	ldrb	r3, [r3, #0]
}
 8006770:	4618      	mov	r0, r3
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20014374 	.word	0x20014374
 8006778:	20012eb4 	.word	0x20012eb4

0800677c <sniprintf>:
 800677c:	b40c      	push	{r2, r3}
 800677e:	b530      	push	{r4, r5, lr}
 8006780:	4b17      	ldr	r3, [pc, #92]	; (80067e0 <sniprintf+0x64>)
 8006782:	1e0c      	subs	r4, r1, #0
 8006784:	681d      	ldr	r5, [r3, #0]
 8006786:	b09d      	sub	sp, #116	; 0x74
 8006788:	da08      	bge.n	800679c <sniprintf+0x20>
 800678a:	238b      	movs	r3, #139	; 0x8b
 800678c:	602b      	str	r3, [r5, #0]
 800678e:	f04f 30ff 	mov.w	r0, #4294967295
 8006792:	b01d      	add	sp, #116	; 0x74
 8006794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006798:	b002      	add	sp, #8
 800679a:	4770      	bx	lr
 800679c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80067a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80067a4:	bf14      	ite	ne
 80067a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80067aa:	4623      	moveq	r3, r4
 80067ac:	9304      	str	r3, [sp, #16]
 80067ae:	9307      	str	r3, [sp, #28]
 80067b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067b4:	9002      	str	r0, [sp, #8]
 80067b6:	9006      	str	r0, [sp, #24]
 80067b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80067bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067be:	ab21      	add	r3, sp, #132	; 0x84
 80067c0:	a902      	add	r1, sp, #8
 80067c2:	4628      	mov	r0, r5
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	f000 f9b1 	bl	8006b2c <_svfiprintf_r>
 80067ca:	1c43      	adds	r3, r0, #1
 80067cc:	bfbc      	itt	lt
 80067ce:	238b      	movlt	r3, #139	; 0x8b
 80067d0:	602b      	strlt	r3, [r5, #0]
 80067d2:	2c00      	cmp	r4, #0
 80067d4:	d0dd      	beq.n	8006792 <sniprintf+0x16>
 80067d6:	9b02      	ldr	r3, [sp, #8]
 80067d8:	2200      	movs	r2, #0
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e7d9      	b.n	8006792 <sniprintf+0x16>
 80067de:	bf00      	nop
 80067e0:	20000068 	.word	0x20000068

080067e4 <memcmp>:
 80067e4:	b510      	push	{r4, lr}
 80067e6:	3901      	subs	r1, #1
 80067e8:	4402      	add	r2, r0
 80067ea:	4290      	cmp	r0, r2
 80067ec:	d101      	bne.n	80067f2 <memcmp+0xe>
 80067ee:	2000      	movs	r0, #0
 80067f0:	e005      	b.n	80067fe <memcmp+0x1a>
 80067f2:	7803      	ldrb	r3, [r0, #0]
 80067f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80067f8:	42a3      	cmp	r3, r4
 80067fa:	d001      	beq.n	8006800 <memcmp+0x1c>
 80067fc:	1b18      	subs	r0, r3, r4
 80067fe:	bd10      	pop	{r4, pc}
 8006800:	3001      	adds	r0, #1
 8006802:	e7f2      	b.n	80067ea <memcmp+0x6>

08006804 <memset>:
 8006804:	4402      	add	r2, r0
 8006806:	4603      	mov	r3, r0
 8006808:	4293      	cmp	r3, r2
 800680a:	d100      	bne.n	800680e <memset+0xa>
 800680c:	4770      	bx	lr
 800680e:	f803 1b01 	strb.w	r1, [r3], #1
 8006812:	e7f9      	b.n	8006808 <memset+0x4>

08006814 <__errno>:
 8006814:	4b01      	ldr	r3, [pc, #4]	; (800681c <__errno+0x8>)
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20000068 	.word	0x20000068

08006820 <__libc_init_array>:
 8006820:	b570      	push	{r4, r5, r6, lr}
 8006822:	4d0d      	ldr	r5, [pc, #52]	; (8006858 <__libc_init_array+0x38>)
 8006824:	4c0d      	ldr	r4, [pc, #52]	; (800685c <__libc_init_array+0x3c>)
 8006826:	1b64      	subs	r4, r4, r5
 8006828:	10a4      	asrs	r4, r4, #2
 800682a:	2600      	movs	r6, #0
 800682c:	42a6      	cmp	r6, r4
 800682e:	d109      	bne.n	8006844 <__libc_init_array+0x24>
 8006830:	4d0b      	ldr	r5, [pc, #44]	; (8006860 <__libc_init_array+0x40>)
 8006832:	4c0c      	ldr	r4, [pc, #48]	; (8006864 <__libc_init_array+0x44>)
 8006834:	f000 fc6a 	bl	800710c <_init>
 8006838:	1b64      	subs	r4, r4, r5
 800683a:	10a4      	asrs	r4, r4, #2
 800683c:	2600      	movs	r6, #0
 800683e:	42a6      	cmp	r6, r4
 8006840:	d105      	bne.n	800684e <__libc_init_array+0x2e>
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	f855 3b04 	ldr.w	r3, [r5], #4
 8006848:	4798      	blx	r3
 800684a:	3601      	adds	r6, #1
 800684c:	e7ee      	b.n	800682c <__libc_init_array+0xc>
 800684e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006852:	4798      	blx	r3
 8006854:	3601      	adds	r6, #1
 8006856:	e7f2      	b.n	800683e <__libc_init_array+0x1e>
 8006858:	080072ec 	.word	0x080072ec
 800685c:	080072ec 	.word	0x080072ec
 8006860:	080072ec 	.word	0x080072ec
 8006864:	080072f0 	.word	0x080072f0

08006868 <__retarget_lock_acquire_recursive>:
 8006868:	4770      	bx	lr

0800686a <__retarget_lock_release_recursive>:
 800686a:	4770      	bx	lr

0800686c <memcpy>:
 800686c:	440a      	add	r2, r1
 800686e:	4291      	cmp	r1, r2
 8006870:	f100 33ff 	add.w	r3, r0, #4294967295
 8006874:	d100      	bne.n	8006878 <memcpy+0xc>
 8006876:	4770      	bx	lr
 8006878:	b510      	push	{r4, lr}
 800687a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800687e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006882:	4291      	cmp	r1, r2
 8006884:	d1f9      	bne.n	800687a <memcpy+0xe>
 8006886:	bd10      	pop	{r4, pc}

08006888 <_free_r>:
 8006888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800688a:	2900      	cmp	r1, #0
 800688c:	d044      	beq.n	8006918 <_free_r+0x90>
 800688e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006892:	9001      	str	r0, [sp, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f1a1 0404 	sub.w	r4, r1, #4
 800689a:	bfb8      	it	lt
 800689c:	18e4      	addlt	r4, r4, r3
 800689e:	f000 f8df 	bl	8006a60 <__malloc_lock>
 80068a2:	4a1e      	ldr	r2, [pc, #120]	; (800691c <_free_r+0x94>)
 80068a4:	9801      	ldr	r0, [sp, #4]
 80068a6:	6813      	ldr	r3, [r2, #0]
 80068a8:	b933      	cbnz	r3, 80068b8 <_free_r+0x30>
 80068aa:	6063      	str	r3, [r4, #4]
 80068ac:	6014      	str	r4, [r2, #0]
 80068ae:	b003      	add	sp, #12
 80068b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068b4:	f000 b8da 	b.w	8006a6c <__malloc_unlock>
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	d908      	bls.n	80068ce <_free_r+0x46>
 80068bc:	6825      	ldr	r5, [r4, #0]
 80068be:	1961      	adds	r1, r4, r5
 80068c0:	428b      	cmp	r3, r1
 80068c2:	bf01      	itttt	eq
 80068c4:	6819      	ldreq	r1, [r3, #0]
 80068c6:	685b      	ldreq	r3, [r3, #4]
 80068c8:	1949      	addeq	r1, r1, r5
 80068ca:	6021      	streq	r1, [r4, #0]
 80068cc:	e7ed      	b.n	80068aa <_free_r+0x22>
 80068ce:	461a      	mov	r2, r3
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	b10b      	cbz	r3, 80068d8 <_free_r+0x50>
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	d9fa      	bls.n	80068ce <_free_r+0x46>
 80068d8:	6811      	ldr	r1, [r2, #0]
 80068da:	1855      	adds	r5, r2, r1
 80068dc:	42a5      	cmp	r5, r4
 80068de:	d10b      	bne.n	80068f8 <_free_r+0x70>
 80068e0:	6824      	ldr	r4, [r4, #0]
 80068e2:	4421      	add	r1, r4
 80068e4:	1854      	adds	r4, r2, r1
 80068e6:	42a3      	cmp	r3, r4
 80068e8:	6011      	str	r1, [r2, #0]
 80068ea:	d1e0      	bne.n	80068ae <_free_r+0x26>
 80068ec:	681c      	ldr	r4, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	6053      	str	r3, [r2, #4]
 80068f2:	440c      	add	r4, r1
 80068f4:	6014      	str	r4, [r2, #0]
 80068f6:	e7da      	b.n	80068ae <_free_r+0x26>
 80068f8:	d902      	bls.n	8006900 <_free_r+0x78>
 80068fa:	230c      	movs	r3, #12
 80068fc:	6003      	str	r3, [r0, #0]
 80068fe:	e7d6      	b.n	80068ae <_free_r+0x26>
 8006900:	6825      	ldr	r5, [r4, #0]
 8006902:	1961      	adds	r1, r4, r5
 8006904:	428b      	cmp	r3, r1
 8006906:	bf04      	itt	eq
 8006908:	6819      	ldreq	r1, [r3, #0]
 800690a:	685b      	ldreq	r3, [r3, #4]
 800690c:	6063      	str	r3, [r4, #4]
 800690e:	bf04      	itt	eq
 8006910:	1949      	addeq	r1, r1, r5
 8006912:	6021      	streq	r1, [r4, #0]
 8006914:	6054      	str	r4, [r2, #4]
 8006916:	e7ca      	b.n	80068ae <_free_r+0x26>
 8006918:	b003      	add	sp, #12
 800691a:	bd30      	pop	{r4, r5, pc}
 800691c:	200145c8 	.word	0x200145c8

08006920 <sbrk_aligned>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	4e0e      	ldr	r6, [pc, #56]	; (800695c <sbrk_aligned+0x3c>)
 8006924:	460c      	mov	r4, r1
 8006926:	6831      	ldr	r1, [r6, #0]
 8006928:	4605      	mov	r5, r0
 800692a:	b911      	cbnz	r1, 8006932 <sbrk_aligned+0x12>
 800692c:	f000 fba6 	bl	800707c <_sbrk_r>
 8006930:	6030      	str	r0, [r6, #0]
 8006932:	4621      	mov	r1, r4
 8006934:	4628      	mov	r0, r5
 8006936:	f000 fba1 	bl	800707c <_sbrk_r>
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	d00a      	beq.n	8006954 <sbrk_aligned+0x34>
 800693e:	1cc4      	adds	r4, r0, #3
 8006940:	f024 0403 	bic.w	r4, r4, #3
 8006944:	42a0      	cmp	r0, r4
 8006946:	d007      	beq.n	8006958 <sbrk_aligned+0x38>
 8006948:	1a21      	subs	r1, r4, r0
 800694a:	4628      	mov	r0, r5
 800694c:	f000 fb96 	bl	800707c <_sbrk_r>
 8006950:	3001      	adds	r0, #1
 8006952:	d101      	bne.n	8006958 <sbrk_aligned+0x38>
 8006954:	f04f 34ff 	mov.w	r4, #4294967295
 8006958:	4620      	mov	r0, r4
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	200145cc 	.word	0x200145cc

08006960 <_malloc_r>:
 8006960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006964:	1ccd      	adds	r5, r1, #3
 8006966:	f025 0503 	bic.w	r5, r5, #3
 800696a:	3508      	adds	r5, #8
 800696c:	2d0c      	cmp	r5, #12
 800696e:	bf38      	it	cc
 8006970:	250c      	movcc	r5, #12
 8006972:	2d00      	cmp	r5, #0
 8006974:	4607      	mov	r7, r0
 8006976:	db01      	blt.n	800697c <_malloc_r+0x1c>
 8006978:	42a9      	cmp	r1, r5
 800697a:	d905      	bls.n	8006988 <_malloc_r+0x28>
 800697c:	230c      	movs	r3, #12
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	2600      	movs	r6, #0
 8006982:	4630      	mov	r0, r6
 8006984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006988:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a5c <_malloc_r+0xfc>
 800698c:	f000 f868 	bl	8006a60 <__malloc_lock>
 8006990:	f8d8 3000 	ldr.w	r3, [r8]
 8006994:	461c      	mov	r4, r3
 8006996:	bb5c      	cbnz	r4, 80069f0 <_malloc_r+0x90>
 8006998:	4629      	mov	r1, r5
 800699a:	4638      	mov	r0, r7
 800699c:	f7ff ffc0 	bl	8006920 <sbrk_aligned>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	4604      	mov	r4, r0
 80069a4:	d155      	bne.n	8006a52 <_malloc_r+0xf2>
 80069a6:	f8d8 4000 	ldr.w	r4, [r8]
 80069aa:	4626      	mov	r6, r4
 80069ac:	2e00      	cmp	r6, #0
 80069ae:	d145      	bne.n	8006a3c <_malloc_r+0xdc>
 80069b0:	2c00      	cmp	r4, #0
 80069b2:	d048      	beq.n	8006a46 <_malloc_r+0xe6>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	4631      	mov	r1, r6
 80069b8:	4638      	mov	r0, r7
 80069ba:	eb04 0903 	add.w	r9, r4, r3
 80069be:	f000 fb5d 	bl	800707c <_sbrk_r>
 80069c2:	4581      	cmp	r9, r0
 80069c4:	d13f      	bne.n	8006a46 <_malloc_r+0xe6>
 80069c6:	6821      	ldr	r1, [r4, #0]
 80069c8:	1a6d      	subs	r5, r5, r1
 80069ca:	4629      	mov	r1, r5
 80069cc:	4638      	mov	r0, r7
 80069ce:	f7ff ffa7 	bl	8006920 <sbrk_aligned>
 80069d2:	3001      	adds	r0, #1
 80069d4:	d037      	beq.n	8006a46 <_malloc_r+0xe6>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	442b      	add	r3, r5
 80069da:	6023      	str	r3, [r4, #0]
 80069dc:	f8d8 3000 	ldr.w	r3, [r8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d038      	beq.n	8006a56 <_malloc_r+0xf6>
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	42a2      	cmp	r2, r4
 80069e8:	d12b      	bne.n	8006a42 <_malloc_r+0xe2>
 80069ea:	2200      	movs	r2, #0
 80069ec:	605a      	str	r2, [r3, #4]
 80069ee:	e00f      	b.n	8006a10 <_malloc_r+0xb0>
 80069f0:	6822      	ldr	r2, [r4, #0]
 80069f2:	1b52      	subs	r2, r2, r5
 80069f4:	d41f      	bmi.n	8006a36 <_malloc_r+0xd6>
 80069f6:	2a0b      	cmp	r2, #11
 80069f8:	d917      	bls.n	8006a2a <_malloc_r+0xca>
 80069fa:	1961      	adds	r1, r4, r5
 80069fc:	42a3      	cmp	r3, r4
 80069fe:	6025      	str	r5, [r4, #0]
 8006a00:	bf18      	it	ne
 8006a02:	6059      	strne	r1, [r3, #4]
 8006a04:	6863      	ldr	r3, [r4, #4]
 8006a06:	bf08      	it	eq
 8006a08:	f8c8 1000 	streq.w	r1, [r8]
 8006a0c:	5162      	str	r2, [r4, r5]
 8006a0e:	604b      	str	r3, [r1, #4]
 8006a10:	4638      	mov	r0, r7
 8006a12:	f104 060b 	add.w	r6, r4, #11
 8006a16:	f000 f829 	bl	8006a6c <__malloc_unlock>
 8006a1a:	f026 0607 	bic.w	r6, r6, #7
 8006a1e:	1d23      	adds	r3, r4, #4
 8006a20:	1af2      	subs	r2, r6, r3
 8006a22:	d0ae      	beq.n	8006982 <_malloc_r+0x22>
 8006a24:	1b9b      	subs	r3, r3, r6
 8006a26:	50a3      	str	r3, [r4, r2]
 8006a28:	e7ab      	b.n	8006982 <_malloc_r+0x22>
 8006a2a:	42a3      	cmp	r3, r4
 8006a2c:	6862      	ldr	r2, [r4, #4]
 8006a2e:	d1dd      	bne.n	80069ec <_malloc_r+0x8c>
 8006a30:	f8c8 2000 	str.w	r2, [r8]
 8006a34:	e7ec      	b.n	8006a10 <_malloc_r+0xb0>
 8006a36:	4623      	mov	r3, r4
 8006a38:	6864      	ldr	r4, [r4, #4]
 8006a3a:	e7ac      	b.n	8006996 <_malloc_r+0x36>
 8006a3c:	4634      	mov	r4, r6
 8006a3e:	6876      	ldr	r6, [r6, #4]
 8006a40:	e7b4      	b.n	80069ac <_malloc_r+0x4c>
 8006a42:	4613      	mov	r3, r2
 8006a44:	e7cc      	b.n	80069e0 <_malloc_r+0x80>
 8006a46:	230c      	movs	r3, #12
 8006a48:	603b      	str	r3, [r7, #0]
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	f000 f80e 	bl	8006a6c <__malloc_unlock>
 8006a50:	e797      	b.n	8006982 <_malloc_r+0x22>
 8006a52:	6025      	str	r5, [r4, #0]
 8006a54:	e7dc      	b.n	8006a10 <_malloc_r+0xb0>
 8006a56:	605b      	str	r3, [r3, #4]
 8006a58:	deff      	udf	#255	; 0xff
 8006a5a:	bf00      	nop
 8006a5c:	200145c8 	.word	0x200145c8

08006a60 <__malloc_lock>:
 8006a60:	4801      	ldr	r0, [pc, #4]	; (8006a68 <__malloc_lock+0x8>)
 8006a62:	f7ff bf01 	b.w	8006868 <__retarget_lock_acquire_recursive>
 8006a66:	bf00      	nop
 8006a68:	200145c4 	.word	0x200145c4

08006a6c <__malloc_unlock>:
 8006a6c:	4801      	ldr	r0, [pc, #4]	; (8006a74 <__malloc_unlock+0x8>)
 8006a6e:	f7ff befc 	b.w	800686a <__retarget_lock_release_recursive>
 8006a72:	bf00      	nop
 8006a74:	200145c4 	.word	0x200145c4

08006a78 <__ssputs_r>:
 8006a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a7c:	688e      	ldr	r6, [r1, #8]
 8006a7e:	461f      	mov	r7, r3
 8006a80:	42be      	cmp	r6, r7
 8006a82:	680b      	ldr	r3, [r1, #0]
 8006a84:	4682      	mov	sl, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	4690      	mov	r8, r2
 8006a8a:	d82c      	bhi.n	8006ae6 <__ssputs_r+0x6e>
 8006a8c:	898a      	ldrh	r2, [r1, #12]
 8006a8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a92:	d026      	beq.n	8006ae2 <__ssputs_r+0x6a>
 8006a94:	6965      	ldr	r5, [r4, #20]
 8006a96:	6909      	ldr	r1, [r1, #16]
 8006a98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a9c:	eba3 0901 	sub.w	r9, r3, r1
 8006aa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006aa4:	1c7b      	adds	r3, r7, #1
 8006aa6:	444b      	add	r3, r9
 8006aa8:	106d      	asrs	r5, r5, #1
 8006aaa:	429d      	cmp	r5, r3
 8006aac:	bf38      	it	cc
 8006aae:	461d      	movcc	r5, r3
 8006ab0:	0553      	lsls	r3, r2, #21
 8006ab2:	d527      	bpl.n	8006b04 <__ssputs_r+0x8c>
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	f7ff ff53 	bl	8006960 <_malloc_r>
 8006aba:	4606      	mov	r6, r0
 8006abc:	b360      	cbz	r0, 8006b18 <__ssputs_r+0xa0>
 8006abe:	6921      	ldr	r1, [r4, #16]
 8006ac0:	464a      	mov	r2, r9
 8006ac2:	f7ff fed3 	bl	800686c <memcpy>
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad0:	81a3      	strh	r3, [r4, #12]
 8006ad2:	6126      	str	r6, [r4, #16]
 8006ad4:	6165      	str	r5, [r4, #20]
 8006ad6:	444e      	add	r6, r9
 8006ad8:	eba5 0509 	sub.w	r5, r5, r9
 8006adc:	6026      	str	r6, [r4, #0]
 8006ade:	60a5      	str	r5, [r4, #8]
 8006ae0:	463e      	mov	r6, r7
 8006ae2:	42be      	cmp	r6, r7
 8006ae4:	d900      	bls.n	8006ae8 <__ssputs_r+0x70>
 8006ae6:	463e      	mov	r6, r7
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	4632      	mov	r2, r6
 8006aec:	4641      	mov	r1, r8
 8006aee:	f000 faab 	bl	8007048 <memmove>
 8006af2:	68a3      	ldr	r3, [r4, #8]
 8006af4:	1b9b      	subs	r3, r3, r6
 8006af6:	60a3      	str	r3, [r4, #8]
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	4433      	add	r3, r6
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	2000      	movs	r0, #0
 8006b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b04:	462a      	mov	r2, r5
 8006b06:	f000 fac9 	bl	800709c <_realloc_r>
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d1e0      	bne.n	8006ad2 <__ssputs_r+0x5a>
 8006b10:	6921      	ldr	r1, [r4, #16]
 8006b12:	4650      	mov	r0, sl
 8006b14:	f7ff feb8 	bl	8006888 <_free_r>
 8006b18:	230c      	movs	r3, #12
 8006b1a:	f8ca 3000 	str.w	r3, [sl]
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b24:	81a3      	strh	r3, [r4, #12]
 8006b26:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2a:	e7e9      	b.n	8006b00 <__ssputs_r+0x88>

08006b2c <_svfiprintf_r>:
 8006b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b30:	4698      	mov	r8, r3
 8006b32:	898b      	ldrh	r3, [r1, #12]
 8006b34:	061b      	lsls	r3, r3, #24
 8006b36:	b09d      	sub	sp, #116	; 0x74
 8006b38:	4607      	mov	r7, r0
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	d50e      	bpl.n	8006b5e <_svfiprintf_r+0x32>
 8006b40:	690b      	ldr	r3, [r1, #16]
 8006b42:	b963      	cbnz	r3, 8006b5e <_svfiprintf_r+0x32>
 8006b44:	2140      	movs	r1, #64	; 0x40
 8006b46:	f7ff ff0b 	bl	8006960 <_malloc_r>
 8006b4a:	6028      	str	r0, [r5, #0]
 8006b4c:	6128      	str	r0, [r5, #16]
 8006b4e:	b920      	cbnz	r0, 8006b5a <_svfiprintf_r+0x2e>
 8006b50:	230c      	movs	r3, #12
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	e0d0      	b.n	8006cfc <_svfiprintf_r+0x1d0>
 8006b5a:	2340      	movs	r3, #64	; 0x40
 8006b5c:	616b      	str	r3, [r5, #20]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9309      	str	r3, [sp, #36]	; 0x24
 8006b62:	2320      	movs	r3, #32
 8006b64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b68:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b6c:	2330      	movs	r3, #48	; 0x30
 8006b6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006d14 <_svfiprintf_r+0x1e8>
 8006b72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b76:	f04f 0901 	mov.w	r9, #1
 8006b7a:	4623      	mov	r3, r4
 8006b7c:	469a      	mov	sl, r3
 8006b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b82:	b10a      	cbz	r2, 8006b88 <_svfiprintf_r+0x5c>
 8006b84:	2a25      	cmp	r2, #37	; 0x25
 8006b86:	d1f9      	bne.n	8006b7c <_svfiprintf_r+0x50>
 8006b88:	ebba 0b04 	subs.w	fp, sl, r4
 8006b8c:	d00b      	beq.n	8006ba6 <_svfiprintf_r+0x7a>
 8006b8e:	465b      	mov	r3, fp
 8006b90:	4622      	mov	r2, r4
 8006b92:	4629      	mov	r1, r5
 8006b94:	4638      	mov	r0, r7
 8006b96:	f7ff ff6f 	bl	8006a78 <__ssputs_r>
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	f000 80a9 	beq.w	8006cf2 <_svfiprintf_r+0x1c6>
 8006ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ba2:	445a      	add	r2, fp
 8006ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 80a1 	beq.w	8006cf2 <_svfiprintf_r+0x1c6>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bba:	f10a 0a01 	add.w	sl, sl, #1
 8006bbe:	9304      	str	r3, [sp, #16]
 8006bc0:	9307      	str	r3, [sp, #28]
 8006bc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bc6:	931a      	str	r3, [sp, #104]	; 0x68
 8006bc8:	4654      	mov	r4, sl
 8006bca:	2205      	movs	r2, #5
 8006bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd0:	4850      	ldr	r0, [pc, #320]	; (8006d14 <_svfiprintf_r+0x1e8>)
 8006bd2:	f7f9 fb5d 	bl	8000290 <memchr>
 8006bd6:	9a04      	ldr	r2, [sp, #16]
 8006bd8:	b9d8      	cbnz	r0, 8006c12 <_svfiprintf_r+0xe6>
 8006bda:	06d0      	lsls	r0, r2, #27
 8006bdc:	bf44      	itt	mi
 8006bde:	2320      	movmi	r3, #32
 8006be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006be4:	0711      	lsls	r1, r2, #28
 8006be6:	bf44      	itt	mi
 8006be8:	232b      	movmi	r3, #43	; 0x2b
 8006bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bee:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf4:	d015      	beq.n	8006c22 <_svfiprintf_r+0xf6>
 8006bf6:	9a07      	ldr	r2, [sp, #28]
 8006bf8:	4654      	mov	r4, sl
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	f04f 0c0a 	mov.w	ip, #10
 8006c00:	4621      	mov	r1, r4
 8006c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c06:	3b30      	subs	r3, #48	; 0x30
 8006c08:	2b09      	cmp	r3, #9
 8006c0a:	d94d      	bls.n	8006ca8 <_svfiprintf_r+0x17c>
 8006c0c:	b1b0      	cbz	r0, 8006c3c <_svfiprintf_r+0x110>
 8006c0e:	9207      	str	r2, [sp, #28]
 8006c10:	e014      	b.n	8006c3c <_svfiprintf_r+0x110>
 8006c12:	eba0 0308 	sub.w	r3, r0, r8
 8006c16:	fa09 f303 	lsl.w	r3, r9, r3
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	9304      	str	r3, [sp, #16]
 8006c1e:	46a2      	mov	sl, r4
 8006c20:	e7d2      	b.n	8006bc8 <_svfiprintf_r+0x9c>
 8006c22:	9b03      	ldr	r3, [sp, #12]
 8006c24:	1d19      	adds	r1, r3, #4
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	9103      	str	r1, [sp, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	bfbb      	ittet	lt
 8006c2e:	425b      	neglt	r3, r3
 8006c30:	f042 0202 	orrlt.w	r2, r2, #2
 8006c34:	9307      	strge	r3, [sp, #28]
 8006c36:	9307      	strlt	r3, [sp, #28]
 8006c38:	bfb8      	it	lt
 8006c3a:	9204      	strlt	r2, [sp, #16]
 8006c3c:	7823      	ldrb	r3, [r4, #0]
 8006c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c40:	d10c      	bne.n	8006c5c <_svfiprintf_r+0x130>
 8006c42:	7863      	ldrb	r3, [r4, #1]
 8006c44:	2b2a      	cmp	r3, #42	; 0x2a
 8006c46:	d134      	bne.n	8006cb2 <_svfiprintf_r+0x186>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	1d1a      	adds	r2, r3, #4
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	9203      	str	r2, [sp, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	bfb8      	it	lt
 8006c54:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c58:	3402      	adds	r4, #2
 8006c5a:	9305      	str	r3, [sp, #20]
 8006c5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006d24 <_svfiprintf_r+0x1f8>
 8006c60:	7821      	ldrb	r1, [r4, #0]
 8006c62:	2203      	movs	r2, #3
 8006c64:	4650      	mov	r0, sl
 8006c66:	f7f9 fb13 	bl	8000290 <memchr>
 8006c6a:	b138      	cbz	r0, 8006c7c <_svfiprintf_r+0x150>
 8006c6c:	9b04      	ldr	r3, [sp, #16]
 8006c6e:	eba0 000a 	sub.w	r0, r0, sl
 8006c72:	2240      	movs	r2, #64	; 0x40
 8006c74:	4082      	lsls	r2, r0
 8006c76:	4313      	orrs	r3, r2
 8006c78:	3401      	adds	r4, #1
 8006c7a:	9304      	str	r3, [sp, #16]
 8006c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c80:	4825      	ldr	r0, [pc, #148]	; (8006d18 <_svfiprintf_r+0x1ec>)
 8006c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c86:	2206      	movs	r2, #6
 8006c88:	f7f9 fb02 	bl	8000290 <memchr>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d038      	beq.n	8006d02 <_svfiprintf_r+0x1d6>
 8006c90:	4b22      	ldr	r3, [pc, #136]	; (8006d1c <_svfiprintf_r+0x1f0>)
 8006c92:	bb1b      	cbnz	r3, 8006cdc <_svfiprintf_r+0x1b0>
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	3307      	adds	r3, #7
 8006c98:	f023 0307 	bic.w	r3, r3, #7
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	9303      	str	r3, [sp, #12]
 8006ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca2:	4433      	add	r3, r6
 8006ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca6:	e768      	b.n	8006b7a <_svfiprintf_r+0x4e>
 8006ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cac:	460c      	mov	r4, r1
 8006cae:	2001      	movs	r0, #1
 8006cb0:	e7a6      	b.n	8006c00 <_svfiprintf_r+0xd4>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	3401      	adds	r4, #1
 8006cb6:	9305      	str	r3, [sp, #20]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f04f 0c0a 	mov.w	ip, #10
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cc4:	3a30      	subs	r2, #48	; 0x30
 8006cc6:	2a09      	cmp	r2, #9
 8006cc8:	d903      	bls.n	8006cd2 <_svfiprintf_r+0x1a6>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0c6      	beq.n	8006c5c <_svfiprintf_r+0x130>
 8006cce:	9105      	str	r1, [sp, #20]
 8006cd0:	e7c4      	b.n	8006c5c <_svfiprintf_r+0x130>
 8006cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e7f0      	b.n	8006cbe <_svfiprintf_r+0x192>
 8006cdc:	ab03      	add	r3, sp, #12
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	462a      	mov	r2, r5
 8006ce2:	4b0f      	ldr	r3, [pc, #60]	; (8006d20 <_svfiprintf_r+0x1f4>)
 8006ce4:	a904      	add	r1, sp, #16
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	f3af 8000 	nop.w
 8006cec:	1c42      	adds	r2, r0, #1
 8006cee:	4606      	mov	r6, r0
 8006cf0:	d1d6      	bne.n	8006ca0 <_svfiprintf_r+0x174>
 8006cf2:	89ab      	ldrh	r3, [r5, #12]
 8006cf4:	065b      	lsls	r3, r3, #25
 8006cf6:	f53f af2d 	bmi.w	8006b54 <_svfiprintf_r+0x28>
 8006cfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cfc:	b01d      	add	sp, #116	; 0x74
 8006cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d02:	ab03      	add	r3, sp, #12
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	462a      	mov	r2, r5
 8006d08:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <_svfiprintf_r+0x1f4>)
 8006d0a:	a904      	add	r1, sp, #16
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f000 f879 	bl	8006e04 <_printf_i>
 8006d12:	e7eb      	b.n	8006cec <_svfiprintf_r+0x1c0>
 8006d14:	080072b0 	.word	0x080072b0
 8006d18:	080072ba 	.word	0x080072ba
 8006d1c:	00000000 	.word	0x00000000
 8006d20:	08006a79 	.word	0x08006a79
 8006d24:	080072b6 	.word	0x080072b6

08006d28 <_printf_common>:
 8006d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d2c:	4616      	mov	r6, r2
 8006d2e:	4699      	mov	r9, r3
 8006d30:	688a      	ldr	r2, [r1, #8]
 8006d32:	690b      	ldr	r3, [r1, #16]
 8006d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	bfb8      	it	lt
 8006d3c:	4613      	movlt	r3, r2
 8006d3e:	6033      	str	r3, [r6, #0]
 8006d40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d44:	4607      	mov	r7, r0
 8006d46:	460c      	mov	r4, r1
 8006d48:	b10a      	cbz	r2, 8006d4e <_printf_common+0x26>
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	6033      	str	r3, [r6, #0]
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	0699      	lsls	r1, r3, #26
 8006d52:	bf42      	ittt	mi
 8006d54:	6833      	ldrmi	r3, [r6, #0]
 8006d56:	3302      	addmi	r3, #2
 8006d58:	6033      	strmi	r3, [r6, #0]
 8006d5a:	6825      	ldr	r5, [r4, #0]
 8006d5c:	f015 0506 	ands.w	r5, r5, #6
 8006d60:	d106      	bne.n	8006d70 <_printf_common+0x48>
 8006d62:	f104 0a19 	add.w	sl, r4, #25
 8006d66:	68e3      	ldr	r3, [r4, #12]
 8006d68:	6832      	ldr	r2, [r6, #0]
 8006d6a:	1a9b      	subs	r3, r3, r2
 8006d6c:	42ab      	cmp	r3, r5
 8006d6e:	dc26      	bgt.n	8006dbe <_printf_common+0x96>
 8006d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d74:	1e13      	subs	r3, r2, #0
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	bf18      	it	ne
 8006d7a:	2301      	movne	r3, #1
 8006d7c:	0692      	lsls	r2, r2, #26
 8006d7e:	d42b      	bmi.n	8006dd8 <_printf_common+0xb0>
 8006d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d84:	4649      	mov	r1, r9
 8006d86:	4638      	mov	r0, r7
 8006d88:	47c0      	blx	r8
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	d01e      	beq.n	8006dcc <_printf_common+0xa4>
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	6922      	ldr	r2, [r4, #16]
 8006d92:	f003 0306 	and.w	r3, r3, #6
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	bf02      	ittt	eq
 8006d9a:	68e5      	ldreq	r5, [r4, #12]
 8006d9c:	6833      	ldreq	r3, [r6, #0]
 8006d9e:	1aed      	subeq	r5, r5, r3
 8006da0:	68a3      	ldr	r3, [r4, #8]
 8006da2:	bf0c      	ite	eq
 8006da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006da8:	2500      	movne	r5, #0
 8006daa:	4293      	cmp	r3, r2
 8006dac:	bfc4      	itt	gt
 8006dae:	1a9b      	subgt	r3, r3, r2
 8006db0:	18ed      	addgt	r5, r5, r3
 8006db2:	2600      	movs	r6, #0
 8006db4:	341a      	adds	r4, #26
 8006db6:	42b5      	cmp	r5, r6
 8006db8:	d11a      	bne.n	8006df0 <_printf_common+0xc8>
 8006dba:	2000      	movs	r0, #0
 8006dbc:	e008      	b.n	8006dd0 <_printf_common+0xa8>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	4652      	mov	r2, sl
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	47c0      	blx	r8
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d103      	bne.n	8006dd4 <_printf_common+0xac>
 8006dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	e7c6      	b.n	8006d66 <_printf_common+0x3e>
 8006dd8:	18e1      	adds	r1, r4, r3
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	2030      	movs	r0, #48	; 0x30
 8006dde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006de2:	4422      	add	r2, r4
 8006de4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006de8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dec:	3302      	adds	r3, #2
 8006dee:	e7c7      	b.n	8006d80 <_printf_common+0x58>
 8006df0:	2301      	movs	r3, #1
 8006df2:	4622      	mov	r2, r4
 8006df4:	4649      	mov	r1, r9
 8006df6:	4638      	mov	r0, r7
 8006df8:	47c0      	blx	r8
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	d0e6      	beq.n	8006dcc <_printf_common+0xa4>
 8006dfe:	3601      	adds	r6, #1
 8006e00:	e7d9      	b.n	8006db6 <_printf_common+0x8e>
	...

08006e04 <_printf_i>:
 8006e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e08:	7e0f      	ldrb	r7, [r1, #24]
 8006e0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e0c:	2f78      	cmp	r7, #120	; 0x78
 8006e0e:	4691      	mov	r9, r2
 8006e10:	4680      	mov	r8, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	469a      	mov	sl, r3
 8006e16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e1a:	d807      	bhi.n	8006e2c <_printf_i+0x28>
 8006e1c:	2f62      	cmp	r7, #98	; 0x62
 8006e1e:	d80a      	bhi.n	8006e36 <_printf_i+0x32>
 8006e20:	2f00      	cmp	r7, #0
 8006e22:	f000 80d4 	beq.w	8006fce <_printf_i+0x1ca>
 8006e26:	2f58      	cmp	r7, #88	; 0x58
 8006e28:	f000 80c0 	beq.w	8006fac <_printf_i+0x1a8>
 8006e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e34:	e03a      	b.n	8006eac <_printf_i+0xa8>
 8006e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e3a:	2b15      	cmp	r3, #21
 8006e3c:	d8f6      	bhi.n	8006e2c <_printf_i+0x28>
 8006e3e:	a101      	add	r1, pc, #4	; (adr r1, 8006e44 <_printf_i+0x40>)
 8006e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e44:	08006e9d 	.word	0x08006e9d
 8006e48:	08006eb1 	.word	0x08006eb1
 8006e4c:	08006e2d 	.word	0x08006e2d
 8006e50:	08006e2d 	.word	0x08006e2d
 8006e54:	08006e2d 	.word	0x08006e2d
 8006e58:	08006e2d 	.word	0x08006e2d
 8006e5c:	08006eb1 	.word	0x08006eb1
 8006e60:	08006e2d 	.word	0x08006e2d
 8006e64:	08006e2d 	.word	0x08006e2d
 8006e68:	08006e2d 	.word	0x08006e2d
 8006e6c:	08006e2d 	.word	0x08006e2d
 8006e70:	08006fb5 	.word	0x08006fb5
 8006e74:	08006edd 	.word	0x08006edd
 8006e78:	08006f6f 	.word	0x08006f6f
 8006e7c:	08006e2d 	.word	0x08006e2d
 8006e80:	08006e2d 	.word	0x08006e2d
 8006e84:	08006fd7 	.word	0x08006fd7
 8006e88:	08006e2d 	.word	0x08006e2d
 8006e8c:	08006edd 	.word	0x08006edd
 8006e90:	08006e2d 	.word	0x08006e2d
 8006e94:	08006e2d 	.word	0x08006e2d
 8006e98:	08006f77 	.word	0x08006f77
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	1d1a      	adds	r2, r3, #4
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	602a      	str	r2, [r5, #0]
 8006ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eac:	2301      	movs	r3, #1
 8006eae:	e09f      	b.n	8006ff0 <_printf_i+0x1ec>
 8006eb0:	6820      	ldr	r0, [r4, #0]
 8006eb2:	682b      	ldr	r3, [r5, #0]
 8006eb4:	0607      	lsls	r7, r0, #24
 8006eb6:	f103 0104 	add.w	r1, r3, #4
 8006eba:	6029      	str	r1, [r5, #0]
 8006ebc:	d501      	bpl.n	8006ec2 <_printf_i+0xbe>
 8006ebe:	681e      	ldr	r6, [r3, #0]
 8006ec0:	e003      	b.n	8006eca <_printf_i+0xc6>
 8006ec2:	0646      	lsls	r6, r0, #25
 8006ec4:	d5fb      	bpl.n	8006ebe <_printf_i+0xba>
 8006ec6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006eca:	2e00      	cmp	r6, #0
 8006ecc:	da03      	bge.n	8006ed6 <_printf_i+0xd2>
 8006ece:	232d      	movs	r3, #45	; 0x2d
 8006ed0:	4276      	negs	r6, r6
 8006ed2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ed6:	485a      	ldr	r0, [pc, #360]	; (8007040 <_printf_i+0x23c>)
 8006ed8:	230a      	movs	r3, #10
 8006eda:	e012      	b.n	8006f02 <_printf_i+0xfe>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	6820      	ldr	r0, [r4, #0]
 8006ee0:	1d19      	adds	r1, r3, #4
 8006ee2:	6029      	str	r1, [r5, #0]
 8006ee4:	0605      	lsls	r5, r0, #24
 8006ee6:	d501      	bpl.n	8006eec <_printf_i+0xe8>
 8006ee8:	681e      	ldr	r6, [r3, #0]
 8006eea:	e002      	b.n	8006ef2 <_printf_i+0xee>
 8006eec:	0641      	lsls	r1, r0, #25
 8006eee:	d5fb      	bpl.n	8006ee8 <_printf_i+0xe4>
 8006ef0:	881e      	ldrh	r6, [r3, #0]
 8006ef2:	4853      	ldr	r0, [pc, #332]	; (8007040 <_printf_i+0x23c>)
 8006ef4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ef6:	bf0c      	ite	eq
 8006ef8:	2308      	moveq	r3, #8
 8006efa:	230a      	movne	r3, #10
 8006efc:	2100      	movs	r1, #0
 8006efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f02:	6865      	ldr	r5, [r4, #4]
 8006f04:	60a5      	str	r5, [r4, #8]
 8006f06:	2d00      	cmp	r5, #0
 8006f08:	bfa2      	ittt	ge
 8006f0a:	6821      	ldrge	r1, [r4, #0]
 8006f0c:	f021 0104 	bicge.w	r1, r1, #4
 8006f10:	6021      	strge	r1, [r4, #0]
 8006f12:	b90e      	cbnz	r6, 8006f18 <_printf_i+0x114>
 8006f14:	2d00      	cmp	r5, #0
 8006f16:	d04b      	beq.n	8006fb0 <_printf_i+0x1ac>
 8006f18:	4615      	mov	r5, r2
 8006f1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f1e:	fb03 6711 	mls	r7, r3, r1, r6
 8006f22:	5dc7      	ldrb	r7, [r0, r7]
 8006f24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f28:	4637      	mov	r7, r6
 8006f2a:	42bb      	cmp	r3, r7
 8006f2c:	460e      	mov	r6, r1
 8006f2e:	d9f4      	bls.n	8006f1a <_printf_i+0x116>
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d10b      	bne.n	8006f4c <_printf_i+0x148>
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	07de      	lsls	r6, r3, #31
 8006f38:	d508      	bpl.n	8006f4c <_printf_i+0x148>
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	6861      	ldr	r1, [r4, #4]
 8006f3e:	4299      	cmp	r1, r3
 8006f40:	bfde      	ittt	le
 8006f42:	2330      	movle	r3, #48	; 0x30
 8006f44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f4c:	1b52      	subs	r2, r2, r5
 8006f4e:	6122      	str	r2, [r4, #16]
 8006f50:	f8cd a000 	str.w	sl, [sp]
 8006f54:	464b      	mov	r3, r9
 8006f56:	aa03      	add	r2, sp, #12
 8006f58:	4621      	mov	r1, r4
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	f7ff fee4 	bl	8006d28 <_printf_common>
 8006f60:	3001      	adds	r0, #1
 8006f62:	d14a      	bne.n	8006ffa <_printf_i+0x1f6>
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
 8006f68:	b004      	add	sp, #16
 8006f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	f043 0320 	orr.w	r3, r3, #32
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	4833      	ldr	r0, [pc, #204]	; (8007044 <_printf_i+0x240>)
 8006f78:	2778      	movs	r7, #120	; 0x78
 8006f7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	6829      	ldr	r1, [r5, #0]
 8006f82:	061f      	lsls	r7, r3, #24
 8006f84:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f88:	d402      	bmi.n	8006f90 <_printf_i+0x18c>
 8006f8a:	065f      	lsls	r7, r3, #25
 8006f8c:	bf48      	it	mi
 8006f8e:	b2b6      	uxthmi	r6, r6
 8006f90:	07df      	lsls	r7, r3, #31
 8006f92:	bf48      	it	mi
 8006f94:	f043 0320 	orrmi.w	r3, r3, #32
 8006f98:	6029      	str	r1, [r5, #0]
 8006f9a:	bf48      	it	mi
 8006f9c:	6023      	strmi	r3, [r4, #0]
 8006f9e:	b91e      	cbnz	r6, 8006fa8 <_printf_i+0x1a4>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	f023 0320 	bic.w	r3, r3, #32
 8006fa6:	6023      	str	r3, [r4, #0]
 8006fa8:	2310      	movs	r3, #16
 8006faa:	e7a7      	b.n	8006efc <_printf_i+0xf8>
 8006fac:	4824      	ldr	r0, [pc, #144]	; (8007040 <_printf_i+0x23c>)
 8006fae:	e7e4      	b.n	8006f7a <_printf_i+0x176>
 8006fb0:	4615      	mov	r5, r2
 8006fb2:	e7bd      	b.n	8006f30 <_printf_i+0x12c>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	6826      	ldr	r6, [r4, #0]
 8006fb8:	6961      	ldr	r1, [r4, #20]
 8006fba:	1d18      	adds	r0, r3, #4
 8006fbc:	6028      	str	r0, [r5, #0]
 8006fbe:	0635      	lsls	r5, r6, #24
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	d501      	bpl.n	8006fc8 <_printf_i+0x1c4>
 8006fc4:	6019      	str	r1, [r3, #0]
 8006fc6:	e002      	b.n	8006fce <_printf_i+0x1ca>
 8006fc8:	0670      	lsls	r0, r6, #25
 8006fca:	d5fb      	bpl.n	8006fc4 <_printf_i+0x1c0>
 8006fcc:	8019      	strh	r1, [r3, #0]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	6123      	str	r3, [r4, #16]
 8006fd2:	4615      	mov	r5, r2
 8006fd4:	e7bc      	b.n	8006f50 <_printf_i+0x14c>
 8006fd6:	682b      	ldr	r3, [r5, #0]
 8006fd8:	1d1a      	adds	r2, r3, #4
 8006fda:	602a      	str	r2, [r5, #0]
 8006fdc:	681d      	ldr	r5, [r3, #0]
 8006fde:	6862      	ldr	r2, [r4, #4]
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f7f9 f954 	bl	8000290 <memchr>
 8006fe8:	b108      	cbz	r0, 8006fee <_printf_i+0x1ea>
 8006fea:	1b40      	subs	r0, r0, r5
 8006fec:	6060      	str	r0, [r4, #4]
 8006fee:	6863      	ldr	r3, [r4, #4]
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ff8:	e7aa      	b.n	8006f50 <_printf_i+0x14c>
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	462a      	mov	r2, r5
 8006ffe:	4649      	mov	r1, r9
 8007000:	4640      	mov	r0, r8
 8007002:	47d0      	blx	sl
 8007004:	3001      	adds	r0, #1
 8007006:	d0ad      	beq.n	8006f64 <_printf_i+0x160>
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	079b      	lsls	r3, r3, #30
 800700c:	d413      	bmi.n	8007036 <_printf_i+0x232>
 800700e:	68e0      	ldr	r0, [r4, #12]
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	4298      	cmp	r0, r3
 8007014:	bfb8      	it	lt
 8007016:	4618      	movlt	r0, r3
 8007018:	e7a6      	b.n	8006f68 <_printf_i+0x164>
 800701a:	2301      	movs	r3, #1
 800701c:	4632      	mov	r2, r6
 800701e:	4649      	mov	r1, r9
 8007020:	4640      	mov	r0, r8
 8007022:	47d0      	blx	sl
 8007024:	3001      	adds	r0, #1
 8007026:	d09d      	beq.n	8006f64 <_printf_i+0x160>
 8007028:	3501      	adds	r5, #1
 800702a:	68e3      	ldr	r3, [r4, #12]
 800702c:	9903      	ldr	r1, [sp, #12]
 800702e:	1a5b      	subs	r3, r3, r1
 8007030:	42ab      	cmp	r3, r5
 8007032:	dcf2      	bgt.n	800701a <_printf_i+0x216>
 8007034:	e7eb      	b.n	800700e <_printf_i+0x20a>
 8007036:	2500      	movs	r5, #0
 8007038:	f104 0619 	add.w	r6, r4, #25
 800703c:	e7f5      	b.n	800702a <_printf_i+0x226>
 800703e:	bf00      	nop
 8007040:	080072c1 	.word	0x080072c1
 8007044:	080072d2 	.word	0x080072d2

08007048 <memmove>:
 8007048:	4288      	cmp	r0, r1
 800704a:	b510      	push	{r4, lr}
 800704c:	eb01 0402 	add.w	r4, r1, r2
 8007050:	d902      	bls.n	8007058 <memmove+0x10>
 8007052:	4284      	cmp	r4, r0
 8007054:	4623      	mov	r3, r4
 8007056:	d807      	bhi.n	8007068 <memmove+0x20>
 8007058:	1e43      	subs	r3, r0, #1
 800705a:	42a1      	cmp	r1, r4
 800705c:	d008      	beq.n	8007070 <memmove+0x28>
 800705e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007066:	e7f8      	b.n	800705a <memmove+0x12>
 8007068:	4402      	add	r2, r0
 800706a:	4601      	mov	r1, r0
 800706c:	428a      	cmp	r2, r1
 800706e:	d100      	bne.n	8007072 <memmove+0x2a>
 8007070:	bd10      	pop	{r4, pc}
 8007072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800707a:	e7f7      	b.n	800706c <memmove+0x24>

0800707c <_sbrk_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4d06      	ldr	r5, [pc, #24]	; (8007098 <_sbrk_r+0x1c>)
 8007080:	2300      	movs	r3, #0
 8007082:	4604      	mov	r4, r0
 8007084:	4608      	mov	r0, r1
 8007086:	602b      	str	r3, [r5, #0]
 8007088:	f7f9 ff68 	bl	8000f5c <_sbrk>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_sbrk_r+0x1a>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b103      	cbz	r3, 8007096 <_sbrk_r+0x1a>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	200145c0 	.word	0x200145c0

0800709c <_realloc_r>:
 800709c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a0:	4680      	mov	r8, r0
 80070a2:	4614      	mov	r4, r2
 80070a4:	460e      	mov	r6, r1
 80070a6:	b921      	cbnz	r1, 80070b2 <_realloc_r+0x16>
 80070a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070ac:	4611      	mov	r1, r2
 80070ae:	f7ff bc57 	b.w	8006960 <_malloc_r>
 80070b2:	b92a      	cbnz	r2, 80070c0 <_realloc_r+0x24>
 80070b4:	f7ff fbe8 	bl	8006888 <_free_r>
 80070b8:	4625      	mov	r5, r4
 80070ba:	4628      	mov	r0, r5
 80070bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c0:	f000 f81b 	bl	80070fa <_malloc_usable_size_r>
 80070c4:	4284      	cmp	r4, r0
 80070c6:	4607      	mov	r7, r0
 80070c8:	d802      	bhi.n	80070d0 <_realloc_r+0x34>
 80070ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070ce:	d812      	bhi.n	80070f6 <_realloc_r+0x5a>
 80070d0:	4621      	mov	r1, r4
 80070d2:	4640      	mov	r0, r8
 80070d4:	f7ff fc44 	bl	8006960 <_malloc_r>
 80070d8:	4605      	mov	r5, r0
 80070da:	2800      	cmp	r0, #0
 80070dc:	d0ed      	beq.n	80070ba <_realloc_r+0x1e>
 80070de:	42bc      	cmp	r4, r7
 80070e0:	4622      	mov	r2, r4
 80070e2:	4631      	mov	r1, r6
 80070e4:	bf28      	it	cs
 80070e6:	463a      	movcs	r2, r7
 80070e8:	f7ff fbc0 	bl	800686c <memcpy>
 80070ec:	4631      	mov	r1, r6
 80070ee:	4640      	mov	r0, r8
 80070f0:	f7ff fbca 	bl	8006888 <_free_r>
 80070f4:	e7e1      	b.n	80070ba <_realloc_r+0x1e>
 80070f6:	4635      	mov	r5, r6
 80070f8:	e7df      	b.n	80070ba <_realloc_r+0x1e>

080070fa <_malloc_usable_size_r>:
 80070fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fe:	1f18      	subs	r0, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	bfbc      	itt	lt
 8007104:	580b      	ldrlt	r3, [r1, r0]
 8007106:	18c0      	addlt	r0, r0, r3
 8007108:	4770      	bx	lr
	...

0800710c <_init>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	bf00      	nop
 8007110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007112:	bc08      	pop	{r3}
 8007114:	469e      	mov	lr, r3
 8007116:	4770      	bx	lr

08007118 <_fini>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	bf00      	nop
 800711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711e:	bc08      	pop	{r3}
 8007120:	469e      	mov	lr, r3
 8007122:	4770      	bx	lr
