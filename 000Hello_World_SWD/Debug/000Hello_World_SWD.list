
000Hello_World_SWD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d04  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f14  08003f14  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f14  08003f14  00013f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f1c  08003f1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f1c  08003f1c  00013f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f20  08003f20  00013f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00012ee0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012f50  20012f50  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c5f9  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002214  00000000  00000000  0002c6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d30  00000000  00000000  0002e8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a21  00000000  00000000  0002f620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025381  00000000  00000000  00030041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f311  00000000  00000000  000553c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1f4b  00000000  00000000  000646d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c60  00000000  00000000  00146620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  0014a280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003e9c 	.word	0x08003e9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003e9c 	.word	0x08003e9c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	BaseType_t xReturned = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
	TaskHandle_t xTask1Handle = NULL, xTask2Handle = NULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fd01 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f845 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f8af 	bl	8000668 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  xReturned = xTaskCreate(Task1_Handler, "Task-1", 200, "Hello world from Task-1", 2, &xTask1Handle);
 800050a:	f107 0308 	add.w	r3, r7, #8
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	2302      	movs	r3, #2
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <main+0x8c>)
 8000516:	22c8      	movs	r2, #200	; 0xc8
 8000518:	4918      	ldr	r1, [pc, #96]	; (800057c <main+0x90>)
 800051a:	4819      	ldr	r0, [pc, #100]	; (8000580 <main+0x94>)
 800051c:	f001 ff8b 	bl	8002436 <xTaskCreate>
 8000520:	6178      	str	r0, [r7, #20]
  configASSERT(pdPASS == xReturned);
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d00a      	beq.n	800053e <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800052c:	f383 8811 	msr	BASEPRI, r3
 8000530:	f3bf 8f6f 	isb	sy
 8000534:	f3bf 8f4f 	dsb	sy
 8000538:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800053a:	bf00      	nop
 800053c:	e7fe      	b.n	800053c <main+0x50>

  xReturned = xTaskCreate(Task2_Handler, "Task-2", 200, "Hello world from Task-2", 2, &xTask2Handle);
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	2302      	movs	r3, #2
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <main+0x98>)
 8000548:	22c8      	movs	r2, #200	; 0xc8
 800054a:	490f      	ldr	r1, [pc, #60]	; (8000588 <main+0x9c>)
 800054c:	480f      	ldr	r0, [pc, #60]	; (800058c <main+0xa0>)
 800054e:	f001 ff72 	bl	8002436 <xTaskCreate>
 8000552:	6178      	str	r0, [r7, #20]
  configASSERT(pdPASS == xReturned);
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d00a      	beq.n	8000570 <main+0x84>
        __asm volatile
 800055a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800055e:	f383 8811 	msr	BASEPRI, r3
 8000562:	f3bf 8f6f 	isb	sy
 8000566:	f3bf 8f4f 	dsb	sy
 800056a:	60fb      	str	r3, [r7, #12]
    }
 800056c:	bf00      	nop
 800056e:	e7fe      	b.n	800056e <main+0x82>

  // start the scheduler
  vTaskStartScheduler();
 8000570:	f002 f8be 	bl	80026f0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	e7fe      	b.n	8000574 <main+0x88>
 8000576:	bf00      	nop
 8000578:	08003eb4 	.word	0x08003eb4
 800057c:	08003ecc 	.word	0x08003ecc
 8000580:	08000b41 	.word	0x08000b41
 8000584:	08003ed4 	.word	0x08003ed4
 8000588:	08003eec 	.word	0x08003eec
 800058c:	08000b75 	.word	0x08000b75

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 f9be 	bl	8003920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b29      	ldr	r3, [pc, #164]	; (8000660 <SystemClock_Config+0xd0>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a28      	ldr	r2, [pc, #160]	; (8000660 <SystemClock_Config+0xd0>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <SystemClock_Config+0xd0>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <SystemClock_Config+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xd4>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000604:	2308      	movs	r3, #8
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000608:	2332      	movs	r3, #50	; 0x32
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060c:	2304      	movs	r3, #4
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000610:	2307      	movs	r3, #7
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f000 ff5d 	bl	80014d8 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000624:	f000 fad2 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000634:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800063a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f001 f9be 	bl	80019c8 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000652:	f000 fabb 	bl	8000bcc <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08e      	sub	sp, #56	; 0x38
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
 8000682:	4bb2      	ldr	r3, [pc, #712]	; (800094c <MX_GPIO_Init+0x2e4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4ab1      	ldr	r2, [pc, #708]	; (800094c <MX_GPIO_Init+0x2e4>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4baf      	ldr	r3, [pc, #700]	; (800094c <MX_GPIO_Init+0x2e4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	623b      	str	r3, [r7, #32]
 8000698:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
 800069e:	4bab      	ldr	r3, [pc, #684]	; (800094c <MX_GPIO_Init+0x2e4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4aaa      	ldr	r2, [pc, #680]	; (800094c <MX_GPIO_Init+0x2e4>)
 80006a4:	f043 0320 	orr.w	r3, r3, #32
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4ba8      	ldr	r3, [pc, #672]	; (800094c <MX_GPIO_Init+0x2e4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0320 	and.w	r3, r3, #32
 80006b2:	61fb      	str	r3, [r7, #28]
 80006b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
 80006ba:	4ba4      	ldr	r3, [pc, #656]	; (800094c <MX_GPIO_Init+0x2e4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4aa3      	ldr	r2, [pc, #652]	; (800094c <MX_GPIO_Init+0x2e4>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4ba1      	ldr	r3, [pc, #644]	; (800094c <MX_GPIO_Init+0x2e4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	61bb      	str	r3, [r7, #24]
 80006d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	4b9d      	ldr	r3, [pc, #628]	; (800094c <MX_GPIO_Init+0x2e4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a9c      	ldr	r2, [pc, #624]	; (800094c <MX_GPIO_Init+0x2e4>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b9a      	ldr	r3, [pc, #616]	; (800094c <MX_GPIO_Init+0x2e4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b96      	ldr	r3, [pc, #600]	; (800094c <MX_GPIO_Init+0x2e4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a95      	ldr	r2, [pc, #596]	; (800094c <MX_GPIO_Init+0x2e4>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b93      	ldr	r3, [pc, #588]	; (800094c <MX_GPIO_Init+0x2e4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b8f      	ldr	r3, [pc, #572]	; (800094c <MX_GPIO_Init+0x2e4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a8e      	ldr	r2, [pc, #568]	; (800094c <MX_GPIO_Init+0x2e4>)
 8000714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b8c      	ldr	r3, [pc, #560]	; (800094c <MX_GPIO_Init+0x2e4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b88      	ldr	r3, [pc, #544]	; (800094c <MX_GPIO_Init+0x2e4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a87      	ldr	r2, [pc, #540]	; (800094c <MX_GPIO_Init+0x2e4>)
 8000730:	f043 0310 	orr.w	r3, r3, #16
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b85      	ldr	r3, [pc, #532]	; (800094c <MX_GPIO_Init+0x2e4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0310 	and.w	r3, r3, #16
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b81      	ldr	r3, [pc, #516]	; (800094c <MX_GPIO_Init+0x2e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a80      	ldr	r2, [pc, #512]	; (800094c <MX_GPIO_Init+0x2e4>)
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b7e      	ldr	r3, [pc, #504]	; (800094c <MX_GPIO_Init+0x2e4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2116      	movs	r1, #22
 8000762:	487b      	ldr	r0, [pc, #492]	; (8000950 <MX_GPIO_Init+0x2e8>)
 8000764:	f000 fe9e 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	4879      	ldr	r0, [pc, #484]	; (8000954 <MX_GPIO_Init+0x2ec>)
 800076e:	f000 fe99 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000778:	4877      	ldr	r0, [pc, #476]	; (8000958 <MX_GPIO_Init+0x2f0>)
 800077a:	f000 fe93 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000784:	4875      	ldr	r0, [pc, #468]	; (800095c <MX_GPIO_Init+0x2f4>)
 8000786:	f000 fe8d 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800078a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800079c:	230c      	movs	r3, #12
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	4619      	mov	r1, r3
 80007a6:	486e      	ldr	r0, [pc, #440]	; (8000960 <MX_GPIO_Init+0x2f8>)
 80007a8:	f000 fcd0 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80007ac:	f44f 7360 	mov.w	r3, #896	; 0x380
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80007be:	2305      	movs	r3, #5
 80007c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c6:	4619      	mov	r1, r3
 80007c8:	4865      	ldr	r0, [pc, #404]	; (8000960 <MX_GPIO_Init+0x2f8>)
 80007ca:	f000 fcbf 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80007ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007e0:	230e      	movs	r3, #14
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	4619      	mov	r1, r3
 80007ea:	485d      	ldr	r0, [pc, #372]	; (8000960 <MX_GPIO_Init+0x2f8>)
 80007ec:	f000 fcae 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80007f0:	2301      	movs	r3, #1
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000800:	230c      	movs	r3, #12
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	4851      	ldr	r0, [pc, #324]	; (8000950 <MX_GPIO_Init+0x2e8>)
 800080c:	f000 fc9e 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000810:	2316      	movs	r3, #22
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000824:	4619      	mov	r1, r3
 8000826:	484a      	ldr	r0, [pc, #296]	; (8000950 <MX_GPIO_Init+0x2e8>)
 8000828:	f000 fc90 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800082c:	f248 0307 	movw	r3, #32775	; 0x8007
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000832:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4844      	ldr	r0, [pc, #272]	; (8000954 <MX_GPIO_Init+0x2ec>)
 8000844:	f000 fc82 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000848:	f641 0358 	movw	r3, #6232	; 0x1858
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800085a:	230e      	movs	r3, #14
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	483b      	ldr	r0, [pc, #236]	; (8000954 <MX_GPIO_Init+0x2ec>)
 8000866:	f000 fc71 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087e:	4619      	mov	r1, r3
 8000880:	4834      	ldr	r0, [pc, #208]	; (8000954 <MX_GPIO_Init+0x2ec>)
 8000882:	f000 fc63 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000886:	2320      	movs	r3, #32
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800088a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	482d      	ldr	r0, [pc, #180]	; (8000950 <MX_GPIO_Init+0x2e8>)
 800089c:	f000 fc56 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80008a0:	2303      	movs	r3, #3
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80008b0:	2309      	movs	r3, #9
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	4619      	mov	r1, r3
 80008ba:	482a      	ldr	r0, [pc, #168]	; (8000964 <MX_GPIO_Init+0x2fc>)
 80008bc:	f000 fc46 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c0:	2304      	movs	r3, #4
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	4619      	mov	r1, r3
 80008d2:	4824      	ldr	r0, [pc, #144]	; (8000964 <MX_GPIO_Init+0x2fc>)
 80008d4:	f000 fc3a 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80008d8:	f248 1333 	movw	r3, #33075	; 0x8133
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ea:	230c      	movs	r3, #12
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4819      	ldr	r0, [pc, #100]	; (800095c <MX_GPIO_Init+0x2f4>)
 80008f6:	f000 fc29 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80008fa:	f64f 7383 	movw	r3, #65411	; 0xff83
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800090c:	230c      	movs	r3, #12
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000914:	4619      	mov	r1, r3
 8000916:	4814      	ldr	r0, [pc, #80]	; (8000968 <MX_GPIO_Init+0x300>)
 8000918:	f000 fc18 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800091c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800092e:	230e      	movs	r3, #14
 8000930:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	4619      	mov	r1, r3
 8000938:	480a      	ldr	r0, [pc, #40]	; (8000964 <MX_GPIO_Init+0x2fc>)
 800093a:	f000 fc07 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800093e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
 8000948:	e010      	b.n	800096c <MX_GPIO_Init+0x304>
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40020800 	.word	0x40020800
 8000954:	40020000 	.word	0x40020000
 8000958:	40020c00 	.word	0x40020c00
 800095c:	40021800 	.word	0x40021800
 8000960:	40021400 	.word	0x40021400
 8000964:	40020400 	.word	0x40020400
 8000968:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000974:	230c      	movs	r3, #12
 8000976:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	486b      	ldr	r0, [pc, #428]	; (8000b2c <MX_GPIO_Init+0x4c4>)
 8000980:	f000 fbe4 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4864      	ldr	r0, [pc, #400]	; (8000b2c <MX_GPIO_Init+0x4c4>)
 800099a:	f000 fbd7 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800099e:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009b0:	230c      	movs	r3, #12
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b8:	4619      	mov	r1, r3
 80009ba:	485d      	ldr	r0, [pc, #372]	; (8000b30 <MX_GPIO_Init+0x4c8>)
 80009bc:	f000 fbc6 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80009c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4856      	ldr	r0, [pc, #344]	; (8000b30 <MX_GPIO_Init+0x4c8>)
 80009d6:	f000 fbb9 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80009da:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f0:	4619      	mov	r1, r3
 80009f2:	484f      	ldr	r0, [pc, #316]	; (8000b30 <MX_GPIO_Init+0x4c8>)
 80009f4:	f000 fbaa 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80009f8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a0a:	230e      	movs	r3, #14
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	4847      	ldr	r0, [pc, #284]	; (8000b34 <MX_GPIO_Init+0x4cc>)
 8000a16:	f000 fb99 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000a1a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a2c:	230e      	movs	r3, #14
 8000a2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	4840      	ldr	r0, [pc, #256]	; (8000b38 <MX_GPIO_Init+0x4d0>)
 8000a38:	f000 fb88 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a42:	2312      	movs	r3, #18
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4837      	ldr	r0, [pc, #220]	; (8000b38 <MX_GPIO_Init+0x4d0>)
 8000a5a:	f000 fb77 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a64:	2312      	movs	r3, #18
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a70:	2304      	movs	r3, #4
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4830      	ldr	r0, [pc, #192]	; (8000b3c <MX_GPIO_Init+0x4d4>)
 8000a7c:	f000 fb66 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a80:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a92:	2307      	movs	r3, #7
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4827      	ldr	r0, [pc, #156]	; (8000b3c <MX_GPIO_Init+0x4d4>)
 8000a9e:	f000 fb55 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000aa2:	2348      	movs	r3, #72	; 0x48
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ab2:	230e      	movs	r3, #14
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	481c      	ldr	r0, [pc, #112]	; (8000b30 <MX_GPIO_Init+0x4c8>)
 8000abe:	f000 fb45 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000ac2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ad4:	2309      	movs	r3, #9
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	4815      	ldr	r0, [pc, #84]	; (8000b34 <MX_GPIO_Init+0x4cc>)
 8000ae0:	f000 fb34 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ae4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MX_GPIO_Init+0x4cc>)
 8000afe:	f000 fb25 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b02:	2360      	movs	r3, #96	; 0x60
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b12:	230c      	movs	r3, #12
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <MX_GPIO_Init+0x4c4>)
 8000b1e:	f000 fb15 	bl	800114c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b22:	bf00      	nop
 8000b24:	3738      	adds	r7, #56	; 0x38
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40021800 	.word	0x40021800
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <Task1_Handler>:

/* USER CODE BEGIN 4 */

static void Task1_Handler(void *pvParam)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b09c      	sub	sp, #112	; 0x70
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	char msg[100];
	memset(msg, 0, sizeof(msg));
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2264      	movs	r2, #100	; 0x64
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 fee5 	bl	8003920 <memset>

	while(1) {
		printf("%s\n", (char *)pvParam);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f002 fe02 	bl	8003760 <puts>

		taskYIELD();
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <Task1_Handler+0x30>)
 8000b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	f3bf 8f4f 	dsb	sy
 8000b68:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char *)pvParam);
 8000b6c:	e7f3      	b.n	8000b56 <Task1_Handler+0x16>
 8000b6e:	bf00      	nop
 8000b70:	e000ed04 	.word	0xe000ed04

08000b74 <Task2_Handler>:

	vTaskDelete(NULL);
}

static void Task2_Handler(void *pvParam)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b09c      	sub	sp, #112	; 0x70
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	char msg[100];
	memset(msg, 0, sizeof(msg));
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2264      	movs	r2, #100	; 0x64
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 fecb 	bl	8003920 <memset>

	while(1) {
		printf("%s\n", (char *)pvParam);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f002 fde8 	bl	8003760 <puts>

		taskYIELD();
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <Task2_Handler+0x30>)
 8000b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	f3bf 8f4f 	dsb	sy
 8000b9c:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char *)pvParam);
 8000ba0:	e7f3      	b.n	8000b8a <Task2_Handler+0x16>
 8000ba2:	bf00      	nop
 8000ba4:	e000ed04 	.word	0xe000ed04

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d101      	bne.n	8000bbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bba:	f000 f9c5 	bl	8000f48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40001000 	.word	0x40001000

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	; 0x38
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <HAL_InitTick+0xe4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a32      	ldr	r2, [pc, #200]	; (8000d0c <HAL_InitTick+0xe4>)
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <HAL_InitTick+0xe4>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c54:	f107 0210 	add.w	r2, r7, #16
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 f8be 	bl	8001de0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c64:	6a3b      	ldr	r3, [r7, #32]
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d103      	bne.n	8000c76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c6e:	f001 f8a3 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8000c72:	6378      	str	r0, [r7, #52]	; 0x34
 8000c74:	e004      	b.n	8000c80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c76:	f001 f89f 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c82:	4a23      	ldr	r2, [pc, #140]	; (8000d10 <HAL_InitTick+0xe8>)
 8000c84:	fba2 2303 	umull	r2, r3, r2, r3
 8000c88:	0c9b      	lsrs	r3, r3, #18
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <HAL_InitTick+0xec>)
 8000c90:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <HAL_InitTick+0xf0>)
 8000c92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <HAL_InitTick+0xec>)
 8000c96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c9a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c9c:	4a1d      	ldr	r2, [pc, #116]	; (8000d14 <HAL_InitTick+0xec>)
 8000c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <HAL_InitTick+0xec>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_InitTick+0xec>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <HAL_InitTick+0xec>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cb4:	4817      	ldr	r0, [pc, #92]	; (8000d14 <HAL_InitTick+0xec>)
 8000cb6:	f001 f8c5 	bl	8001e44 <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d11b      	bne.n	8000d00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cc8:	4812      	ldr	r0, [pc, #72]	; (8000d14 <HAL_InitTick+0xec>)
 8000cca:	f001 f915 	bl	8001ef8 <HAL_TIM_Base_Start_IT>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d111      	bne.n	8000d00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cdc:	2036      	movs	r0, #54	; 0x36
 8000cde:	f000 fa27 	bl	8001130 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d808      	bhi.n	8000cfa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	2036      	movs	r0, #54	; 0x36
 8000cee:	f000 fa03 	bl	80010f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_InitTick+0xf4>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	e002      	b.n	8000d00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3738      	adds	r7, #56	; 0x38
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	431bde83 	.word	0x431bde83
 8000d14:	2000008c 	.word	0x2000008c
 8000d18:	40001000 	.word	0x40001000
 8000d1c:	20000004 	.word	0x20000004

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <TIM6_DAC_IRQHandler+0x10>)
 8000d52:	f001 f941 	bl	8001fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000008c 	.word	0x2000008c

08000d60 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <ITM_SendChar+0x48>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <ITM_SendChar+0x48>)
 8000d70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d74:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <ITM_SendChar+0x4c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <ITM_SendChar+0x4c>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000d82:	bf00      	nop
 8000d84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f8      	beq.n	8000d84 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000d92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	6013      	str	r3, [r2, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000edfc 	.word	0xe000edfc
 8000dac:	e0000e00 	.word	0xe0000e00

08000db0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00a      	b.n	8000dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc2:	f3af 8000 	nop.w
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	b2ca      	uxtb	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf0      	blt.n	8000dc2 <_read+0x12>
  }

  return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e009      	b.n	8000e10 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ffab 	bl	8000d60 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf1      	blt.n	8000dfc <_write+0x12>
  }
  return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_close>:

int _close(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_isatty>:

int _isatty(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb4:	f7ff ffea 	bl	8000e8c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eba:	490d      	ldr	r1, [pc, #52]	; (8000ef0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed0:	4c0a      	ldr	r4, [pc, #40]	; (8000efc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ede:	f002 fd6d 	bl	80039bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee2:	f7ff fb03 	bl	80004ec <main>
  bx  lr    
 8000ee6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ee8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ef4:	08003f24 	.word	0x08003f24
  ldr r2, =_sbss
 8000ef8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000efc:	20012f50 	.word	0x20012f50

08000f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f8d8 	bl	80010e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff fe78 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fe4e 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	200000d4 	.word	0x200000d4

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	200000d4 	.word	0x200000d4

08000f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	60d3      	str	r3, [r2, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	f003 0307 	and.w	r3, r3, #7
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	db0b      	blt.n	8001016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 021f 	and.w	r2, r3, #31
 8001004:	4907      	ldr	r1, [pc, #28]	; (8001024 <__NVIC_EnableIRQ+0x38>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	2001      	movs	r0, #1
 800100e:	fa00 f202 	lsl.w	r2, r0, r2
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e100 	.word	0xe000e100

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43da      	mvns	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	4313      	orrs	r3, r2
         );
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ff4c 	bl	8000f88 <__NVIC_SetPriorityGrouping>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800110a:	f7ff ff61 	bl	8000fd0 <__NVIC_GetPriorityGrouping>
 800110e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	68b9      	ldr	r1, [r7, #8]
 8001114:	6978      	ldr	r0, [r7, #20]
 8001116:	f7ff ffb1 	bl	800107c <NVIC_EncodePriority>
 800111a:	4602      	mov	r2, r0
 800111c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff80 	bl	8001028 <__NVIC_SetPriority>
}
 8001128:	bf00      	nop
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff54 	bl	8000fec <__NVIC_EnableIRQ>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	e177      	b.n	8001458 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001168:	2201      	movs	r2, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	429a      	cmp	r2, r3
 8001182:	f040 8166 	bne.w	8001452 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d005      	beq.n	800119e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119a:	2b02      	cmp	r3, #2
 800119c:	d130      	bne.n	8001200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d4:	2201      	movs	r2, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	f003 0201 	and.w	r2, r3, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b03      	cmp	r3, #3
 800120a:	d017      	beq.n	800123c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d123      	bne.n	8001290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	220f      	movs	r2, #15
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	69b9      	ldr	r1, [r7, #24]
 800128c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0203 	and.w	r2, r3, #3
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80c0 	beq.w	8001452 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b66      	ldr	r3, [pc, #408]	; (8001470 <HAL_GPIO_Init+0x324>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a65      	ldr	r2, [pc, #404]	; (8001470 <HAL_GPIO_Init+0x324>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b63      	ldr	r3, [pc, #396]	; (8001470 <HAL_GPIO_Init+0x324>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ee:	4a61      	ldr	r2, [pc, #388]	; (8001474 <HAL_GPIO_Init+0x328>)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	3302      	adds	r3, #2
 80012f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a58      	ldr	r2, [pc, #352]	; (8001478 <HAL_GPIO_Init+0x32c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d037      	beq.n	800138a <HAL_GPIO_Init+0x23e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a57      	ldr	r2, [pc, #348]	; (800147c <HAL_GPIO_Init+0x330>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d031      	beq.n	8001386 <HAL_GPIO_Init+0x23a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a56      	ldr	r2, [pc, #344]	; (8001480 <HAL_GPIO_Init+0x334>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d02b      	beq.n	8001382 <HAL_GPIO_Init+0x236>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a55      	ldr	r2, [pc, #340]	; (8001484 <HAL_GPIO_Init+0x338>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d025      	beq.n	800137e <HAL_GPIO_Init+0x232>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a54      	ldr	r2, [pc, #336]	; (8001488 <HAL_GPIO_Init+0x33c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d01f      	beq.n	800137a <HAL_GPIO_Init+0x22e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a53      	ldr	r2, [pc, #332]	; (800148c <HAL_GPIO_Init+0x340>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d019      	beq.n	8001376 <HAL_GPIO_Init+0x22a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a52      	ldr	r2, [pc, #328]	; (8001490 <HAL_GPIO_Init+0x344>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0x226>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a51      	ldr	r2, [pc, #324]	; (8001494 <HAL_GPIO_Init+0x348>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00d      	beq.n	800136e <HAL_GPIO_Init+0x222>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a50      	ldr	r2, [pc, #320]	; (8001498 <HAL_GPIO_Init+0x34c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d007      	beq.n	800136a <HAL_GPIO_Init+0x21e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4f      	ldr	r2, [pc, #316]	; (800149c <HAL_GPIO_Init+0x350>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_GPIO_Init+0x21a>
 8001362:	2309      	movs	r3, #9
 8001364:	e012      	b.n	800138c <HAL_GPIO_Init+0x240>
 8001366:	230a      	movs	r3, #10
 8001368:	e010      	b.n	800138c <HAL_GPIO_Init+0x240>
 800136a:	2308      	movs	r3, #8
 800136c:	e00e      	b.n	800138c <HAL_GPIO_Init+0x240>
 800136e:	2307      	movs	r3, #7
 8001370:	e00c      	b.n	800138c <HAL_GPIO_Init+0x240>
 8001372:	2306      	movs	r3, #6
 8001374:	e00a      	b.n	800138c <HAL_GPIO_Init+0x240>
 8001376:	2305      	movs	r3, #5
 8001378:	e008      	b.n	800138c <HAL_GPIO_Init+0x240>
 800137a:	2304      	movs	r3, #4
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x240>
 800137e:	2303      	movs	r3, #3
 8001380:	e004      	b.n	800138c <HAL_GPIO_Init+0x240>
 8001382:	2302      	movs	r3, #2
 8001384:	e002      	b.n	800138c <HAL_GPIO_Init+0x240>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x240>
 800138a:	2300      	movs	r3, #0
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	f002 0203 	and.w	r2, r2, #3
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4093      	lsls	r3, r2
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800139c:	4935      	ldr	r1, [pc, #212]	; (8001474 <HAL_GPIO_Init+0x328>)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013aa:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <HAL_GPIO_Init+0x354>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ce:	4a34      	ldr	r2, [pc, #208]	; (80014a0 <HAL_GPIO_Init+0x354>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <HAL_GPIO_Init+0x354>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f8:	4a29      	ldr	r2, [pc, #164]	; (80014a0 <HAL_GPIO_Init+0x354>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <HAL_GPIO_Init+0x354>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001422:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <HAL_GPIO_Init+0x354>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <HAL_GPIO_Init+0x354>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <HAL_GPIO_Init+0x354>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3301      	adds	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	2b0f      	cmp	r3, #15
 800145c:	f67f ae84 	bls.w	8001168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40013800 	.word	0x40013800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020400 	.word	0x40020400
 8001480:	40020800 	.word	0x40020800
 8001484:	40020c00 	.word	0x40020c00
 8001488:	40021000 	.word	0x40021000
 800148c:	40021400 	.word	0x40021400
 8001490:	40021800 	.word	0x40021800
 8001494:	40021c00 	.word	0x40021c00
 8001498:	40022000 	.word	0x40022000
 800149c:	40022400 	.word	0x40022400
 80014a0:	40013c00 	.word	0x40013c00

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e267      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d075      	beq.n	80015e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014f6:	4b88      	ldr	r3, [pc, #544]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d00c      	beq.n	800151c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001502:	4b85      	ldr	r3, [pc, #532]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800150a:	2b08      	cmp	r3, #8
 800150c:	d112      	bne.n	8001534 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150e:	4b82      	ldr	r3, [pc, #520]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800151a:	d10b      	bne.n	8001534 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	4b7e      	ldr	r3, [pc, #504]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d05b      	beq.n	80015e0 <HAL_RCC_OscConfig+0x108>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d157      	bne.n	80015e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e242      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153c:	d106      	bne.n	800154c <HAL_RCC_OscConfig+0x74>
 800153e:	4b76      	ldr	r3, [pc, #472]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a75      	ldr	r2, [pc, #468]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e01d      	b.n	8001588 <HAL_RCC_OscConfig+0xb0>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x98>
 8001556:	4b70      	ldr	r3, [pc, #448]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6f      	ldr	r2, [pc, #444]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b6d      	ldr	r3, [pc, #436]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a6c      	ldr	r2, [pc, #432]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e00b      	b.n	8001588 <HAL_RCC_OscConfig+0xb0>
 8001570:	4b69      	ldr	r3, [pc, #420]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a68      	ldr	r2, [pc, #416]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b66      	ldr	r3, [pc, #408]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a65      	ldr	r2, [pc, #404]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fcee 	bl	8000f70 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fcea 	bl	8000f70 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e207      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0xc0>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fcda 	bl	8000f70 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fcd6 	bl	8000f70 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1f3      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	4b51      	ldr	r3, [pc, #324]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0xe8>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d063      	beq.n	80016b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ee:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00b      	beq.n	8001612 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fa:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001602:	2b08      	cmp	r3, #8
 8001604:	d11c      	bne.n	8001640 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d116      	bne.n	8001640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001612:	4b41      	ldr	r3, [pc, #260]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x152>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d001      	beq.n	800162a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e1c7      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162a:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4937      	ldr	r1, [pc, #220]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163e:	e03a      	b.n	80016b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d020      	beq.n	800168a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001648:	4b34      	ldr	r3, [pc, #208]	; (800171c <HAL_RCC_OscConfig+0x244>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff fc8f 	bl	8000f70 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff fc8b 	bl	8000f70 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e1a8      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4925      	ldr	r1, [pc, #148]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 8001684:	4313      	orrs	r3, r2
 8001686:	600b      	str	r3, [r1, #0]
 8001688:	e015      	b.n	80016b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <HAL_RCC_OscConfig+0x244>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fc6e 	bl	8000f70 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001698:	f7ff fc6a 	bl	8000f70 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e187      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d036      	beq.n	8001730 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d016      	beq.n	80016f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_RCC_OscConfig+0x248>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff fc4e 	bl	8000f70 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d8:	f7ff fc4a 	bl	8000f70 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e167      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_RCC_OscConfig+0x240>)
 80016ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x200>
 80016f6:	e01b      	b.n	8001730 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_RCC_OscConfig+0x248>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fc37 	bl	8000f70 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	e00e      	b.n	8001724 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff fc33 	bl	8000f70 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d907      	bls.n	8001724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e150      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
 8001718:	40023800 	.word	0x40023800
 800171c:	42470000 	.word	0x42470000
 8001720:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	4b88      	ldr	r3, [pc, #544]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 8001726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1ea      	bne.n	8001706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 8097 	beq.w	800186c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001742:	4b81      	ldr	r3, [pc, #516]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10f      	bne.n	800176e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	4b7d      	ldr	r3, [pc, #500]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a7c      	ldr	r2, [pc, #496]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b7a      	ldr	r3, [pc, #488]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176a:	2301      	movs	r3, #1
 800176c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176e:	4b77      	ldr	r3, [pc, #476]	; (800194c <HAL_RCC_OscConfig+0x474>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001776:	2b00      	cmp	r3, #0
 8001778:	d118      	bne.n	80017ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177a:	4b74      	ldr	r3, [pc, #464]	; (800194c <HAL_RCC_OscConfig+0x474>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a73      	ldr	r2, [pc, #460]	; (800194c <HAL_RCC_OscConfig+0x474>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001786:	f7ff fbf3 	bl	8000f70 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178e:	f7ff fbef 	bl	8000f70 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e10c      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	4b6a      	ldr	r3, [pc, #424]	; (800194c <HAL_RCC_OscConfig+0x474>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x2ea>
 80017b4:	4b64      	ldr	r3, [pc, #400]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b8:	4a63      	ldr	r2, [pc, #396]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6713      	str	r3, [r2, #112]	; 0x70
 80017c0:	e01c      	b.n	80017fc <HAL_RCC_OscConfig+0x324>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b05      	cmp	r3, #5
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x30c>
 80017ca:	4b5f      	ldr	r3, [pc, #380]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	4a5e      	ldr	r2, [pc, #376]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6713      	str	r3, [r2, #112]	; 0x70
 80017d6:	4b5c      	ldr	r3, [pc, #368]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017da:	4a5b      	ldr	r2, [pc, #364]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6713      	str	r3, [r2, #112]	; 0x70
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0x324>
 80017e4:	4b58      	ldr	r3, [pc, #352]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	4a57      	ldr	r2, [pc, #348]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	6713      	str	r3, [r2, #112]	; 0x70
 80017f0:	4b55      	ldr	r3, [pc, #340]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	4a54      	ldr	r2, [pc, #336]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 80017f6:	f023 0304 	bic.w	r3, r3, #4
 80017fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d015      	beq.n	8001830 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff fbb4 	bl	8000f70 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180a:	e00a      	b.n	8001822 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7ff fbb0 	bl	8000f70 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e0cb      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001822:	4b49      	ldr	r3, [pc, #292]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0ee      	beq.n	800180c <HAL_RCC_OscConfig+0x334>
 800182e:	e014      	b.n	800185a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001830:	f7ff fb9e 	bl	8000f70 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001836:	e00a      	b.n	800184e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001838:	f7ff fb9a 	bl	8000f70 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e0b5      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184e:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1ee      	bne.n	8001838 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800185a:	7dfb      	ldrb	r3, [r7, #23]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d105      	bne.n	800186c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001860:	4b39      	ldr	r3, [pc, #228]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	4a38      	ldr	r2, [pc, #224]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 8001866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80a1 	beq.w	80019b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001876:	4b34      	ldr	r3, [pc, #208]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b08      	cmp	r3, #8
 8001880:	d05c      	beq.n	800193c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d141      	bne.n	800190e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188a:	4b31      	ldr	r3, [pc, #196]	; (8001950 <HAL_RCC_OscConfig+0x478>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fb6e 	bl	8000f70 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff fb6a 	bl	8000f70 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e087      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018aa:	4b27      	ldr	r3, [pc, #156]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69da      	ldr	r2, [r3, #28]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	019b      	lsls	r3, r3, #6
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	085b      	lsrs	r3, r3, #1
 80018ce:	3b01      	subs	r3, #1
 80018d0:	041b      	lsls	r3, r3, #16
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	061b      	lsls	r3, r3, #24
 80018da:	491b      	ldr	r1, [pc, #108]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HAL_RCC_OscConfig+0x478>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7ff fb43 	bl	8000f70 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ee:	f7ff fb3f 	bl	8000f70 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e05c      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0f0      	beq.n	80018ee <HAL_RCC_OscConfig+0x416>
 800190c:	e054      	b.n	80019b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_RCC_OscConfig+0x478>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff fb2c 	bl	8000f70 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff fb28 	bl	8000f70 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e045      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_RCC_OscConfig+0x470>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x444>
 800193a:	e03d      	b.n	80019b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d107      	bne.n	8001954 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e038      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
 8001948:	40023800 	.word	0x40023800
 800194c:	40007000 	.word	0x40007000
 8001950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_RCC_OscConfig+0x4ec>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d028      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d121      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	429a      	cmp	r2, r3
 800197c:	d11a      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001984:	4013      	ands	r3, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800198a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800198c:	4293      	cmp	r3, r2
 800198e:	d111      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	085b      	lsrs	r3, r3, #1
 800199c:	3b01      	subs	r3, #1
 800199e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0cc      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d90c      	bls.n	8001a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0b8      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a1c:	4b59      	ldr	r3, [pc, #356]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a34:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	4a52      	ldr	r2, [pc, #328]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a40:	4b50      	ldr	r3, [pc, #320]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	494d      	ldr	r1, [pc, #308]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d044      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d119      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e07f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d003      	beq.n	8001a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e06f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e067      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa6:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f023 0203 	bic.w	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4934      	ldr	r1, [pc, #208]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab8:	f7ff fa5a 	bl	8000f70 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7ff fa56 	bl	8000f70 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e04f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 020c 	and.w	r2, r3, #12
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1eb      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d20c      	bcs.n	8001b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_RCC_ClockConfig+0x1b8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e032      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4916      	ldr	r1, [pc, #88]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	490e      	ldr	r1, [pc, #56]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b4e:	f000 f821 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	490a      	ldr	r1, [pc, #40]	; (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	5ccb      	ldrb	r3, [r1, r3]
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f85a 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00
 8001b84:	40023800 	.word	0x40023800
 8001b88:	08003efc 	.word	0x08003efc
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b98:	b094      	sub	sp, #80	; 0x50
 8001b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bac:	4b79      	ldr	r3, [pc, #484]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	f200 80e1 	bhi.w	8001d80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d003      	beq.n	8001bce <HAL_RCC_GetSysClockFreq+0x3a>
 8001bc6:	e0db      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bc8:	4b73      	ldr	r3, [pc, #460]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bcc:	e0db      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bce:	4b73      	ldr	r3, [pc, #460]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x208>)
 8001bd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bd2:	e0d8      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd4:	4b6f      	ldr	r3, [pc, #444]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bdc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bde:	4b6d      	ldr	r3, [pc, #436]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d063      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bea:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	099b      	lsrs	r3, r3, #6
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8001bfe:	2300      	movs	r3, #0
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
 8001c02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c06:	4622      	mov	r2, r4
 8001c08:	462b      	mov	r3, r5
 8001c0a:	f04f 0000 	mov.w	r0, #0
 8001c0e:	f04f 0100 	mov.w	r1, #0
 8001c12:	0159      	lsls	r1, r3, #5
 8001c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c18:	0150      	lsls	r0, r2, #5
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4621      	mov	r1, r4
 8001c20:	1a51      	subs	r1, r2, r1
 8001c22:	6139      	str	r1, [r7, #16]
 8001c24:	4629      	mov	r1, r5
 8001c26:	eb63 0301 	sbc.w	r3, r3, r1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c38:	4659      	mov	r1, fp
 8001c3a:	018b      	lsls	r3, r1, #6
 8001c3c:	4651      	mov	r1, sl
 8001c3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c42:	4651      	mov	r1, sl
 8001c44:	018a      	lsls	r2, r1, #6
 8001c46:	4651      	mov	r1, sl
 8001c48:	ebb2 0801 	subs.w	r8, r2, r1
 8001c4c:	4659      	mov	r1, fp
 8001c4e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c66:	4690      	mov	r8, r2
 8001c68:	4699      	mov	r9, r3
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	eb18 0303 	adds.w	r3, r8, r3
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	462b      	mov	r3, r5
 8001c74:	eb49 0303 	adc.w	r3, r9, r3
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c86:	4629      	mov	r1, r5
 8001c88:	024b      	lsls	r3, r1, #9
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c90:	4621      	mov	r1, r4
 8001c92:	024a      	lsls	r2, r1, #9
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ca0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ca4:	f7fe faa4 	bl	80001f0 <__aeabi_uldivmod>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4613      	mov	r3, r2
 8001cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cb0:	e058      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb2:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	099b      	lsrs	r3, r3, #6
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cc2:	623b      	str	r3, [r7, #32]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ccc:	4642      	mov	r2, r8
 8001cce:	464b      	mov	r3, r9
 8001cd0:	f04f 0000 	mov.w	r0, #0
 8001cd4:	f04f 0100 	mov.w	r1, #0
 8001cd8:	0159      	lsls	r1, r3, #5
 8001cda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cde:	0150      	lsls	r0, r2, #5
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4641      	mov	r1, r8
 8001ce6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cea:	4649      	mov	r1, r9
 8001cec:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cfc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d04:	ebb2 040a 	subs.w	r4, r2, sl
 8001d08:	eb63 050b 	sbc.w	r5, r3, fp
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	00eb      	lsls	r3, r5, #3
 8001d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d1a:	00e2      	lsls	r2, r4, #3
 8001d1c:	4614      	mov	r4, r2
 8001d1e:	461d      	mov	r5, r3
 8001d20:	4643      	mov	r3, r8
 8001d22:	18e3      	adds	r3, r4, r3
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	464b      	mov	r3, r9
 8001d28:	eb45 0303 	adc.w	r3, r5, r3
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	028b      	lsls	r3, r1, #10
 8001d3e:	4621      	mov	r1, r4
 8001d40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d44:	4621      	mov	r1, r4
 8001d46:	028a      	lsls	r2, r1, #10
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	61fa      	str	r2, [r7, #28]
 8001d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d58:	f7fe fa4a 	bl	80001f0 <__aeabi_uldivmod>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4613      	mov	r3, r2
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	0c1b      	lsrs	r3, r3, #16
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d7e:	e002      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3750      	adds	r7, #80	; 0x50
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	00f42400 	.word	0x00f42400
 8001d9c:	007a1200 	.word	0x007a1200

08001da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000000 	.word	0x20000000

08001db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dbc:	f7ff fff0 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0a9b      	lsrs	r3, r3, #10
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4903      	ldr	r1, [pc, #12]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	08003f0c 	.word	0x08003f0c

08001de0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	220f      	movs	r2, #15
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_GetClockConfig+0x5c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	08db      	lsrs	r3, r3, #3
 8001e1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_RCC_GetClockConfig+0x60>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 020f 	and.w	r2, r3, #15
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	601a      	str	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e041      	b.n	8001eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f839 	bl	8001ee2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f000 f9c0 	bl	8002208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d001      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e04e      	b.n	8001fae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <HAL_TIM_Base_Start_IT+0xc4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d022      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3a:	d01d      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d018      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d013      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1c      	ldr	r2, [pc, #112]	; (8001fc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00e      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <HAL_TIM_Base_Start_IT+0xd4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d009      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d004      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x80>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d111      	bne.n	8001f9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d010      	beq.n	8001fac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f9a:	e007      	b.n	8001fac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	40000400 	.word	0x40000400
 8001fc4:	40000800 	.word	0x40000800
 8001fc8:	40000c00 	.word	0x40000c00
 8001fcc:	40010400 	.word	0x40010400
 8001fd0:	40014000 	.word	0x40014000
 8001fd4:	40001800 	.word	0x40001800

08001fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d020      	beq.n	800203c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01b      	beq.n	800203c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0202 	mvn.w	r2, #2
 800200c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8d2 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f8c4 	bl	80021b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f8d5 	bl	80021e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d020      	beq.n	8002088 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01b      	beq.n	8002088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0204 	mvn.w	r2, #4
 8002058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2202      	movs	r2, #2
 800205e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f8ac 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f89e 	bl	80021b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f8af 	bl	80021e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d020      	beq.n	80020d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0208 	mvn.w	r2, #8
 80020a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2204      	movs	r2, #4
 80020aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f886 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 80020c0:	e005      	b.n	80020ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f878 	bl	80021b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f889 	bl	80021e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d020      	beq.n	8002120 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01b      	beq.n	8002120 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0210 	mvn.w	r2, #16
 80020f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2208      	movs	r2, #8
 80020f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f860 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f852 	bl	80021b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f863 	bl	80021e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00c      	beq.n	8002144 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0201 	mvn.w	r2, #1
 800213c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe fd32 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00c      	beq.n	8002168 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f906 	bl	8002374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00c      	beq.n	800218c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f834 	bl	80021f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00c      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d007      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0220 	mvn.w	r2, #32
 80021a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f8d8 	bl	8002360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a46      	ldr	r2, [pc, #280]	; (8002334 <TIM_Base_SetConfig+0x12c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d013      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002226:	d00f      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a43      	ldr	r2, [pc, #268]	; (8002338 <TIM_Base_SetConfig+0x130>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00b      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a42      	ldr	r2, [pc, #264]	; (800233c <TIM_Base_SetConfig+0x134>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d007      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a41      	ldr	r2, [pc, #260]	; (8002340 <TIM_Base_SetConfig+0x138>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a40      	ldr	r2, [pc, #256]	; (8002344 <TIM_Base_SetConfig+0x13c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d108      	bne.n	800225a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a35      	ldr	r2, [pc, #212]	; (8002334 <TIM_Base_SetConfig+0x12c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d02b      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002268:	d027      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a32      	ldr	r2, [pc, #200]	; (8002338 <TIM_Base_SetConfig+0x130>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d023      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a31      	ldr	r2, [pc, #196]	; (800233c <TIM_Base_SetConfig+0x134>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01f      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a30      	ldr	r2, [pc, #192]	; (8002340 <TIM_Base_SetConfig+0x138>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d01b      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <TIM_Base_SetConfig+0x13c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d017      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a2e      	ldr	r2, [pc, #184]	; (8002348 <TIM_Base_SetConfig+0x140>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a2d      	ldr	r2, [pc, #180]	; (800234c <TIM_Base_SetConfig+0x144>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00f      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a2c      	ldr	r2, [pc, #176]	; (8002350 <TIM_Base_SetConfig+0x148>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00b      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a2b      	ldr	r2, [pc, #172]	; (8002354 <TIM_Base_SetConfig+0x14c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a2a      	ldr	r2, [pc, #168]	; (8002358 <TIM_Base_SetConfig+0x150>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d003      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <TIM_Base_SetConfig+0x154>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d108      	bne.n	80022cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a10      	ldr	r2, [pc, #64]	; (8002334 <TIM_Base_SetConfig+0x12c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d003      	beq.n	8002300 <TIM_Base_SetConfig+0xf8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <TIM_Base_SetConfig+0x13c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d103      	bne.n	8002308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b01      	cmp	r3, #1
 8002318:	d105      	bne.n	8002326 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f023 0201 	bic.w	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]
  }
}
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40010000 	.word	0x40010000
 8002338:	40000400 	.word	0x40000400
 800233c:	40000800 	.word	0x40000800
 8002340:	40000c00 	.word	0x40000c00
 8002344:	40010400 	.word	0x40010400
 8002348:	40014000 	.word	0x40014000
 800234c:	40014400 	.word	0x40014400
 8002350:	40014800 	.word	0x40014800
 8002354:	40001800 	.word	0x40001800
 8002358:	40001c00 	.word	0x40001c00
 800235c:	40002000 	.word	0x40002000

08002360 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f103 0208 	add.w	r2, r3, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f103 0208 	add.w	r2, r3, #8
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f103 0208 	add.w	r2, r3, #8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6892      	ldr	r2, [r2, #8]
 80023f8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6852      	ldr	r2, [r2, #4]
 8002402:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	429a      	cmp	r2, r3
 800240c:	d103      	bne.n	8002416 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	1e5a      	subs	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002436:	b580      	push	{r7, lr}
 8002438:	b08c      	sub	sp, #48	; 0x30
 800243a:	af04      	add	r7, sp, #16
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fea6 	bl	800319c <pvPortMalloc>
 8002450:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d013      	beq.n	8002480 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002458:	2058      	movs	r0, #88	; 0x58
 800245a:	f000 fe9f 	bl	800319c <pvPortMalloc>
 800245e:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002466:	2258      	movs	r2, #88	; 0x58
 8002468:	2100      	movs	r1, #0
 800246a:	69f8      	ldr	r0, [r7, #28]
 800246c:	f001 fa58 	bl	8003920 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
 8002476:	e005      	b.n	8002484 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002478:	6978      	ldr	r0, [r7, #20]
 800247a:	f000 ff49 	bl	8003310 <vPortFree>
 800247e:	e001      	b.n	8002484 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d013      	beq.n	80024b2 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800248a:	88fa      	ldrh	r2, [r7, #6]
 800248c:	2300      	movs	r3, #0
 800248e:	9303      	str	r3, [sp, #12]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f80e 	bl	80024c2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80024a6:	69f8      	ldr	r0, [r7, #28]
 80024a8:	f000 f89a 	bl	80025e0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80024ac:	2301      	movs	r3, #1
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	e002      	b.n	80024b8 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80024b8:	69bb      	ldr	r3, [r7, #24]
    }
 80024ba:	4618      	mov	r0, r3
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b088      	sub	sp, #32
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	461a      	mov	r2, r3
 80024da:	21a5      	movs	r1, #165	; 0xa5
 80024dc:	f001 fa20 	bl	8003920 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024ea:	3b01      	subs	r3, #1
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	f023 0307 	bic.w	r3, r3, #7
 80024f8:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	617b      	str	r3, [r7, #20]
    }
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01e      	beq.n	800255e <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	e012      	b.n	800254c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	4413      	add	r3, r2
 800252c:	7819      	ldrb	r1, [r3, #0]
 800252e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	3334      	adds	r3, #52	; 0x34
 8002536:	460a      	mov	r2, r1
 8002538:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d006      	beq.n	8002554 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3301      	adds	r3, #1
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b09      	cmp	r3, #9
 8002550:	d9e9      	bls.n	8002526 <prvInitialiseNewTask+0x64>
 8002552:	e000      	b.n	8002556 <prvInitialiseNewTask+0x94>
            {
                break;
 8002554:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	2b04      	cmp	r3, #4
 8002562:	d90a      	bls.n	800257a <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	613b      	str	r3, [r7, #16]
    }
 8002576:	bf00      	nop
 8002578:	e7fe      	b.n	8002578 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	2b04      	cmp	r3, #4
 800257e:	d901      	bls.n	8002584 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002580:	2304      	movs	r3, #4
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002588:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800258e:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	3304      	adds	r3, #4
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff17 	bl	80023c8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	3318      	adds	r3, #24
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff12 	bl	80023c8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ac:	f1c3 0205 	rsb	r2, r3, #5
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	68f9      	ldr	r1, [r7, #12]
 80025be:	69b8      	ldr	r0, [r7, #24]
 80025c0:	f000 fbda 	bl	8002d78 <pxPortInitialiseStack>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025d6:	bf00      	nop
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80025e8:	f000 fcf6 	bl	8002fd8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80025ec:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <prvAddNewTaskToReadyList+0xf8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	4a39      	ldr	r2, [pc, #228]	; (80026d8 <prvAddNewTaskToReadyList+0xf8>)
 80025f4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80025f6:	4b39      	ldr	r3, [pc, #228]	; (80026dc <prvAddNewTaskToReadyList+0xfc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80025fe:	4a37      	ldr	r2, [pc, #220]	; (80026dc <prvAddNewTaskToReadyList+0xfc>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002604:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <prvAddNewTaskToReadyList+0xf8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d110      	bne.n	800262e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800260c:	f000 fb1a 	bl	8002c44 <prvInitialiseTaskLists>
 8002610:	e00d      	b.n	800262e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002612:	4b33      	ldr	r3, [pc, #204]	; (80026e0 <prvAddNewTaskToReadyList+0x100>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800261a:	4b30      	ldr	r3, [pc, #192]	; (80026dc <prvAddNewTaskToReadyList+0xfc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	429a      	cmp	r2, r3
 8002626:	d802      	bhi.n	800262e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002628:	4a2c      	ldr	r2, [pc, #176]	; (80026dc <prvAddNewTaskToReadyList+0xfc>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800262e:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <prvAddNewTaskToReadyList+0x104>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3301      	adds	r3, #1
 8002634:	4a2b      	ldr	r2, [pc, #172]	; (80026e4 <prvAddNewTaskToReadyList+0x104>)
 8002636:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002638:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <prvAddNewTaskToReadyList+0x104>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	2201      	movs	r2, #1
 8002646:	409a      	lsls	r2, r3
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <prvAddNewTaskToReadyList+0x108>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4313      	orrs	r3, r2
 800264e:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <prvAddNewTaskToReadyList+0x108>)
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002656:	4925      	ldr	r1, [pc, #148]	; (80026ec <prvAddNewTaskToReadyList+0x10c>)
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	3304      	adds	r3, #4
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	3204      	adds	r2, #4
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	1d1a      	adds	r2, r3, #4
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4a15      	ldr	r2, [pc, #84]	; (80026ec <prvAddNewTaskToReadyList+0x10c>)
 8002696:	441a      	add	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	615a      	str	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a0:	4912      	ldr	r1, [pc, #72]	; (80026ec <prvAddNewTaskToReadyList+0x10c>)
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	1c59      	adds	r1, r3, #1
 80026b0:	480e      	ldr	r0, [pc, #56]	; (80026ec <prvAddNewTaskToReadyList+0x10c>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4403      	add	r3, r0
 80026bc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80026be:	f000 fcbb 	bl	8003038 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80026c2:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <prvAddNewTaskToReadyList+0x100>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026ca:	4b04      	ldr	r3, [pc, #16]	; (80026dc <prvAddNewTaskToReadyList+0xfc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200001b0 	.word	0x200001b0
 80026dc:	200000d8 	.word	0x200000d8
 80026e0:	200001bc 	.word	0x200001bc
 80026e4:	200001cc 	.word	0x200001cc
 80026e8:	200001b8 	.word	0x200001b8
 80026ec:	200000dc 	.word	0x200000dc

080026f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80026f6:	4b1d      	ldr	r3, [pc, #116]	; (800276c <vTaskStartScheduler+0x7c>)
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	2300      	movs	r3, #0
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2300      	movs	r3, #0
 8002700:	2282      	movs	r2, #130	; 0x82
 8002702:	491b      	ldr	r1, [pc, #108]	; (8002770 <vTaskStartScheduler+0x80>)
 8002704:	481b      	ldr	r0, [pc, #108]	; (8002774 <vTaskStartScheduler+0x84>)
 8002706:	f7ff fe96 	bl	8002436 <xTaskCreate>
 800270a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d116      	bne.n	8002740 <vTaskStartScheduler+0x50>
        __asm volatile
 8002712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002716:	f383 8811 	msr	BASEPRI, r3
 800271a:	f3bf 8f6f 	isb	sy
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	60bb      	str	r3, [r7, #8]
    }
 8002724:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <vTaskStartScheduler+0x88>)
 8002728:	f04f 32ff 	mov.w	r2, #4294967295
 800272c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <vTaskStartScheduler+0x8c>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <vTaskStartScheduler+0x90>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800273a:	f000 fbab 	bl	8002e94 <xPortStartScheduler>
 800273e:	e00e      	b.n	800275e <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002746:	d10a      	bne.n	800275e <vTaskStartScheduler+0x6e>
        __asm volatile
 8002748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	607b      	str	r3, [r7, #4]
    }
 800275a:	bf00      	nop
 800275c:	e7fe      	b.n	800275c <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <vTaskStartScheduler+0x94>)
 8002760:	681b      	ldr	r3, [r3, #0]
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200001d4 	.word	0x200001d4
 8002770:	08003ef4 	.word	0x08003ef4
 8002774:	08002c21 	.word	0x08002c21
 8002778:	200001d0 	.word	0x200001d0
 800277c:	200001bc 	.word	0x200001bc
 8002780:	200001b4 	.word	0x200001b4
 8002784:	2000000c 	.word	0x2000000c

08002788 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <vTaskSuspendAll+0x18>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	4a03      	ldr	r2, [pc, #12]	; (80027a0 <vTaskSuspendAll+0x18>)
 8002794:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	200001d8 	.word	0x200001d8

080027a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80027b2:	4b6b      	ldr	r3, [pc, #428]	; (8002960 <xTaskResumeAll+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10a      	bne.n	80027d0 <xTaskResumeAll+0x2c>
        __asm volatile
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	607b      	str	r3, [r7, #4]
    }
 80027cc:	bf00      	nop
 80027ce:	e7fe      	b.n	80027ce <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80027d0:	f000 fc02 	bl	8002fd8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80027d4:	4b62      	ldr	r3, [pc, #392]	; (8002960 <xTaskResumeAll+0x1bc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3b01      	subs	r3, #1
 80027da:	4a61      	ldr	r2, [pc, #388]	; (8002960 <xTaskResumeAll+0x1bc>)
 80027dc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027de:	4b60      	ldr	r3, [pc, #384]	; (8002960 <xTaskResumeAll+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 80b4 	bne.w	8002950 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027e8:	4b5e      	ldr	r3, [pc, #376]	; (8002964 <xTaskResumeAll+0x1c0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80af 	beq.w	8002950 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027f2:	e08a      	b.n	800290a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027f4:	4b5c      	ldr	r3, [pc, #368]	; (8002968 <xTaskResumeAll+0x1c4>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	6a12      	ldr	r2, [r2, #32]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	69d2      	ldr	r2, [r2, #28]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3318      	adds	r3, #24
 800281e:	429a      	cmp	r2, r3
 8002820:	d103      	bne.n	800282a <xTaskResumeAll+0x86>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	2200      	movs	r2, #0
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	1e5a      	subs	r2, r3, #1
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	68d2      	ldr	r2, [r2, #12]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	6892      	ldr	r2, [r2, #8]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	3304      	adds	r3, #4
 800285c:	429a      	cmp	r2, r3
 800285e:	d103      	bne.n	8002868 <xTaskResumeAll+0xc4>
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2200      	movs	r2, #0
 800286c:	615a      	str	r2, [r3, #20]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	1e5a      	subs	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	2201      	movs	r2, #1
 800287e:	409a      	lsls	r2, r3
 8002880:	4b3a      	ldr	r3, [pc, #232]	; (800296c <xTaskResumeAll+0x1c8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4313      	orrs	r3, r2
 8002886:	4a39      	ldr	r2, [pc, #228]	; (800296c <xTaskResumeAll+0x1c8>)
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288e:	4938      	ldr	r1, [pc, #224]	; (8002970 <xTaskResumeAll+0x1cc>)
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	3304      	adds	r3, #4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	3204      	adds	r2, #4
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	1d1a      	adds	r2, r3, #4
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4a28      	ldr	r2, [pc, #160]	; (8002970 <xTaskResumeAll+0x1cc>)
 80028ce:	441a      	add	r2, r3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	615a      	str	r2, [r3, #20]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d8:	4925      	ldr	r1, [pc, #148]	; (8002970 <xTaskResumeAll+0x1cc>)
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	1c59      	adds	r1, r3, #1
 80028e8:	4821      	ldr	r0, [pc, #132]	; (8002970 <xTaskResumeAll+0x1cc>)
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4403      	add	r3, r0
 80028f4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fa:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <xTaskResumeAll+0x1d0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	429a      	cmp	r2, r3
 8002902:	d302      	bcc.n	800290a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002904:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <xTaskResumeAll+0x1d4>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800290a:	4b17      	ldr	r3, [pc, #92]	; (8002968 <xTaskResumeAll+0x1c4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f47f af70 	bne.w	80027f4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800291a:	f000 fa11 	bl	8002d40 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800291e:	4b17      	ldr	r3, [pc, #92]	; (800297c <xTaskResumeAll+0x1d8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800292a:	f000 f829 	bl	8002980 <xTaskIncrementTick>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <xTaskResumeAll+0x1d4>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	3b01      	subs	r3, #1
 800293e:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f1      	bne.n	800292a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <xTaskResumeAll+0x1d8>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800294c:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <xTaskResumeAll+0x1d4>)
 800294e:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002950:	f000 fb72 	bl	8003038 <vPortExitCritical>

    return xAlreadyYielded;
 8002954:	697b      	ldr	r3, [r7, #20]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200001d8 	.word	0x200001d8
 8002964:	200001b0 	.word	0x200001b0
 8002968:	20000170 	.word	0x20000170
 800296c:	200001b8 	.word	0x200001b8
 8002970:	200000dc 	.word	0x200000dc
 8002974:	200000d8 	.word	0x200000d8
 8002978:	200001c4 	.word	0x200001c4
 800297c:	200001c0 	.word	0x200001c0

08002980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800298a:	4b6e      	ldr	r3, [pc, #440]	; (8002b44 <xTaskIncrementTick+0x1c4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f040 80cd 	bne.w	8002b2e <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002994:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <xTaskIncrementTick+0x1c8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3301      	adds	r3, #1
 800299a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800299c:	4a6a      	ldr	r2, [pc, #424]	; (8002b48 <xTaskIncrementTick+0x1c8>)
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d120      	bne.n	80029ea <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80029a8:	4b68      	ldr	r3, [pc, #416]	; (8002b4c <xTaskIncrementTick+0x1cc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <xTaskIncrementTick+0x48>
        __asm volatile
 80029b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b6:	f383 8811 	msr	BASEPRI, r3
 80029ba:	f3bf 8f6f 	isb	sy
 80029be:	f3bf 8f4f 	dsb	sy
 80029c2:	607b      	str	r3, [r7, #4]
    }
 80029c4:	bf00      	nop
 80029c6:	e7fe      	b.n	80029c6 <xTaskIncrementTick+0x46>
 80029c8:	4b60      	ldr	r3, [pc, #384]	; (8002b4c <xTaskIncrementTick+0x1cc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	4b60      	ldr	r3, [pc, #384]	; (8002b50 <xTaskIncrementTick+0x1d0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a5e      	ldr	r2, [pc, #376]	; (8002b4c <xTaskIncrementTick+0x1cc>)
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4a5e      	ldr	r2, [pc, #376]	; (8002b50 <xTaskIncrementTick+0x1d0>)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b5d      	ldr	r3, [pc, #372]	; (8002b54 <xTaskIncrementTick+0x1d4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3301      	adds	r3, #1
 80029e2:	4a5c      	ldr	r2, [pc, #368]	; (8002b54 <xTaskIncrementTick+0x1d4>)
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	f000 f9ab 	bl	8002d40 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80029ea:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <xTaskIncrementTick+0x1d8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a3a      	ldr	r2, [r7, #32]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	f0c0 80a1 	bcc.w	8002b38 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029f6:	4b55      	ldr	r3, [pc, #340]	; (8002b4c <xTaskIncrementTick+0x1cc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d104      	bne.n	8002a0a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a00:	4b55      	ldr	r3, [pc, #340]	; (8002b58 <xTaskIncrementTick+0x1d8>)
 8002a02:	f04f 32ff 	mov.w	r2, #4294967295
 8002a06:	601a      	str	r2, [r3, #0]
                    break;
 8002a08:	e096      	b.n	8002b38 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a0a:	4b50      	ldr	r3, [pc, #320]	; (8002b4c <xTaskIncrementTick+0x1cc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002a1a:	6a3a      	ldr	r2, [r7, #32]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d203      	bcs.n	8002a2a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a22:	4a4d      	ldr	r2, [pc, #308]	; (8002b58 <xTaskIncrementTick+0x1d8>)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002a28:	e086      	b.n	8002b38 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	68d2      	ldr	r2, [r2, #12]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	6892      	ldr	r2, [r2, #8]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d103      	bne.n	8002a58 <xTaskIncrementTick+0xd8>
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	615a      	str	r2, [r3, #20]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	1e5a      	subs	r2, r3, #1
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01e      	beq.n	8002aae <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	6a12      	ldr	r2, [r2, #32]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	69d2      	ldr	r2, [r2, #28]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	3318      	adds	r3, #24
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d103      	bne.n	8002a9e <xTaskIncrementTick+0x11e>
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	6a1a      	ldr	r2, [r3, #32]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1e5a      	subs	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	4b29      	ldr	r3, [pc, #164]	; (8002b5c <xTaskIncrementTick+0x1dc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	4a27      	ldr	r2, [pc, #156]	; (8002b5c <xTaskIncrementTick+0x1dc>)
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac4:	4926      	ldr	r1, [pc, #152]	; (8002b60 <xTaskIncrementTick+0x1e0>)
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	60da      	str	r2, [r3, #12]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	3204      	adds	r2, #4
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	1d1a      	adds	r2, r3, #4
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4a17      	ldr	r2, [pc, #92]	; (8002b60 <xTaskIncrementTick+0x1e0>)
 8002b04:	441a      	add	r2, r3
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	615a      	str	r2, [r3, #20]
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0e:	4914      	ldr	r1, [pc, #80]	; (8002b60 <xTaskIncrementTick+0x1e0>)
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	1c59      	adds	r1, r3, #1
 8002b1e:	4810      	ldr	r0, [pc, #64]	; (8002b60 <xTaskIncrementTick+0x1e0>)
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4403      	add	r3, r0
 8002b2a:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b2c:	e763      	b.n	80029f6 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <xTaskIncrementTick+0x1e4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3301      	adds	r3, #1
 8002b34:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <xTaskIncrementTick+0x1e4>)
 8002b36:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3728      	adds	r7, #40	; 0x28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200001d8 	.word	0x200001d8
 8002b48:	200001b4 	.word	0x200001b4
 8002b4c:	20000168 	.word	0x20000168
 8002b50:	2000016c 	.word	0x2000016c
 8002b54:	200001c8 	.word	0x200001c8
 8002b58:	200001d0 	.word	0x200001d0
 8002b5c:	200001b8 	.word	0x200001b8
 8002b60:	200000dc 	.word	0x200000dc
 8002b64:	200001c0 	.word	0x200001c0

08002b68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b6e:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <vTaskSwitchContext+0xa4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <vTaskSwitchContext+0xa8>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002b7c:	e03f      	b.n	8002bfe <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002b7e:	4b24      	ldr	r3, [pc, #144]	; (8002c10 <vTaskSwitchContext+0xa8>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b84:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <vTaskSwitchContext+0xac>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002b92:	7afb      	ldrb	r3, [r7, #11]
 8002b94:	f1c3 031f 	rsb	r3, r3, #31
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	491f      	ldr	r1, [pc, #124]	; (8002c18 <vTaskSwitchContext+0xb0>)
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	607b      	str	r3, [r7, #4]
    }
 8002bc0:	bf00      	nop
 8002bc2:	e7fe      	b.n	8002bc2 <vTaskSwitchContext+0x5a>
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <vTaskSwitchContext+0xb0>)
 8002bd0:	4413      	add	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	3308      	adds	r3, #8
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d104      	bne.n	8002bf4 <vTaskSwitchContext+0x8c>
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <vTaskSwitchContext+0xb4>)
 8002bfc:	6013      	str	r3, [r2, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	200001d8 	.word	0x200001d8
 8002c10:	200001c4 	.word	0x200001c4
 8002c14:	200001b8 	.word	0x200001b8
 8002c18:	200000dc 	.word	0x200000dc
 8002c1c:	200000d8 	.word	0x200000d8

08002c20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002c28:	f000 f84c 	bl	8002cc4 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <prvIdleTask+0x20>)
 8002c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002c3c:	e7f4      	b.n	8002c28 <prvIdleTask+0x8>
 8002c3e:	bf00      	nop
 8002c40:	e000ed04 	.word	0xe000ed04

08002c44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	e00c      	b.n	8002c6a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <prvInitialiseTaskLists+0x60>)
 8002c5c:	4413      	add	r3, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fb92 	bl	8002388 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3301      	adds	r3, #1
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d9ef      	bls.n	8002c50 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002c70:	480d      	ldr	r0, [pc, #52]	; (8002ca8 <prvInitialiseTaskLists+0x64>)
 8002c72:	f7ff fb89 	bl	8002388 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002c76:	480d      	ldr	r0, [pc, #52]	; (8002cac <prvInitialiseTaskLists+0x68>)
 8002c78:	f7ff fb86 	bl	8002388 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002c7c:	480c      	ldr	r0, [pc, #48]	; (8002cb0 <prvInitialiseTaskLists+0x6c>)
 8002c7e:	f7ff fb83 	bl	8002388 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002c82:	480c      	ldr	r0, [pc, #48]	; (8002cb4 <prvInitialiseTaskLists+0x70>)
 8002c84:	f7ff fb80 	bl	8002388 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002c88:	480b      	ldr	r0, [pc, #44]	; (8002cb8 <prvInitialiseTaskLists+0x74>)
 8002c8a:	f7ff fb7d 	bl	8002388 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <prvInitialiseTaskLists+0x78>)
 8002c90:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <prvInitialiseTaskLists+0x64>)
 8002c92:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c94:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <prvInitialiseTaskLists+0x7c>)
 8002c96:	4a05      	ldr	r2, [pc, #20]	; (8002cac <prvInitialiseTaskLists+0x68>)
 8002c98:	601a      	str	r2, [r3, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200000dc 	.word	0x200000dc
 8002ca8:	20000140 	.word	0x20000140
 8002cac:	20000154 	.word	0x20000154
 8002cb0:	20000170 	.word	0x20000170
 8002cb4:	20000184 	.word	0x20000184
 8002cb8:	2000019c 	.word	0x2000019c
 8002cbc:	20000168 	.word	0x20000168
 8002cc0:	2000016c 	.word	0x2000016c

08002cc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cca:	e019      	b.n	8002d00 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002ccc:	f000 f984 	bl	8002fd8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <prvCheckTasksWaitingTermination+0x50>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fb80 	bl	80023e2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <prvCheckTasksWaitingTermination+0x54>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <prvCheckTasksWaitingTermination+0x54>)
 8002cea:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <prvCheckTasksWaitingTermination+0x58>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <prvCheckTasksWaitingTermination+0x58>)
 8002cf4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002cf6:	f000 f99f 	bl	8003038 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f810 	bl	8002d20 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <prvCheckTasksWaitingTermination+0x58>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e1      	bne.n	8002ccc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000184 	.word	0x20000184
 8002d18:	200001b0 	.word	0x200001b0
 8002d1c:	20000198 	.word	0x20000198

08002d20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 faef 	bl	8003310 <vPortFree>
            vPortFree( pxTCB );
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 faec 	bl	8003310 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <prvResetNextTaskUnblockTime+0x30>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d104      	bne.n	8002d58 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <prvResetNextTaskUnblockTime+0x34>)
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d56:	e005      	b.n	8002d64 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <prvResetNextTaskUnblockTime+0x30>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <prvResetNextTaskUnblockTime+0x34>)
 8002d62:	6013      	str	r3, [r2, #0]
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000168 	.word	0x20000168
 8002d74:	200001d0 	.word	0x200001d0

08002d78 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3b04      	subs	r3, #4
 8002d88:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3b04      	subs	r3, #4
 8002d96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f023 0201 	bic.w	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	3b04      	subs	r3, #4
 8002da6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002da8:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <pxPortInitialiseStack+0x64>)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3b14      	subs	r3, #20
 8002db2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3b04      	subs	r3, #4
 8002dbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f06f 0202 	mvn.w	r2, #2
 8002dc6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3b20      	subs	r3, #32
 8002dcc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002dce:	68fb      	ldr	r3, [r7, #12]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	08002de1 	.word	0x08002de1

08002de0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <prvTaskExitError+0x54>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d00a      	beq.n	8002e0a <prvTaskExitError+0x2a>
        __asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	60fb      	str	r3, [r7, #12]
    }
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <prvTaskExitError+0x28>
        __asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	60bb      	str	r3, [r7, #8]
    }
 8002e1c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002e1e:	bf00      	nop
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0fc      	beq.n	8002e20 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002e26:	bf00      	nop
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	20000010 	.word	0x20000010
	...

08002e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002e40:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <pxCurrentTCBConst2>)
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	6808      	ldr	r0, [r1, #0]
 8002e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e4a:	f380 8809 	msr	PSP, r0
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f380 8811 	msr	BASEPRI, r0
 8002e5a:	4770      	bx	lr
 8002e5c:	f3af 8000 	nop.w

08002e60 <pxCurrentTCBConst2>:
 8002e60:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop

08002e68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002e68:	4808      	ldr	r0, [pc, #32]	; (8002e8c <prvPortStartFirstTask+0x24>)
 8002e6a:	6800      	ldr	r0, [r0, #0]
 8002e6c:	6800      	ldr	r0, [r0, #0]
 8002e6e:	f380 8808 	msr	MSP, r0
 8002e72:	f04f 0000 	mov.w	r0, #0
 8002e76:	f380 8814 	msr	CONTROL, r0
 8002e7a:	b662      	cpsie	i
 8002e7c:	b661      	cpsie	f
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	df00      	svc	0
 8002e88:	bf00      	nop
 8002e8a:	0000      	.short	0x0000
 8002e8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop

08002e94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e9a:	4b46      	ldr	r3, [pc, #280]	; (8002fb4 <xPortStartScheduler+0x120>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a46      	ldr	r2, [pc, #280]	; (8002fb8 <xPortStartScheduler+0x124>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10a      	bne.n	8002eba <xPortStartScheduler+0x26>
        __asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	613b      	str	r3, [r7, #16]
    }
 8002eb6:	bf00      	nop
 8002eb8:	e7fe      	b.n	8002eb8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002eba:	4b3e      	ldr	r3, [pc, #248]	; (8002fb4 <xPortStartScheduler+0x120>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a3f      	ldr	r2, [pc, #252]	; (8002fbc <xPortStartScheduler+0x128>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d10a      	bne.n	8002eda <xPortStartScheduler+0x46>
        __asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	60fb      	str	r3, [r7, #12]
    }
 8002ed6:	bf00      	nop
 8002ed8:	e7fe      	b.n	8002ed8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002eda:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <xPortStartScheduler+0x12c>)
 8002edc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	22ff      	movs	r2, #255	; 0xff
 8002eea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <xPortStartScheduler+0x130>)
 8002f00:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f02:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <xPortStartScheduler+0x134>)
 8002f04:	2207      	movs	r2, #7
 8002f06:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f08:	e009      	b.n	8002f1e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <xPortStartScheduler+0x134>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	4a2d      	ldr	r2, [pc, #180]	; (8002fc8 <xPortStartScheduler+0x134>)
 8002f12:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b80      	cmp	r3, #128	; 0x80
 8002f28:	d0ef      	beq.n	8002f0a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f2a:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <xPortStartScheduler+0x134>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f1c3 0307 	rsb	r3, r3, #7
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d00a      	beq.n	8002f4c <xPortStartScheduler+0xb8>
        __asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	60bb      	str	r3, [r7, #8]
    }
 8002f48:	bf00      	nop
 8002f4a:	e7fe      	b.n	8002f4a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f4c:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <xPortStartScheduler+0x134>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <xPortStartScheduler+0x134>)
 8002f54:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f56:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <xPortStartScheduler+0x134>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f5e:	4a1a      	ldr	r2, [pc, #104]	; (8002fc8 <xPortStartScheduler+0x134>)
 8002f60:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002f6a:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <xPortStartScheduler+0x138>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <xPortStartScheduler+0x138>)
 8002f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <xPortStartScheduler+0x138>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <xPortStartScheduler+0x138>)
 8002f7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002f82:	f000 f8db 	bl	800313c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <xPortStartScheduler+0x13c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002f8c:	f000 f8fa 	bl	8003184 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <xPortStartScheduler+0x140>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <xPortStartScheduler+0x140>)
 8002f96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002f9c:	f7ff ff64 	bl	8002e68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002fa0:	f7ff fde2 	bl	8002b68 <vTaskSwitchContext>
    prvTaskExitError();
 8002fa4:	f7ff ff1c 	bl	8002de0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	e000ed00 	.word	0xe000ed00
 8002fb8:	410fc271 	.word	0x410fc271
 8002fbc:	410fc270 	.word	0x410fc270
 8002fc0:	e000e400 	.word	0xe000e400
 8002fc4:	200001dc 	.word	0x200001dc
 8002fc8:	200001e0 	.word	0x200001e0
 8002fcc:	e000ed20 	.word	0xe000ed20
 8002fd0:	20000010 	.word	0x20000010
 8002fd4:	e000ef34 	.word	0xe000ef34

08002fd8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
        __asm volatile
 8002fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	607b      	str	r3, [r7, #4]
    }
 8002ff0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <vPortEnterCritical+0x58>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <vPortEnterCritical+0x58>)
 8002ffa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <vPortEnterCritical+0x58>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d10f      	bne.n	8003024 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <vPortEnterCritical+0x5c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <vPortEnterCritical+0x4c>
        __asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	603b      	str	r3, [r7, #0]
    }
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <vPortEnterCritical+0x4a>
    }
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	20000010 	.word	0x20000010
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <vPortExitCritical+0x50>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <vPortExitCritical+0x24>
        __asm volatile
 8003046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	607b      	str	r3, [r7, #4]
    }
 8003058:	bf00      	nop
 800305a:	e7fe      	b.n	800305a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <vPortExitCritical+0x50>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3b01      	subs	r3, #1
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <vPortExitCritical+0x50>)
 8003064:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <vPortExitCritical+0x50>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <vPortExitCritical+0x42>
 800306e:	2300      	movs	r3, #0
 8003070:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003078:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000010 	.word	0x20000010
 800308c:	00000000 	.word	0x00000000

08003090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003090:	f3ef 8009 	mrs	r0, PSP
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <pxCurrentTCBConst>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	f01e 0f10 	tst.w	lr, #16
 80030a0:	bf08      	it	eq
 80030a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80030a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030aa:	6010      	str	r0, [r2, #0]
 80030ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80030b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80030b4:	f380 8811 	msr	BASEPRI, r0
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f7ff fd52 	bl	8002b68 <vTaskSwitchContext>
 80030c4:	f04f 0000 	mov.w	r0, #0
 80030c8:	f380 8811 	msr	BASEPRI, r0
 80030cc:	bc09      	pop	{r0, r3}
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	6808      	ldr	r0, [r1, #0]
 80030d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d6:	f01e 0f10 	tst.w	lr, #16
 80030da:	bf08      	it	eq
 80030dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80030e0:	f380 8809 	msr	PSP, r0
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	f3af 8000 	nop.w

080030f0 <pxCurrentTCBConst>:
 80030f0:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop

080030f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
        __asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	607b      	str	r3, [r7, #4]
    }
 8003110:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003112:	f7ff fc35 	bl	8002980 <xTaskIncrementTick>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <SysTick_Handler+0x40>)
 800311e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	2300      	movs	r3, #0
 8003126:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	f383 8811 	msr	BASEPRI, r3
    }
 800312e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	e000ed04 	.word	0xe000ed04

0800313c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <vPortSetupTimerInterrupt+0x34>)
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <vPortSetupTimerInterrupt+0x38>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <vPortSetupTimerInterrupt+0x3c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a0a      	ldr	r2, [pc, #40]	; (800317c <vPortSetupTimerInterrupt+0x40>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	4a09      	ldr	r2, [pc, #36]	; (8003180 <vPortSetupTimerInterrupt+0x44>)
 800315a:	3b01      	subs	r3, #1
 800315c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <vPortSetupTimerInterrupt+0x34>)
 8003160:	2207      	movs	r2, #7
 8003162:	601a      	str	r2, [r3, #0]
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010
 8003174:	e000e018 	.word	0xe000e018
 8003178:	20000000 	.word	0x20000000
 800317c:	10624dd3 	.word	0x10624dd3
 8003180:	e000e014 	.word	0xe000e014

08003184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003184:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003194 <vPortEnableVFP+0x10>
 8003188:	6801      	ldr	r1, [r0, #0]
 800318a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800318e:	6001      	str	r1, [r0, #0]
 8003190:	4770      	bx	lr
 8003192:	0000      	.short	0x0000
 8003194:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop

0800319c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80031a8:	f7ff faee 	bl	8002788 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80031ac:	4b53      	ldr	r3, [pc, #332]	; (80032fc <pvPortMalloc+0x160>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80031b4:	f000 f908 	bl	80033c8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d012      	beq.n	80031e4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80031be:	2208      	movs	r2, #8
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	3308      	adds	r3, #8
 80031ca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d804      	bhi.n	80031e0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	4413      	add	r3, r2
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	e001      	b.n	80031e4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	db70      	blt.n	80032cc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d06d      	beq.n	80032cc <pvPortMalloc+0x130>
 80031f0:	4b43      	ldr	r3, [pc, #268]	; (8003300 <pvPortMalloc+0x164>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d868      	bhi.n	80032cc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80031fa:	4b42      	ldr	r3, [pc, #264]	; (8003304 <pvPortMalloc+0x168>)
 80031fc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80031fe:	4b41      	ldr	r3, [pc, #260]	; (8003304 <pvPortMalloc+0x168>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003204:	e004      	b.n	8003210 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	429a      	cmp	r2, r3
 8003218:	d903      	bls.n	8003222 <pvPortMalloc+0x86>
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f1      	bne.n	8003206 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003222:	4b36      	ldr	r3, [pc, #216]	; (80032fc <pvPortMalloc+0x160>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	429a      	cmp	r2, r3
 800322a:	d04f      	beq.n	80032cc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2208      	movs	r2, #8
 8003232:	4413      	add	r3, r2
 8003234:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	1ad2      	subs	r2, r2, r3
 8003246:	2308      	movs	r3, #8
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	429a      	cmp	r2, r3
 800324c:	d91f      	bls.n	800328e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800324e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <pvPortMalloc+0xda>
        __asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	613b      	str	r3, [r7, #16]
    }
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	1ad2      	subs	r2, r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003288:	6978      	ldr	r0, [r7, #20]
 800328a:	f000 f8f9 	bl	8003480 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <pvPortMalloc+0x164>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	4a19      	ldr	r2, [pc, #100]	; (8003300 <pvPortMalloc+0x164>)
 800329a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800329c:	4b18      	ldr	r3, [pc, #96]	; (8003300 <pvPortMalloc+0x164>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <pvPortMalloc+0x16c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d203      	bcs.n	80032b0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <pvPortMalloc+0x164>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a16      	ldr	r2, [pc, #88]	; (8003308 <pvPortMalloc+0x16c>)
 80032ae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80032c2:	4b12      	ldr	r3, [pc, #72]	; (800330c <pvPortMalloc+0x170>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3301      	adds	r3, #1
 80032c8:	4a10      	ldr	r2, [pc, #64]	; (800330c <pvPortMalloc+0x170>)
 80032ca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80032cc:	f7ff fa6a 	bl	80027a4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <pvPortMalloc+0x154>
        __asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	60fb      	str	r3, [r7, #12]
    }
 80032ec:	bf00      	nop
 80032ee:	e7fe      	b.n	80032ee <pvPortMalloc+0x152>
    return pvReturn;
 80032f0:	69fb      	ldr	r3, [r7, #28]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3728      	adds	r7, #40	; 0x28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20012dec 	.word	0x20012dec
 8003300:	20012df0 	.word	0x20012df0
 8003304:	20012de4 	.word	0x20012de4
 8003308:	20012df4 	.word	0x20012df4
 800330c:	20012df8 	.word	0x20012df8

08003310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d049      	beq.n	80033b6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003322:	2308      	movs	r3, #8
 8003324:	425b      	negs	r3, r3
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4413      	add	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	db0a      	blt.n	800334e <vPortFree+0x3e>
        __asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	60fb      	str	r3, [r7, #12]
    }
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <vPortFree+0x5c>
        __asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	60bb      	str	r3, [r7, #8]
    }
 8003368:	bf00      	nop
 800336a:	e7fe      	b.n	800336a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	0fdb      	lsrs	r3, r3, #31
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01c      	beq.n	80033b6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d118      	bne.n	80033b6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003390:	f7ff f9fa 	bl	8002788 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <vPortFree+0xb0>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4413      	add	r3, r2
 800339e:	4a08      	ldr	r2, [pc, #32]	; (80033c0 <vPortFree+0xb0>)
 80033a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80033a2:	6938      	ldr	r0, [r7, #16]
 80033a4:	f000 f86c 	bl	8003480 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <vPortFree+0xb4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <vPortFree+0xb4>)
 80033b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80033b2:	f7ff f9f7 	bl	80027a4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80033b6:	bf00      	nop
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20012df0 	.word	0x20012df0
 80033c4:	20012dfc 	.word	0x20012dfc

080033c8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80033ce:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80033d2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80033d4:	4b25      	ldr	r3, [pc, #148]	; (800346c <prvHeapInit+0xa4>)
 80033d6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00c      	beq.n	80033fc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3307      	adds	r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0307 	bic.w	r3, r3, #7
 80033ee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	4a1d      	ldr	r2, [pc, #116]	; (800346c <prvHeapInit+0xa4>)
 80033f8:	4413      	add	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003400:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <prvHeapInit+0xa8>)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003406:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <prvHeapInit+0xa8>)
 8003408:	2200      	movs	r2, #0
 800340a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	4413      	add	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003414:	2208      	movs	r2, #8
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0307 	bic.w	r3, r3, #7
 8003422:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4a13      	ldr	r2, [pc, #76]	; (8003474 <prvHeapInit+0xac>)
 8003428:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <prvHeapInit+0xac>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <prvHeapInit+0xac>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	1ad2      	subs	r2, r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <prvHeapInit+0xac>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4a08      	ldr	r2, [pc, #32]	; (8003478 <prvHeapInit+0xb0>)
 8003456:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a07      	ldr	r2, [pc, #28]	; (800347c <prvHeapInit+0xb4>)
 800345e:	6013      	str	r3, [r2, #0]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	200001e4 	.word	0x200001e4
 8003470:	20012de4 	.word	0x20012de4
 8003474:	20012dec 	.word	0x20012dec
 8003478:	20012df4 	.word	0x20012df4
 800347c:	20012df0 	.word	0x20012df0

08003480 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003488:	4b28      	ldr	r3, [pc, #160]	; (800352c <prvInsertBlockIntoFreeList+0xac>)
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e002      	b.n	8003494 <prvInsertBlockIntoFreeList+0x14>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d8f7      	bhi.n	800348e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	4413      	add	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d108      	bne.n	80034c2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	441a      	add	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	441a      	add	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d118      	bne.n	8003508 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <prvInsertBlockIntoFreeList+0xb0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d00d      	beq.n	80034fe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	441a      	add	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e008      	b.n	8003510 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <prvInsertBlockIntoFreeList+0xb0>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e003      	b.n	8003510 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	429a      	cmp	r2, r3
 8003516:	d002      	beq.n	800351e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20012de4 	.word	0x20012de4
 8003530:	20012dec 	.word	0x20012dec

08003534 <std>:
 8003534:	2300      	movs	r3, #0
 8003536:	b510      	push	{r4, lr}
 8003538:	4604      	mov	r4, r0
 800353a:	e9c0 3300 	strd	r3, r3, [r0]
 800353e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003542:	6083      	str	r3, [r0, #8]
 8003544:	8181      	strh	r1, [r0, #12]
 8003546:	6643      	str	r3, [r0, #100]	; 0x64
 8003548:	81c2      	strh	r2, [r0, #14]
 800354a:	6183      	str	r3, [r0, #24]
 800354c:	4619      	mov	r1, r3
 800354e:	2208      	movs	r2, #8
 8003550:	305c      	adds	r0, #92	; 0x5c
 8003552:	f000 f9e5 	bl	8003920 <memset>
 8003556:	4b0d      	ldr	r3, [pc, #52]	; (800358c <std+0x58>)
 8003558:	6263      	str	r3, [r4, #36]	; 0x24
 800355a:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <std+0x5c>)
 800355c:	62a3      	str	r3, [r4, #40]	; 0x28
 800355e:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <std+0x60>)
 8003560:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <std+0x64>)
 8003564:	6323      	str	r3, [r4, #48]	; 0x30
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <std+0x68>)
 8003568:	6224      	str	r4, [r4, #32]
 800356a:	429c      	cmp	r4, r3
 800356c:	d006      	beq.n	800357c <std+0x48>
 800356e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003572:	4294      	cmp	r4, r2
 8003574:	d002      	beq.n	800357c <std+0x48>
 8003576:	33d0      	adds	r3, #208	; 0xd0
 8003578:	429c      	cmp	r4, r3
 800357a:	d105      	bne.n	8003588 <std+0x54>
 800357c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003584:	f000 ba3e 	b.w	8003a04 <__retarget_lock_init_recursive>
 8003588:	bd10      	pop	{r4, pc}
 800358a:	bf00      	nop
 800358c:	08003771 	.word	0x08003771
 8003590:	08003793 	.word	0x08003793
 8003594:	080037cb 	.word	0x080037cb
 8003598:	080037ef 	.word	0x080037ef
 800359c:	20012e00 	.word	0x20012e00

080035a0 <stdio_exit_handler>:
 80035a0:	4a02      	ldr	r2, [pc, #8]	; (80035ac <stdio_exit_handler+0xc>)
 80035a2:	4903      	ldr	r1, [pc, #12]	; (80035b0 <stdio_exit_handler+0x10>)
 80035a4:	4803      	ldr	r0, [pc, #12]	; (80035b4 <stdio_exit_handler+0x14>)
 80035a6:	f000 b869 	b.w	800367c <_fwalk_sglue>
 80035aa:	bf00      	nop
 80035ac:	20000014 	.word	0x20000014
 80035b0:	08003d09 	.word	0x08003d09
 80035b4:	20000020 	.word	0x20000020

080035b8 <cleanup_stdio>:
 80035b8:	6841      	ldr	r1, [r0, #4]
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <cleanup_stdio+0x34>)
 80035bc:	4299      	cmp	r1, r3
 80035be:	b510      	push	{r4, lr}
 80035c0:	4604      	mov	r4, r0
 80035c2:	d001      	beq.n	80035c8 <cleanup_stdio+0x10>
 80035c4:	f000 fba0 	bl	8003d08 <_fflush_r>
 80035c8:	68a1      	ldr	r1, [r4, #8]
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <cleanup_stdio+0x38>)
 80035cc:	4299      	cmp	r1, r3
 80035ce:	d002      	beq.n	80035d6 <cleanup_stdio+0x1e>
 80035d0:	4620      	mov	r0, r4
 80035d2:	f000 fb99 	bl	8003d08 <_fflush_r>
 80035d6:	68e1      	ldr	r1, [r4, #12]
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <cleanup_stdio+0x3c>)
 80035da:	4299      	cmp	r1, r3
 80035dc:	d004      	beq.n	80035e8 <cleanup_stdio+0x30>
 80035de:	4620      	mov	r0, r4
 80035e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e4:	f000 bb90 	b.w	8003d08 <_fflush_r>
 80035e8:	bd10      	pop	{r4, pc}
 80035ea:	bf00      	nop
 80035ec:	20012e00 	.word	0x20012e00
 80035f0:	20012e68 	.word	0x20012e68
 80035f4:	20012ed0 	.word	0x20012ed0

080035f8 <global_stdio_init.part.0>:
 80035f8:	b510      	push	{r4, lr}
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <global_stdio_init.part.0+0x30>)
 80035fc:	4c0b      	ldr	r4, [pc, #44]	; (800362c <global_stdio_init.part.0+0x34>)
 80035fe:	4a0c      	ldr	r2, [pc, #48]	; (8003630 <global_stdio_init.part.0+0x38>)
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	4620      	mov	r0, r4
 8003604:	2200      	movs	r2, #0
 8003606:	2104      	movs	r1, #4
 8003608:	f7ff ff94 	bl	8003534 <std>
 800360c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003610:	2201      	movs	r2, #1
 8003612:	2109      	movs	r1, #9
 8003614:	f7ff ff8e 	bl	8003534 <std>
 8003618:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800361c:	2202      	movs	r2, #2
 800361e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003622:	2112      	movs	r1, #18
 8003624:	f7ff bf86 	b.w	8003534 <std>
 8003628:	20012f38 	.word	0x20012f38
 800362c:	20012e00 	.word	0x20012e00
 8003630:	080035a1 	.word	0x080035a1

08003634 <__sfp_lock_acquire>:
 8003634:	4801      	ldr	r0, [pc, #4]	; (800363c <__sfp_lock_acquire+0x8>)
 8003636:	f000 b9e6 	b.w	8003a06 <__retarget_lock_acquire_recursive>
 800363a:	bf00      	nop
 800363c:	20012f41 	.word	0x20012f41

08003640 <__sfp_lock_release>:
 8003640:	4801      	ldr	r0, [pc, #4]	; (8003648 <__sfp_lock_release+0x8>)
 8003642:	f000 b9e1 	b.w	8003a08 <__retarget_lock_release_recursive>
 8003646:	bf00      	nop
 8003648:	20012f41 	.word	0x20012f41

0800364c <__sinit>:
 800364c:	b510      	push	{r4, lr}
 800364e:	4604      	mov	r4, r0
 8003650:	f7ff fff0 	bl	8003634 <__sfp_lock_acquire>
 8003654:	6a23      	ldr	r3, [r4, #32]
 8003656:	b11b      	cbz	r3, 8003660 <__sinit+0x14>
 8003658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800365c:	f7ff bff0 	b.w	8003640 <__sfp_lock_release>
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <__sinit+0x28>)
 8003662:	6223      	str	r3, [r4, #32]
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <__sinit+0x2c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f5      	bne.n	8003658 <__sinit+0xc>
 800366c:	f7ff ffc4 	bl	80035f8 <global_stdio_init.part.0>
 8003670:	e7f2      	b.n	8003658 <__sinit+0xc>
 8003672:	bf00      	nop
 8003674:	080035b9 	.word	0x080035b9
 8003678:	20012f38 	.word	0x20012f38

0800367c <_fwalk_sglue>:
 800367c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003680:	4607      	mov	r7, r0
 8003682:	4688      	mov	r8, r1
 8003684:	4614      	mov	r4, r2
 8003686:	2600      	movs	r6, #0
 8003688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800368c:	f1b9 0901 	subs.w	r9, r9, #1
 8003690:	d505      	bpl.n	800369e <_fwalk_sglue+0x22>
 8003692:	6824      	ldr	r4, [r4, #0]
 8003694:	2c00      	cmp	r4, #0
 8003696:	d1f7      	bne.n	8003688 <_fwalk_sglue+0xc>
 8003698:	4630      	mov	r0, r6
 800369a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800369e:	89ab      	ldrh	r3, [r5, #12]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d907      	bls.n	80036b4 <_fwalk_sglue+0x38>
 80036a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036a8:	3301      	adds	r3, #1
 80036aa:	d003      	beq.n	80036b4 <_fwalk_sglue+0x38>
 80036ac:	4629      	mov	r1, r5
 80036ae:	4638      	mov	r0, r7
 80036b0:	47c0      	blx	r8
 80036b2:	4306      	orrs	r6, r0
 80036b4:	3568      	adds	r5, #104	; 0x68
 80036b6:	e7e9      	b.n	800368c <_fwalk_sglue+0x10>

080036b8 <_puts_r>:
 80036b8:	6a03      	ldr	r3, [r0, #32]
 80036ba:	b570      	push	{r4, r5, r6, lr}
 80036bc:	6884      	ldr	r4, [r0, #8]
 80036be:	4605      	mov	r5, r0
 80036c0:	460e      	mov	r6, r1
 80036c2:	b90b      	cbnz	r3, 80036c8 <_puts_r+0x10>
 80036c4:	f7ff ffc2 	bl	800364c <__sinit>
 80036c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036ca:	07db      	lsls	r3, r3, #31
 80036cc:	d405      	bmi.n	80036da <_puts_r+0x22>
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	0598      	lsls	r0, r3, #22
 80036d2:	d402      	bmi.n	80036da <_puts_r+0x22>
 80036d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036d6:	f000 f996 	bl	8003a06 <__retarget_lock_acquire_recursive>
 80036da:	89a3      	ldrh	r3, [r4, #12]
 80036dc:	0719      	lsls	r1, r3, #28
 80036de:	d513      	bpl.n	8003708 <_puts_r+0x50>
 80036e0:	6923      	ldr	r3, [r4, #16]
 80036e2:	b18b      	cbz	r3, 8003708 <_puts_r+0x50>
 80036e4:	3e01      	subs	r6, #1
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036ec:	3b01      	subs	r3, #1
 80036ee:	60a3      	str	r3, [r4, #8]
 80036f0:	b9e9      	cbnz	r1, 800372e <_puts_r+0x76>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	da2e      	bge.n	8003754 <_puts_r+0x9c>
 80036f6:	4622      	mov	r2, r4
 80036f8:	210a      	movs	r1, #10
 80036fa:	4628      	mov	r0, r5
 80036fc:	f000 f87b 	bl	80037f6 <__swbuf_r>
 8003700:	3001      	adds	r0, #1
 8003702:	d007      	beq.n	8003714 <_puts_r+0x5c>
 8003704:	250a      	movs	r5, #10
 8003706:	e007      	b.n	8003718 <_puts_r+0x60>
 8003708:	4621      	mov	r1, r4
 800370a:	4628      	mov	r0, r5
 800370c:	f000 f8b0 	bl	8003870 <__swsetup_r>
 8003710:	2800      	cmp	r0, #0
 8003712:	d0e7      	beq.n	80036e4 <_puts_r+0x2c>
 8003714:	f04f 35ff 	mov.w	r5, #4294967295
 8003718:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800371a:	07da      	lsls	r2, r3, #31
 800371c:	d405      	bmi.n	800372a <_puts_r+0x72>
 800371e:	89a3      	ldrh	r3, [r4, #12]
 8003720:	059b      	lsls	r3, r3, #22
 8003722:	d402      	bmi.n	800372a <_puts_r+0x72>
 8003724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003726:	f000 f96f 	bl	8003a08 <__retarget_lock_release_recursive>
 800372a:	4628      	mov	r0, r5
 800372c:	bd70      	pop	{r4, r5, r6, pc}
 800372e:	2b00      	cmp	r3, #0
 8003730:	da04      	bge.n	800373c <_puts_r+0x84>
 8003732:	69a2      	ldr	r2, [r4, #24]
 8003734:	429a      	cmp	r2, r3
 8003736:	dc06      	bgt.n	8003746 <_puts_r+0x8e>
 8003738:	290a      	cmp	r1, #10
 800373a:	d004      	beq.n	8003746 <_puts_r+0x8e>
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	6022      	str	r2, [r4, #0]
 8003742:	7019      	strb	r1, [r3, #0]
 8003744:	e7cf      	b.n	80036e6 <_puts_r+0x2e>
 8003746:	4622      	mov	r2, r4
 8003748:	4628      	mov	r0, r5
 800374a:	f000 f854 	bl	80037f6 <__swbuf_r>
 800374e:	3001      	adds	r0, #1
 8003750:	d1c9      	bne.n	80036e6 <_puts_r+0x2e>
 8003752:	e7df      	b.n	8003714 <_puts_r+0x5c>
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	250a      	movs	r5, #10
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	6022      	str	r2, [r4, #0]
 800375c:	701d      	strb	r5, [r3, #0]
 800375e:	e7db      	b.n	8003718 <_puts_r+0x60>

08003760 <puts>:
 8003760:	4b02      	ldr	r3, [pc, #8]	; (800376c <puts+0xc>)
 8003762:	4601      	mov	r1, r0
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	f7ff bfa7 	b.w	80036b8 <_puts_r>
 800376a:	bf00      	nop
 800376c:	2000006c 	.word	0x2000006c

08003770 <__sread>:
 8003770:	b510      	push	{r4, lr}
 8003772:	460c      	mov	r4, r1
 8003774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003778:	f000 f8fc 	bl	8003974 <_read_r>
 800377c:	2800      	cmp	r0, #0
 800377e:	bfab      	itete	ge
 8003780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003782:	89a3      	ldrhlt	r3, [r4, #12]
 8003784:	181b      	addge	r3, r3, r0
 8003786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800378a:	bfac      	ite	ge
 800378c:	6563      	strge	r3, [r4, #84]	; 0x54
 800378e:	81a3      	strhlt	r3, [r4, #12]
 8003790:	bd10      	pop	{r4, pc}

08003792 <__swrite>:
 8003792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003796:	461f      	mov	r7, r3
 8003798:	898b      	ldrh	r3, [r1, #12]
 800379a:	05db      	lsls	r3, r3, #23
 800379c:	4605      	mov	r5, r0
 800379e:	460c      	mov	r4, r1
 80037a0:	4616      	mov	r6, r2
 80037a2:	d505      	bpl.n	80037b0 <__swrite+0x1e>
 80037a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037a8:	2302      	movs	r3, #2
 80037aa:	2200      	movs	r2, #0
 80037ac:	f000 f8d0 	bl	8003950 <_lseek_r>
 80037b0:	89a3      	ldrh	r3, [r4, #12]
 80037b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037ba:	81a3      	strh	r3, [r4, #12]
 80037bc:	4632      	mov	r2, r6
 80037be:	463b      	mov	r3, r7
 80037c0:	4628      	mov	r0, r5
 80037c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037c6:	f000 b8e7 	b.w	8003998 <_write_r>

080037ca <__sseek>:
 80037ca:	b510      	push	{r4, lr}
 80037cc:	460c      	mov	r4, r1
 80037ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d2:	f000 f8bd 	bl	8003950 <_lseek_r>
 80037d6:	1c43      	adds	r3, r0, #1
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	bf15      	itete	ne
 80037dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80037de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037e6:	81a3      	strheq	r3, [r4, #12]
 80037e8:	bf18      	it	ne
 80037ea:	81a3      	strhne	r3, [r4, #12]
 80037ec:	bd10      	pop	{r4, pc}

080037ee <__sclose>:
 80037ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037f2:	f000 b89d 	b.w	8003930 <_close_r>

080037f6 <__swbuf_r>:
 80037f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f8:	460e      	mov	r6, r1
 80037fa:	4614      	mov	r4, r2
 80037fc:	4605      	mov	r5, r0
 80037fe:	b118      	cbz	r0, 8003808 <__swbuf_r+0x12>
 8003800:	6a03      	ldr	r3, [r0, #32]
 8003802:	b90b      	cbnz	r3, 8003808 <__swbuf_r+0x12>
 8003804:	f7ff ff22 	bl	800364c <__sinit>
 8003808:	69a3      	ldr	r3, [r4, #24]
 800380a:	60a3      	str	r3, [r4, #8]
 800380c:	89a3      	ldrh	r3, [r4, #12]
 800380e:	071a      	lsls	r2, r3, #28
 8003810:	d525      	bpl.n	800385e <__swbuf_r+0x68>
 8003812:	6923      	ldr	r3, [r4, #16]
 8003814:	b31b      	cbz	r3, 800385e <__swbuf_r+0x68>
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	6922      	ldr	r2, [r4, #16]
 800381a:	1a98      	subs	r0, r3, r2
 800381c:	6963      	ldr	r3, [r4, #20]
 800381e:	b2f6      	uxtb	r6, r6
 8003820:	4283      	cmp	r3, r0
 8003822:	4637      	mov	r7, r6
 8003824:	dc04      	bgt.n	8003830 <__swbuf_r+0x3a>
 8003826:	4621      	mov	r1, r4
 8003828:	4628      	mov	r0, r5
 800382a:	f000 fa6d 	bl	8003d08 <_fflush_r>
 800382e:	b9e0      	cbnz	r0, 800386a <__swbuf_r+0x74>
 8003830:	68a3      	ldr	r3, [r4, #8]
 8003832:	3b01      	subs	r3, #1
 8003834:	60a3      	str	r3, [r4, #8]
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	6022      	str	r2, [r4, #0]
 800383c:	701e      	strb	r6, [r3, #0]
 800383e:	6962      	ldr	r2, [r4, #20]
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	429a      	cmp	r2, r3
 8003844:	d004      	beq.n	8003850 <__swbuf_r+0x5a>
 8003846:	89a3      	ldrh	r3, [r4, #12]
 8003848:	07db      	lsls	r3, r3, #31
 800384a:	d506      	bpl.n	800385a <__swbuf_r+0x64>
 800384c:	2e0a      	cmp	r6, #10
 800384e:	d104      	bne.n	800385a <__swbuf_r+0x64>
 8003850:	4621      	mov	r1, r4
 8003852:	4628      	mov	r0, r5
 8003854:	f000 fa58 	bl	8003d08 <_fflush_r>
 8003858:	b938      	cbnz	r0, 800386a <__swbuf_r+0x74>
 800385a:	4638      	mov	r0, r7
 800385c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800385e:	4621      	mov	r1, r4
 8003860:	4628      	mov	r0, r5
 8003862:	f000 f805 	bl	8003870 <__swsetup_r>
 8003866:	2800      	cmp	r0, #0
 8003868:	d0d5      	beq.n	8003816 <__swbuf_r+0x20>
 800386a:	f04f 37ff 	mov.w	r7, #4294967295
 800386e:	e7f4      	b.n	800385a <__swbuf_r+0x64>

08003870 <__swsetup_r>:
 8003870:	b538      	push	{r3, r4, r5, lr}
 8003872:	4b2a      	ldr	r3, [pc, #168]	; (800391c <__swsetup_r+0xac>)
 8003874:	4605      	mov	r5, r0
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	460c      	mov	r4, r1
 800387a:	b118      	cbz	r0, 8003884 <__swsetup_r+0x14>
 800387c:	6a03      	ldr	r3, [r0, #32]
 800387e:	b90b      	cbnz	r3, 8003884 <__swsetup_r+0x14>
 8003880:	f7ff fee4 	bl	800364c <__sinit>
 8003884:	89a3      	ldrh	r3, [r4, #12]
 8003886:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800388a:	0718      	lsls	r0, r3, #28
 800388c:	d422      	bmi.n	80038d4 <__swsetup_r+0x64>
 800388e:	06d9      	lsls	r1, r3, #27
 8003890:	d407      	bmi.n	80038a2 <__swsetup_r+0x32>
 8003892:	2309      	movs	r3, #9
 8003894:	602b      	str	r3, [r5, #0]
 8003896:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800389a:	81a3      	strh	r3, [r4, #12]
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	e034      	b.n	800390c <__swsetup_r+0x9c>
 80038a2:	0758      	lsls	r0, r3, #29
 80038a4:	d512      	bpl.n	80038cc <__swsetup_r+0x5c>
 80038a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038a8:	b141      	cbz	r1, 80038bc <__swsetup_r+0x4c>
 80038aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038ae:	4299      	cmp	r1, r3
 80038b0:	d002      	beq.n	80038b8 <__swsetup_r+0x48>
 80038b2:	4628      	mov	r0, r5
 80038b4:	f000 f8aa 	bl	8003a0c <_free_r>
 80038b8:	2300      	movs	r3, #0
 80038ba:	6363      	str	r3, [r4, #52]	; 0x34
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038c2:	81a3      	strh	r3, [r4, #12]
 80038c4:	2300      	movs	r3, #0
 80038c6:	6063      	str	r3, [r4, #4]
 80038c8:	6923      	ldr	r3, [r4, #16]
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	89a3      	ldrh	r3, [r4, #12]
 80038ce:	f043 0308 	orr.w	r3, r3, #8
 80038d2:	81a3      	strh	r3, [r4, #12]
 80038d4:	6923      	ldr	r3, [r4, #16]
 80038d6:	b94b      	cbnz	r3, 80038ec <__swsetup_r+0x7c>
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e2:	d003      	beq.n	80038ec <__swsetup_r+0x7c>
 80038e4:	4621      	mov	r1, r4
 80038e6:	4628      	mov	r0, r5
 80038e8:	f000 fa5c 	bl	8003da4 <__smakebuf_r>
 80038ec:	89a0      	ldrh	r0, [r4, #12]
 80038ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038f2:	f010 0301 	ands.w	r3, r0, #1
 80038f6:	d00a      	beq.n	800390e <__swsetup_r+0x9e>
 80038f8:	2300      	movs	r3, #0
 80038fa:	60a3      	str	r3, [r4, #8]
 80038fc:	6963      	ldr	r3, [r4, #20]
 80038fe:	425b      	negs	r3, r3
 8003900:	61a3      	str	r3, [r4, #24]
 8003902:	6923      	ldr	r3, [r4, #16]
 8003904:	b943      	cbnz	r3, 8003918 <__swsetup_r+0xa8>
 8003906:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800390a:	d1c4      	bne.n	8003896 <__swsetup_r+0x26>
 800390c:	bd38      	pop	{r3, r4, r5, pc}
 800390e:	0781      	lsls	r1, r0, #30
 8003910:	bf58      	it	pl
 8003912:	6963      	ldrpl	r3, [r4, #20]
 8003914:	60a3      	str	r3, [r4, #8]
 8003916:	e7f4      	b.n	8003902 <__swsetup_r+0x92>
 8003918:	2000      	movs	r0, #0
 800391a:	e7f7      	b.n	800390c <__swsetup_r+0x9c>
 800391c:	2000006c 	.word	0x2000006c

08003920 <memset>:
 8003920:	4402      	add	r2, r0
 8003922:	4603      	mov	r3, r0
 8003924:	4293      	cmp	r3, r2
 8003926:	d100      	bne.n	800392a <memset+0xa>
 8003928:	4770      	bx	lr
 800392a:	f803 1b01 	strb.w	r1, [r3], #1
 800392e:	e7f9      	b.n	8003924 <memset+0x4>

08003930 <_close_r>:
 8003930:	b538      	push	{r3, r4, r5, lr}
 8003932:	4d06      	ldr	r5, [pc, #24]	; (800394c <_close_r+0x1c>)
 8003934:	2300      	movs	r3, #0
 8003936:	4604      	mov	r4, r0
 8003938:	4608      	mov	r0, r1
 800393a:	602b      	str	r3, [r5, #0]
 800393c:	f7fd fa71 	bl	8000e22 <_close>
 8003940:	1c43      	adds	r3, r0, #1
 8003942:	d102      	bne.n	800394a <_close_r+0x1a>
 8003944:	682b      	ldr	r3, [r5, #0]
 8003946:	b103      	cbz	r3, 800394a <_close_r+0x1a>
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	bd38      	pop	{r3, r4, r5, pc}
 800394c:	20012f3c 	.word	0x20012f3c

08003950 <_lseek_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4d07      	ldr	r5, [pc, #28]	; (8003970 <_lseek_r+0x20>)
 8003954:	4604      	mov	r4, r0
 8003956:	4608      	mov	r0, r1
 8003958:	4611      	mov	r1, r2
 800395a:	2200      	movs	r2, #0
 800395c:	602a      	str	r2, [r5, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	f7fd fa86 	bl	8000e70 <_lseek>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	d102      	bne.n	800396e <_lseek_r+0x1e>
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	b103      	cbz	r3, 800396e <_lseek_r+0x1e>
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	bd38      	pop	{r3, r4, r5, pc}
 8003970:	20012f3c 	.word	0x20012f3c

08003974 <_read_r>:
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4d07      	ldr	r5, [pc, #28]	; (8003994 <_read_r+0x20>)
 8003978:	4604      	mov	r4, r0
 800397a:	4608      	mov	r0, r1
 800397c:	4611      	mov	r1, r2
 800397e:	2200      	movs	r2, #0
 8003980:	602a      	str	r2, [r5, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	f7fd fa14 	bl	8000db0 <_read>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d102      	bne.n	8003992 <_read_r+0x1e>
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	b103      	cbz	r3, 8003992 <_read_r+0x1e>
 8003990:	6023      	str	r3, [r4, #0]
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	20012f3c 	.word	0x20012f3c

08003998 <_write_r>:
 8003998:	b538      	push	{r3, r4, r5, lr}
 800399a:	4d07      	ldr	r5, [pc, #28]	; (80039b8 <_write_r+0x20>)
 800399c:	4604      	mov	r4, r0
 800399e:	4608      	mov	r0, r1
 80039a0:	4611      	mov	r1, r2
 80039a2:	2200      	movs	r2, #0
 80039a4:	602a      	str	r2, [r5, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	f7fd fa1f 	bl	8000dea <_write>
 80039ac:	1c43      	adds	r3, r0, #1
 80039ae:	d102      	bne.n	80039b6 <_write_r+0x1e>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	b103      	cbz	r3, 80039b6 <_write_r+0x1e>
 80039b4:	6023      	str	r3, [r4, #0]
 80039b6:	bd38      	pop	{r3, r4, r5, pc}
 80039b8:	20012f3c 	.word	0x20012f3c

080039bc <__libc_init_array>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4d0d      	ldr	r5, [pc, #52]	; (80039f4 <__libc_init_array+0x38>)
 80039c0:	4c0d      	ldr	r4, [pc, #52]	; (80039f8 <__libc_init_array+0x3c>)
 80039c2:	1b64      	subs	r4, r4, r5
 80039c4:	10a4      	asrs	r4, r4, #2
 80039c6:	2600      	movs	r6, #0
 80039c8:	42a6      	cmp	r6, r4
 80039ca:	d109      	bne.n	80039e0 <__libc_init_array+0x24>
 80039cc:	4d0b      	ldr	r5, [pc, #44]	; (80039fc <__libc_init_array+0x40>)
 80039ce:	4c0c      	ldr	r4, [pc, #48]	; (8003a00 <__libc_init_array+0x44>)
 80039d0:	f000 fa64 	bl	8003e9c <_init>
 80039d4:	1b64      	subs	r4, r4, r5
 80039d6:	10a4      	asrs	r4, r4, #2
 80039d8:	2600      	movs	r6, #0
 80039da:	42a6      	cmp	r6, r4
 80039dc:	d105      	bne.n	80039ea <__libc_init_array+0x2e>
 80039de:	bd70      	pop	{r4, r5, r6, pc}
 80039e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e4:	4798      	blx	r3
 80039e6:	3601      	adds	r6, #1
 80039e8:	e7ee      	b.n	80039c8 <__libc_init_array+0xc>
 80039ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ee:	4798      	blx	r3
 80039f0:	3601      	adds	r6, #1
 80039f2:	e7f2      	b.n	80039da <__libc_init_array+0x1e>
 80039f4:	08003f1c 	.word	0x08003f1c
 80039f8:	08003f1c 	.word	0x08003f1c
 80039fc:	08003f1c 	.word	0x08003f1c
 8003a00:	08003f20 	.word	0x08003f20

08003a04 <__retarget_lock_init_recursive>:
 8003a04:	4770      	bx	lr

08003a06 <__retarget_lock_acquire_recursive>:
 8003a06:	4770      	bx	lr

08003a08 <__retarget_lock_release_recursive>:
 8003a08:	4770      	bx	lr
	...

08003a0c <_free_r>:
 8003a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a0e:	2900      	cmp	r1, #0
 8003a10:	d044      	beq.n	8003a9c <_free_r+0x90>
 8003a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a16:	9001      	str	r0, [sp, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f1a1 0404 	sub.w	r4, r1, #4
 8003a1e:	bfb8      	it	lt
 8003a20:	18e4      	addlt	r4, r4, r3
 8003a22:	f000 f8df 	bl	8003be4 <__malloc_lock>
 8003a26:	4a1e      	ldr	r2, [pc, #120]	; (8003aa0 <_free_r+0x94>)
 8003a28:	9801      	ldr	r0, [sp, #4]
 8003a2a:	6813      	ldr	r3, [r2, #0]
 8003a2c:	b933      	cbnz	r3, 8003a3c <_free_r+0x30>
 8003a2e:	6063      	str	r3, [r4, #4]
 8003a30:	6014      	str	r4, [r2, #0]
 8003a32:	b003      	add	sp, #12
 8003a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a38:	f000 b8da 	b.w	8003bf0 <__malloc_unlock>
 8003a3c:	42a3      	cmp	r3, r4
 8003a3e:	d908      	bls.n	8003a52 <_free_r+0x46>
 8003a40:	6825      	ldr	r5, [r4, #0]
 8003a42:	1961      	adds	r1, r4, r5
 8003a44:	428b      	cmp	r3, r1
 8003a46:	bf01      	itttt	eq
 8003a48:	6819      	ldreq	r1, [r3, #0]
 8003a4a:	685b      	ldreq	r3, [r3, #4]
 8003a4c:	1949      	addeq	r1, r1, r5
 8003a4e:	6021      	streq	r1, [r4, #0]
 8003a50:	e7ed      	b.n	8003a2e <_free_r+0x22>
 8003a52:	461a      	mov	r2, r3
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	b10b      	cbz	r3, 8003a5c <_free_r+0x50>
 8003a58:	42a3      	cmp	r3, r4
 8003a5a:	d9fa      	bls.n	8003a52 <_free_r+0x46>
 8003a5c:	6811      	ldr	r1, [r2, #0]
 8003a5e:	1855      	adds	r5, r2, r1
 8003a60:	42a5      	cmp	r5, r4
 8003a62:	d10b      	bne.n	8003a7c <_free_r+0x70>
 8003a64:	6824      	ldr	r4, [r4, #0]
 8003a66:	4421      	add	r1, r4
 8003a68:	1854      	adds	r4, r2, r1
 8003a6a:	42a3      	cmp	r3, r4
 8003a6c:	6011      	str	r1, [r2, #0]
 8003a6e:	d1e0      	bne.n	8003a32 <_free_r+0x26>
 8003a70:	681c      	ldr	r4, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	6053      	str	r3, [r2, #4]
 8003a76:	440c      	add	r4, r1
 8003a78:	6014      	str	r4, [r2, #0]
 8003a7a:	e7da      	b.n	8003a32 <_free_r+0x26>
 8003a7c:	d902      	bls.n	8003a84 <_free_r+0x78>
 8003a7e:	230c      	movs	r3, #12
 8003a80:	6003      	str	r3, [r0, #0]
 8003a82:	e7d6      	b.n	8003a32 <_free_r+0x26>
 8003a84:	6825      	ldr	r5, [r4, #0]
 8003a86:	1961      	adds	r1, r4, r5
 8003a88:	428b      	cmp	r3, r1
 8003a8a:	bf04      	itt	eq
 8003a8c:	6819      	ldreq	r1, [r3, #0]
 8003a8e:	685b      	ldreq	r3, [r3, #4]
 8003a90:	6063      	str	r3, [r4, #4]
 8003a92:	bf04      	itt	eq
 8003a94:	1949      	addeq	r1, r1, r5
 8003a96:	6021      	streq	r1, [r4, #0]
 8003a98:	6054      	str	r4, [r2, #4]
 8003a9a:	e7ca      	b.n	8003a32 <_free_r+0x26>
 8003a9c:	b003      	add	sp, #12
 8003a9e:	bd30      	pop	{r4, r5, pc}
 8003aa0:	20012f44 	.word	0x20012f44

08003aa4 <sbrk_aligned>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	4e0e      	ldr	r6, [pc, #56]	; (8003ae0 <sbrk_aligned+0x3c>)
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	6831      	ldr	r1, [r6, #0]
 8003aac:	4605      	mov	r5, r0
 8003aae:	b911      	cbnz	r1, 8003ab6 <sbrk_aligned+0x12>
 8003ab0:	f000 f9d6 	bl	8003e60 <_sbrk_r>
 8003ab4:	6030      	str	r0, [r6, #0]
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	4628      	mov	r0, r5
 8003aba:	f000 f9d1 	bl	8003e60 <_sbrk_r>
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	d00a      	beq.n	8003ad8 <sbrk_aligned+0x34>
 8003ac2:	1cc4      	adds	r4, r0, #3
 8003ac4:	f024 0403 	bic.w	r4, r4, #3
 8003ac8:	42a0      	cmp	r0, r4
 8003aca:	d007      	beq.n	8003adc <sbrk_aligned+0x38>
 8003acc:	1a21      	subs	r1, r4, r0
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f000 f9c6 	bl	8003e60 <_sbrk_r>
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d101      	bne.n	8003adc <sbrk_aligned+0x38>
 8003ad8:	f04f 34ff 	mov.w	r4, #4294967295
 8003adc:	4620      	mov	r0, r4
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	20012f48 	.word	0x20012f48

08003ae4 <_malloc_r>:
 8003ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ae8:	1ccd      	adds	r5, r1, #3
 8003aea:	f025 0503 	bic.w	r5, r5, #3
 8003aee:	3508      	adds	r5, #8
 8003af0:	2d0c      	cmp	r5, #12
 8003af2:	bf38      	it	cc
 8003af4:	250c      	movcc	r5, #12
 8003af6:	2d00      	cmp	r5, #0
 8003af8:	4607      	mov	r7, r0
 8003afa:	db01      	blt.n	8003b00 <_malloc_r+0x1c>
 8003afc:	42a9      	cmp	r1, r5
 8003afe:	d905      	bls.n	8003b0c <_malloc_r+0x28>
 8003b00:	230c      	movs	r3, #12
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	2600      	movs	r6, #0
 8003b06:	4630      	mov	r0, r6
 8003b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003be0 <_malloc_r+0xfc>
 8003b10:	f000 f868 	bl	8003be4 <__malloc_lock>
 8003b14:	f8d8 3000 	ldr.w	r3, [r8]
 8003b18:	461c      	mov	r4, r3
 8003b1a:	bb5c      	cbnz	r4, 8003b74 <_malloc_r+0x90>
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	4638      	mov	r0, r7
 8003b20:	f7ff ffc0 	bl	8003aa4 <sbrk_aligned>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	4604      	mov	r4, r0
 8003b28:	d155      	bne.n	8003bd6 <_malloc_r+0xf2>
 8003b2a:	f8d8 4000 	ldr.w	r4, [r8]
 8003b2e:	4626      	mov	r6, r4
 8003b30:	2e00      	cmp	r6, #0
 8003b32:	d145      	bne.n	8003bc0 <_malloc_r+0xdc>
 8003b34:	2c00      	cmp	r4, #0
 8003b36:	d048      	beq.n	8003bca <_malloc_r+0xe6>
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	4631      	mov	r1, r6
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	eb04 0903 	add.w	r9, r4, r3
 8003b42:	f000 f98d 	bl	8003e60 <_sbrk_r>
 8003b46:	4581      	cmp	r9, r0
 8003b48:	d13f      	bne.n	8003bca <_malloc_r+0xe6>
 8003b4a:	6821      	ldr	r1, [r4, #0]
 8003b4c:	1a6d      	subs	r5, r5, r1
 8003b4e:	4629      	mov	r1, r5
 8003b50:	4638      	mov	r0, r7
 8003b52:	f7ff ffa7 	bl	8003aa4 <sbrk_aligned>
 8003b56:	3001      	adds	r0, #1
 8003b58:	d037      	beq.n	8003bca <_malloc_r+0xe6>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	442b      	add	r3, r5
 8003b5e:	6023      	str	r3, [r4, #0]
 8003b60:	f8d8 3000 	ldr.w	r3, [r8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d038      	beq.n	8003bda <_malloc_r+0xf6>
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	42a2      	cmp	r2, r4
 8003b6c:	d12b      	bne.n	8003bc6 <_malloc_r+0xe2>
 8003b6e:	2200      	movs	r2, #0
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	e00f      	b.n	8003b94 <_malloc_r+0xb0>
 8003b74:	6822      	ldr	r2, [r4, #0]
 8003b76:	1b52      	subs	r2, r2, r5
 8003b78:	d41f      	bmi.n	8003bba <_malloc_r+0xd6>
 8003b7a:	2a0b      	cmp	r2, #11
 8003b7c:	d917      	bls.n	8003bae <_malloc_r+0xca>
 8003b7e:	1961      	adds	r1, r4, r5
 8003b80:	42a3      	cmp	r3, r4
 8003b82:	6025      	str	r5, [r4, #0]
 8003b84:	bf18      	it	ne
 8003b86:	6059      	strne	r1, [r3, #4]
 8003b88:	6863      	ldr	r3, [r4, #4]
 8003b8a:	bf08      	it	eq
 8003b8c:	f8c8 1000 	streq.w	r1, [r8]
 8003b90:	5162      	str	r2, [r4, r5]
 8003b92:	604b      	str	r3, [r1, #4]
 8003b94:	4638      	mov	r0, r7
 8003b96:	f104 060b 	add.w	r6, r4, #11
 8003b9a:	f000 f829 	bl	8003bf0 <__malloc_unlock>
 8003b9e:	f026 0607 	bic.w	r6, r6, #7
 8003ba2:	1d23      	adds	r3, r4, #4
 8003ba4:	1af2      	subs	r2, r6, r3
 8003ba6:	d0ae      	beq.n	8003b06 <_malloc_r+0x22>
 8003ba8:	1b9b      	subs	r3, r3, r6
 8003baa:	50a3      	str	r3, [r4, r2]
 8003bac:	e7ab      	b.n	8003b06 <_malloc_r+0x22>
 8003bae:	42a3      	cmp	r3, r4
 8003bb0:	6862      	ldr	r2, [r4, #4]
 8003bb2:	d1dd      	bne.n	8003b70 <_malloc_r+0x8c>
 8003bb4:	f8c8 2000 	str.w	r2, [r8]
 8003bb8:	e7ec      	b.n	8003b94 <_malloc_r+0xb0>
 8003bba:	4623      	mov	r3, r4
 8003bbc:	6864      	ldr	r4, [r4, #4]
 8003bbe:	e7ac      	b.n	8003b1a <_malloc_r+0x36>
 8003bc0:	4634      	mov	r4, r6
 8003bc2:	6876      	ldr	r6, [r6, #4]
 8003bc4:	e7b4      	b.n	8003b30 <_malloc_r+0x4c>
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	e7cc      	b.n	8003b64 <_malloc_r+0x80>
 8003bca:	230c      	movs	r3, #12
 8003bcc:	603b      	str	r3, [r7, #0]
 8003bce:	4638      	mov	r0, r7
 8003bd0:	f000 f80e 	bl	8003bf0 <__malloc_unlock>
 8003bd4:	e797      	b.n	8003b06 <_malloc_r+0x22>
 8003bd6:	6025      	str	r5, [r4, #0]
 8003bd8:	e7dc      	b.n	8003b94 <_malloc_r+0xb0>
 8003bda:	605b      	str	r3, [r3, #4]
 8003bdc:	deff      	udf	#255	; 0xff
 8003bde:	bf00      	nop
 8003be0:	20012f44 	.word	0x20012f44

08003be4 <__malloc_lock>:
 8003be4:	4801      	ldr	r0, [pc, #4]	; (8003bec <__malloc_lock+0x8>)
 8003be6:	f7ff bf0e 	b.w	8003a06 <__retarget_lock_acquire_recursive>
 8003bea:	bf00      	nop
 8003bec:	20012f40 	.word	0x20012f40

08003bf0 <__malloc_unlock>:
 8003bf0:	4801      	ldr	r0, [pc, #4]	; (8003bf8 <__malloc_unlock+0x8>)
 8003bf2:	f7ff bf09 	b.w	8003a08 <__retarget_lock_release_recursive>
 8003bf6:	bf00      	nop
 8003bf8:	20012f40 	.word	0x20012f40

08003bfc <__sflush_r>:
 8003bfc:	898a      	ldrh	r2, [r1, #12]
 8003bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c02:	4605      	mov	r5, r0
 8003c04:	0710      	lsls	r0, r2, #28
 8003c06:	460c      	mov	r4, r1
 8003c08:	d458      	bmi.n	8003cbc <__sflush_r+0xc0>
 8003c0a:	684b      	ldr	r3, [r1, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	dc05      	bgt.n	8003c1c <__sflush_r+0x20>
 8003c10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	dc02      	bgt.n	8003c1c <__sflush_r+0x20>
 8003c16:	2000      	movs	r0, #0
 8003c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c1e:	2e00      	cmp	r6, #0
 8003c20:	d0f9      	beq.n	8003c16 <__sflush_r+0x1a>
 8003c22:	2300      	movs	r3, #0
 8003c24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c28:	682f      	ldr	r7, [r5, #0]
 8003c2a:	6a21      	ldr	r1, [r4, #32]
 8003c2c:	602b      	str	r3, [r5, #0]
 8003c2e:	d032      	beq.n	8003c96 <__sflush_r+0x9a>
 8003c30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c32:	89a3      	ldrh	r3, [r4, #12]
 8003c34:	075a      	lsls	r2, r3, #29
 8003c36:	d505      	bpl.n	8003c44 <__sflush_r+0x48>
 8003c38:	6863      	ldr	r3, [r4, #4]
 8003c3a:	1ac0      	subs	r0, r0, r3
 8003c3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c3e:	b10b      	cbz	r3, 8003c44 <__sflush_r+0x48>
 8003c40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c42:	1ac0      	subs	r0, r0, r3
 8003c44:	2300      	movs	r3, #0
 8003c46:	4602      	mov	r2, r0
 8003c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c4a:	6a21      	ldr	r1, [r4, #32]
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	47b0      	blx	r6
 8003c50:	1c43      	adds	r3, r0, #1
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	d106      	bne.n	8003c64 <__sflush_r+0x68>
 8003c56:	6829      	ldr	r1, [r5, #0]
 8003c58:	291d      	cmp	r1, #29
 8003c5a:	d82b      	bhi.n	8003cb4 <__sflush_r+0xb8>
 8003c5c:	4a29      	ldr	r2, [pc, #164]	; (8003d04 <__sflush_r+0x108>)
 8003c5e:	410a      	asrs	r2, r1
 8003c60:	07d6      	lsls	r6, r2, #31
 8003c62:	d427      	bmi.n	8003cb4 <__sflush_r+0xb8>
 8003c64:	2200      	movs	r2, #0
 8003c66:	6062      	str	r2, [r4, #4]
 8003c68:	04d9      	lsls	r1, r3, #19
 8003c6a:	6922      	ldr	r2, [r4, #16]
 8003c6c:	6022      	str	r2, [r4, #0]
 8003c6e:	d504      	bpl.n	8003c7a <__sflush_r+0x7e>
 8003c70:	1c42      	adds	r2, r0, #1
 8003c72:	d101      	bne.n	8003c78 <__sflush_r+0x7c>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	b903      	cbnz	r3, 8003c7a <__sflush_r+0x7e>
 8003c78:	6560      	str	r0, [r4, #84]	; 0x54
 8003c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c7c:	602f      	str	r7, [r5, #0]
 8003c7e:	2900      	cmp	r1, #0
 8003c80:	d0c9      	beq.n	8003c16 <__sflush_r+0x1a>
 8003c82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c86:	4299      	cmp	r1, r3
 8003c88:	d002      	beq.n	8003c90 <__sflush_r+0x94>
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	f7ff febe 	bl	8003a0c <_free_r>
 8003c90:	2000      	movs	r0, #0
 8003c92:	6360      	str	r0, [r4, #52]	; 0x34
 8003c94:	e7c0      	b.n	8003c18 <__sflush_r+0x1c>
 8003c96:	2301      	movs	r3, #1
 8003c98:	4628      	mov	r0, r5
 8003c9a:	47b0      	blx	r6
 8003c9c:	1c41      	adds	r1, r0, #1
 8003c9e:	d1c8      	bne.n	8003c32 <__sflush_r+0x36>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0c5      	beq.n	8003c32 <__sflush_r+0x36>
 8003ca6:	2b1d      	cmp	r3, #29
 8003ca8:	d001      	beq.n	8003cae <__sflush_r+0xb2>
 8003caa:	2b16      	cmp	r3, #22
 8003cac:	d101      	bne.n	8003cb2 <__sflush_r+0xb6>
 8003cae:	602f      	str	r7, [r5, #0]
 8003cb0:	e7b1      	b.n	8003c16 <__sflush_r+0x1a>
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb8:	81a3      	strh	r3, [r4, #12]
 8003cba:	e7ad      	b.n	8003c18 <__sflush_r+0x1c>
 8003cbc:	690f      	ldr	r7, [r1, #16]
 8003cbe:	2f00      	cmp	r7, #0
 8003cc0:	d0a9      	beq.n	8003c16 <__sflush_r+0x1a>
 8003cc2:	0793      	lsls	r3, r2, #30
 8003cc4:	680e      	ldr	r6, [r1, #0]
 8003cc6:	bf08      	it	eq
 8003cc8:	694b      	ldreq	r3, [r1, #20]
 8003cca:	600f      	str	r7, [r1, #0]
 8003ccc:	bf18      	it	ne
 8003cce:	2300      	movne	r3, #0
 8003cd0:	eba6 0807 	sub.w	r8, r6, r7
 8003cd4:	608b      	str	r3, [r1, #8]
 8003cd6:	f1b8 0f00 	cmp.w	r8, #0
 8003cda:	dd9c      	ble.n	8003c16 <__sflush_r+0x1a>
 8003cdc:	6a21      	ldr	r1, [r4, #32]
 8003cde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ce0:	4643      	mov	r3, r8
 8003ce2:	463a      	mov	r2, r7
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	47b0      	blx	r6
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	dc06      	bgt.n	8003cfa <__sflush_r+0xfe>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf2:	81a3      	strh	r3, [r4, #12]
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	e78e      	b.n	8003c18 <__sflush_r+0x1c>
 8003cfa:	4407      	add	r7, r0
 8003cfc:	eba8 0800 	sub.w	r8, r8, r0
 8003d00:	e7e9      	b.n	8003cd6 <__sflush_r+0xda>
 8003d02:	bf00      	nop
 8003d04:	dfbffffe 	.word	0xdfbffffe

08003d08 <_fflush_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	690b      	ldr	r3, [r1, #16]
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	460c      	mov	r4, r1
 8003d10:	b913      	cbnz	r3, 8003d18 <_fflush_r+0x10>
 8003d12:	2500      	movs	r5, #0
 8003d14:	4628      	mov	r0, r5
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
 8003d18:	b118      	cbz	r0, 8003d22 <_fflush_r+0x1a>
 8003d1a:	6a03      	ldr	r3, [r0, #32]
 8003d1c:	b90b      	cbnz	r3, 8003d22 <_fflush_r+0x1a>
 8003d1e:	f7ff fc95 	bl	800364c <__sinit>
 8003d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f3      	beq.n	8003d12 <_fflush_r+0xa>
 8003d2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d2c:	07d0      	lsls	r0, r2, #31
 8003d2e:	d404      	bmi.n	8003d3a <_fflush_r+0x32>
 8003d30:	0599      	lsls	r1, r3, #22
 8003d32:	d402      	bmi.n	8003d3a <_fflush_r+0x32>
 8003d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d36:	f7ff fe66 	bl	8003a06 <__retarget_lock_acquire_recursive>
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	f7ff ff5d 	bl	8003bfc <__sflush_r>
 8003d42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d44:	07da      	lsls	r2, r3, #31
 8003d46:	4605      	mov	r5, r0
 8003d48:	d4e4      	bmi.n	8003d14 <_fflush_r+0xc>
 8003d4a:	89a3      	ldrh	r3, [r4, #12]
 8003d4c:	059b      	lsls	r3, r3, #22
 8003d4e:	d4e1      	bmi.n	8003d14 <_fflush_r+0xc>
 8003d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d52:	f7ff fe59 	bl	8003a08 <__retarget_lock_release_recursive>
 8003d56:	e7dd      	b.n	8003d14 <_fflush_r+0xc>

08003d58 <__swhatbuf_r>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d60:	2900      	cmp	r1, #0
 8003d62:	b096      	sub	sp, #88	; 0x58
 8003d64:	4615      	mov	r5, r2
 8003d66:	461e      	mov	r6, r3
 8003d68:	da0d      	bge.n	8003d86 <__swhatbuf_r+0x2e>
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003d70:	f04f 0100 	mov.w	r1, #0
 8003d74:	bf0c      	ite	eq
 8003d76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003d7a:	2340      	movne	r3, #64	; 0x40
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	6031      	str	r1, [r6, #0]
 8003d80:	602b      	str	r3, [r5, #0]
 8003d82:	b016      	add	sp, #88	; 0x58
 8003d84:	bd70      	pop	{r4, r5, r6, pc}
 8003d86:	466a      	mov	r2, sp
 8003d88:	f000 f848 	bl	8003e1c <_fstat_r>
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	dbec      	blt.n	8003d6a <__swhatbuf_r+0x12>
 8003d90:	9901      	ldr	r1, [sp, #4]
 8003d92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003d96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003d9a:	4259      	negs	r1, r3
 8003d9c:	4159      	adcs	r1, r3
 8003d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003da2:	e7eb      	b.n	8003d7c <__swhatbuf_r+0x24>

08003da4 <__smakebuf_r>:
 8003da4:	898b      	ldrh	r3, [r1, #12]
 8003da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003da8:	079d      	lsls	r5, r3, #30
 8003daa:	4606      	mov	r6, r0
 8003dac:	460c      	mov	r4, r1
 8003dae:	d507      	bpl.n	8003dc0 <__smakebuf_r+0x1c>
 8003db0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	6123      	str	r3, [r4, #16]
 8003db8:	2301      	movs	r3, #1
 8003dba:	6163      	str	r3, [r4, #20]
 8003dbc:	b002      	add	sp, #8
 8003dbe:	bd70      	pop	{r4, r5, r6, pc}
 8003dc0:	ab01      	add	r3, sp, #4
 8003dc2:	466a      	mov	r2, sp
 8003dc4:	f7ff ffc8 	bl	8003d58 <__swhatbuf_r>
 8003dc8:	9900      	ldr	r1, [sp, #0]
 8003dca:	4605      	mov	r5, r0
 8003dcc:	4630      	mov	r0, r6
 8003dce:	f7ff fe89 	bl	8003ae4 <_malloc_r>
 8003dd2:	b948      	cbnz	r0, 8003de8 <__smakebuf_r+0x44>
 8003dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dd8:	059a      	lsls	r2, r3, #22
 8003dda:	d4ef      	bmi.n	8003dbc <__smakebuf_r+0x18>
 8003ddc:	f023 0303 	bic.w	r3, r3, #3
 8003de0:	f043 0302 	orr.w	r3, r3, #2
 8003de4:	81a3      	strh	r3, [r4, #12]
 8003de6:	e7e3      	b.n	8003db0 <__smakebuf_r+0xc>
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	6020      	str	r0, [r4, #0]
 8003dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df0:	81a3      	strh	r3, [r4, #12]
 8003df2:	9b00      	ldr	r3, [sp, #0]
 8003df4:	6163      	str	r3, [r4, #20]
 8003df6:	9b01      	ldr	r3, [sp, #4]
 8003df8:	6120      	str	r0, [r4, #16]
 8003dfa:	b15b      	cbz	r3, 8003e14 <__smakebuf_r+0x70>
 8003dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e00:	4630      	mov	r0, r6
 8003e02:	f000 f81d 	bl	8003e40 <_isatty_r>
 8003e06:	b128      	cbz	r0, 8003e14 <__smakebuf_r+0x70>
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	f023 0303 	bic.w	r3, r3, #3
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	81a3      	strh	r3, [r4, #12]
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	431d      	orrs	r5, r3
 8003e18:	81a5      	strh	r5, [r4, #12]
 8003e1a:	e7cf      	b.n	8003dbc <__smakebuf_r+0x18>

08003e1c <_fstat_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	4d07      	ldr	r5, [pc, #28]	; (8003e3c <_fstat_r+0x20>)
 8003e20:	2300      	movs	r3, #0
 8003e22:	4604      	mov	r4, r0
 8003e24:	4608      	mov	r0, r1
 8003e26:	4611      	mov	r1, r2
 8003e28:	602b      	str	r3, [r5, #0]
 8003e2a:	f7fd f806 	bl	8000e3a <_fstat>
 8003e2e:	1c43      	adds	r3, r0, #1
 8003e30:	d102      	bne.n	8003e38 <_fstat_r+0x1c>
 8003e32:	682b      	ldr	r3, [r5, #0]
 8003e34:	b103      	cbz	r3, 8003e38 <_fstat_r+0x1c>
 8003e36:	6023      	str	r3, [r4, #0]
 8003e38:	bd38      	pop	{r3, r4, r5, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20012f3c 	.word	0x20012f3c

08003e40 <_isatty_r>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4d06      	ldr	r5, [pc, #24]	; (8003e5c <_isatty_r+0x1c>)
 8003e44:	2300      	movs	r3, #0
 8003e46:	4604      	mov	r4, r0
 8003e48:	4608      	mov	r0, r1
 8003e4a:	602b      	str	r3, [r5, #0]
 8003e4c:	f7fd f805 	bl	8000e5a <_isatty>
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	d102      	bne.n	8003e5a <_isatty_r+0x1a>
 8003e54:	682b      	ldr	r3, [r5, #0]
 8003e56:	b103      	cbz	r3, 8003e5a <_isatty_r+0x1a>
 8003e58:	6023      	str	r3, [r4, #0]
 8003e5a:	bd38      	pop	{r3, r4, r5, pc}
 8003e5c:	20012f3c 	.word	0x20012f3c

08003e60 <_sbrk_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	4d06      	ldr	r5, [pc, #24]	; (8003e7c <_sbrk_r+0x1c>)
 8003e64:	2300      	movs	r3, #0
 8003e66:	4604      	mov	r4, r0
 8003e68:	4608      	mov	r0, r1
 8003e6a:	602b      	str	r3, [r5, #0]
 8003e6c:	f000 f808 	bl	8003e80 <_sbrk>
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	d102      	bne.n	8003e7a <_sbrk_r+0x1a>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	b103      	cbz	r3, 8003e7a <_sbrk_r+0x1a>
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	20012f3c 	.word	0x20012f3c

08003e80 <_sbrk>:
 8003e80:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <_sbrk+0x14>)
 8003e82:	6811      	ldr	r1, [r2, #0]
 8003e84:	4603      	mov	r3, r0
 8003e86:	b909      	cbnz	r1, 8003e8c <_sbrk+0xc>
 8003e88:	4903      	ldr	r1, [pc, #12]	; (8003e98 <_sbrk+0x18>)
 8003e8a:	6011      	str	r1, [r2, #0]
 8003e8c:	6810      	ldr	r0, [r2, #0]
 8003e8e:	4403      	add	r3, r0
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4770      	bx	lr
 8003e94:	20012f4c 	.word	0x20012f4c
 8003e98:	20012f50 	.word	0x20012f50

08003e9c <_init>:
 8003e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9e:	bf00      	nop
 8003ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea2:	bc08      	pop	{r3}
 8003ea4:	469e      	mov	lr, r3
 8003ea6:	4770      	bx	lr

08003ea8 <_fini>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	bf00      	nop
 8003eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eae:	bc08      	pop	{r3}
 8003eb0:	469e      	mov	lr, r3
 8003eb2:	4770      	bx	lr
